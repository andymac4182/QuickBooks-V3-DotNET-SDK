namespace Intuit.Ipp.Data {
    using Newtonsoft.Json;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class EntitlementsResponse {
        
        private bool qboCompanyField;
        
        private string planNameField;
        
        private string maxUsersField;
        
        private string currentUsersField;
        
        private string daysRemainingTrialField;
        
        private EntitlementsResponseEntitlement[] entitlementField;
        
        private object[] thresholdsField;
        
        /// <remarks/>
        public bool QboCompany {
            get {
                return qboCompanyField;
            }
            set {
                qboCompanyField = value;
            }
        }
        
        /// <remarks/>
        public string PlanName {
            get {
                return planNameField;
            }
            set {
                planNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string MaxUsers {
            get {
                return maxUsersField;
            }
            set {
                maxUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string CurrentUsers {
            get {
                return currentUsersField;
            }
            set {
                currentUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string DaysRemainingTrial {
            get {
                return daysRemainingTrialField;
            }
            set {
                daysRemainingTrialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Entitlement")]
        public EntitlementsResponseEntitlement[] Entitlement {
            get {
                return entitlementField;
            }
            set {
                entitlementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Thresholds")]
        public object[] Thresholds {
            get {
                return thresholdsField;
            }
            set {
                thresholdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class EntitlementsResponseEntitlement {
        
        private string nameField;
        
        private EntitlementsResponseEntitlementTerm termField;
        
        private string idField;
        
        /// <remarks/>
        public string name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        public EntitlementsResponseEntitlementTerm term {
            get {
                return termField;
            }
            set {
                termField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum EntitlementsResponseEntitlementTerm {
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
    }
    
    /// <remarks/>
    /// <summary>
    /// Product: QBO Description: Holder for a collection of Cascade objects. Used by messaging. Not intended for external clients.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CascadeResponse {
        
        private Cascade[] cascadeField;
        
        /// <remarks/>
        /// <summary>
        /// Cascading events for an entity
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Cascade")]
        public Cascade[] Cascade {
            get {
                return cascadeField;
            }
            set {
                cascadeField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Product: QBO Description: Object representing cascading events on entities resulting from a transaction event. Used by messaging. Not intended for external clients.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Cascade {
        
        private string entityNameField;
        
        private string idField;
        
        private NameValue[] keyValueField;
        
        /// <remarks/>
        /// <summary>
        /// Any IntuitEntity derived object name like Customer, Item, Invoice, ...
        /// </summary>
        public string EntityName {
            get {
                return entityNameField;
            }
            set {
                entityNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Description: Unique identifier for an Intuit entity.
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Cascading events resulting from a transaction event in the form of key value pairs. Key names are user defined.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("KeyValue")]
        public NameValue[] KeyValue {
            get {
                return keyValueField;
            }
            set {
                keyValueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A name/value pair that allows the client to include data that is meaningful in the domain of origin, outside of the Intuit domain.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class NameValue : IEntity {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the element.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Value of the element.
        /// 
        /// </summary>
        public string Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Group Summary
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Summary {
        
        private ColData[] colDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ColData")]
        public ColData[] ColData {
            get {
                return colDataField;
            }
            set {
                colDataField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// One ColData can contain one column
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ColData : IEntity {
        
        private Attribute[] attributesField;
        
        private string valueField;
        
        private string idField;
        
        private string hrefField;
        
        /// <remarks/>
        /// <summary>
        /// Describes the column attributes
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Attribute[] Attributes {
            get {
                return attributesField;
            }
            set {
                attributesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Reference url
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string href {
            get {
                return hrefField;
            }
            set {
                hrefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Attribute {
        
        private string typeField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>
        /// Describes the Name
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Describes the Value
        /// </summary>
        public string Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// List of rows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    public partial class Rows : IEntity {
        
        private Row[] rowField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Row")]
        public Row[] Row {
            get {
                return rowField;
            }
            set {
                rowField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// One Row can contain any number of columns
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Row : IEntity {
        
        private string idField;
        
        private string parentIdField;
        
        private object[] itemsField;
        
        private ItemsChoiceType1[] itemsElementNameField;
        
        private RowTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        private string groupField;
        
        /// <remarks/>
        public string id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        public string parentId {
            get {
                return parentIdField;
            }
            set {
                parentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ColData", typeof(ColData))]
        [System.Xml.Serialization.XmlElementAttribute("Header", typeof(Header))]
        [System.Xml.Serialization.XmlElementAttribute("Rows", typeof(Rows))]
        [System.Xml.Serialization.XmlElementAttribute("Summary", typeof(Summary))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemsChoiceType1[] ItemsElementName {
            get {
                return itemsElementNameField;
            }
            set {
                itemsElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Row type section, summary, data row etc..
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RowTypeEnum type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool typeSpecified {
            get {
                return typeFieldSpecified;
            }
            set {
                typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Report Group Income, Expense, COGS etc..
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string group {
            get {
                return groupField;
            }
            set {
                groupField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Group Header
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Header : IEntity {
        
        private ColData[] colDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ColData")]
        public ColData[] ColData {
            get {
                return colDataField;
            }
            set {
                colDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemsChoiceType1 {
        
        /// <remarks/>
        ColData,
        
        /// <remarks/>
        Header,
        
        /// <remarks/>
        Rows,
        
        /// <remarks/>
        Summary,
    }
    
    /// <remarks/>
    /// <summary>
    /// List of all row types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum RowTypeEnum {
        
        /// <remarks/>
        Section,
        
        /// <remarks/>
        Data,
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes list of OLBAccounts that needs to be
    /// enabled or disabled
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OLBStatus {
        
        private OLBAccount[] oLBAccountField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Account details
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OLBAccount")]
        public OLBAccount[] OLBAccount {
            get {
                return oLBAccountField;
            }
            set {
                oLBAccountField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes OLBAccount details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OLBAccount {
        
        private ReferenceType accountIdField;
        
        private string accountDetailsField;
        
        private bool subscribedToAppField;
        
        private bool subscribedToAppFieldSpecified;
        
        private string appVersionField;
        
        private decimal lastBankBalanceField;
        
        private bool lastBankBalanceFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: AccountId to be enabled or disabled
        /// 
        /// </summary>
        public ReferenceType AccountId {
            get {
                return accountIdField;
            }
            set {
                accountIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Account details that contains possibly credit
        /// card number, last 5 digits
        /// </summary>
        public string AccountDetails {
            get {
                return accountDetailsField;
            }
            set {
                accountDetailsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// True when the AccountId is linked to an IPP app
        /// and false when the AccountId is delinked from the IPP app
        /// 
        /// </summary>
        public bool SubscribedToApp {
            get {
                return subscribedToAppField;
            }
            set {
                subscribedToAppField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SubscribedToAppSpecified {
            get {
                return subscribedToAppFieldSpecified;
            }
            set {
                subscribedToAppFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies which version is being used (such as v1
        /// or v2). This field is optional.
        /// </summary>
        public string AppVersion {
            get {
                return appVersionField;
            }
            set {
                appVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The last bank balance. This field is optional.
        /// 
        /// </summary>
        public decimal LastBankBalance {
            get {
                return lastBankBalanceField;
            }
            set {
                lastBankBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastBankBalanceSpecified {
            get {
                return lastBankBalanceFieldSpecified;
            }
            set {
                lastBankBalanceFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Reference type of all IDs that are taken as input or output.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ReferenceType {
        
        private string nameField;
        
        private string typeField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Detailed data about a warning condition that occurred when a request was processed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Warning {
        
        private string messageField;
        
        private string detailField;
        
        private string codeField;
        
        private string elementField;
        
        /// <remarks/>
        /// <summary>
        /// Localized standard message associated with the warning
        /// </summary>
        public string Message {
            get {
                return messageField;
            }
            set {
                messageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Detailed message regarding the warning condition with specifics
        /// </summary>
        public string Detail {
            get {
                return detailField;
            }
            set {
                detailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Warning code, this is a required field
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code {
            get {
                return codeField;
            }
            set {
                codeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The element (if any) directly involved in the warning (i.e. an ignored element)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string element {
            get {
                return elementField;
            }
            set {
                elementField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes a column
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Column {
        
        private string colTitleField;
        
        private string colTypeField;
        
        private NameValue[] metaDataField;
        
        private Column[] columnsField;
        
        /// <remarks/>
        /// <summary>
        /// Describes the column title name
        /// </summary>
        public string ColTitle {
            get {
                return colTitleField;
            }
            set {
                colTitleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Describes the column type enumeration
        /// </summary>
        public string ColType {
            get {
                return colTypeField;
            }
            set {
                colTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Column Metadata
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MetaData")]
        public NameValue[] MetaData {
            get {
                return metaDataField;
            }
            set {
                metaDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Subcolumns of the column
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Column[] Columns {
            get {
                return columnsField;
            }
            set {
                columnsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Thresholds {
        
        private ThresholdsThreshold[] thresholdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Threshold")]
        public ThresholdsThreshold[] Threshold {
            get {
                return thresholdField;
            }
            set {
                thresholdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ThresholdsThreshold {
        
        private string nameField;
        
        private string limitField;
        
        private string enforcedField;
        
        private string currentCountField;
        
        private string aboveThresholdField;
        
        /// <remarks/>
        public string name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        public string limit {
            get {
                return limitField;
            }
            set {
                limitField = value;
            }
        }
        
        /// <remarks/>
        public string enforced {
            get {
                return enforcedField;
            }
            set {
                enforcedField = value;
            }
        }
        
        /// <remarks/>
        public string currentCount {
            get {
                return currentCountField;
            }
            set {
                currentCountField = value;
            }
        }
        
        /// <remarks/>
        public string aboveThreshold {
            get {
                return aboveThresholdField;
            }
            set {
                aboveThresholdField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// enumeration of how the Fixed Asset has been
    /// acquired
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AcquiredAsEnum {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Used,
    }
    
    /// <remarks/>
    /// <summary>
    /// Month enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum MonthEnum {
        
        /// <remarks/>
        January,
        
        /// <remarks/>
        February,
        
        /// <remarks/>
        March,
        
        /// <remarks/>
        April,
        
        /// <remarks/>
        May,
        
        /// <remarks/>
        June,
        
        /// <remarks/>
        July,
        
        /// <remarks/>
        August,
        
        /// <remarks/>
        September,
        
        /// <remarks/>
        October,
        
        /// <remarks/>
        November,
        
        /// <remarks/>
        December,
    }
    
    /// <remarks/>
    /// <summary>
    /// Week enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum WeekEnum {
        
        /// <remarks/>
        Sunday,
        
        /// <remarks/>
        Monday,
        
        /// <remarks/>
        Tuesday,
        
        /// <remarks/>
        Wednesday,
        
        /// <remarks/>
        Thursday,
        
        /// <remarks/>
        Friday,
        
        /// <remarks/>
        Saturday,
    }
    
    /// <remarks/>
    /// <summary>
    /// enumeration of UOM support types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum UOMFeatureTypeEnum {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        SinglePerItem,
        
        /// <remarks/>
        MultiplePerItem,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of basic
    /// Account types used generally in the accounting activities.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AccountClassificationEnum {
        
        /// <remarks/>
        Asset,
        
        /// <remarks/>
        Equity,
        
        /// <remarks/>
        Expense,
        
        /// <remarks/>
        Liability,
        
        /// <remarks/>
        Revenue,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of types of
    /// Items in QuickBooks.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ItemTypeEnum {
        
        /// <remarks/>
        Assembly,
        
        /// <remarks/>
        Category,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fixed Asset")]
        FixedAsset,
        
        /// <remarks/>
        Group,
        
        /// <remarks/>
        Inventory,
        
        /// <remarks/>
        NonInventory,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Charge")]
        OtherCharge,
        
        /// <remarks/>
        Payment,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        Subtotal,
        
        /// <remarks/>
        Discount,
        
        /// <remarks/>
        Tax,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tax Group")]
        TaxGroup,
        
        /// <remarks/>
        Bundle,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of customer
    /// types in QuickBooks.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CustomerTypeEnum {
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        Job,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Billable
    /// Status used when searching for reimbursable expenses.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum BillableStatusEnum {
        
        /// <remarks/>
        Billable,
        
        /// <remarks/>
        NotBillable,
        
        /// <remarks/>
        HasBeenBilled,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Tax Form Type holds data related to Tax Information (Tax Form Type)
    /// based on Regional compliance laws. Applicable for IN region
    /// currently. Can be used to extend for other Regions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxFormTypeEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form C")]
        FormC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form F")]
        FormF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form I")]
        FormI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form H")]
        FormH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form E1")]
        FormE1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Form E2")]
        FormE2,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Entity
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EntityTypeEnum {
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Job,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Vendor,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of tax
    /// applicable on Journal Entry (Sales/Purchase)
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxApplicableOnEnum {
        
        /// <remarks/>
        Purchase,
        
        /// <remarks/>
        Sales,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of QuickBooks
    /// posting types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PostingTypeEnum {
        
        /// <remarks/>
        Credit,
        
        /// <remarks/>
        Debit,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration line detail
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum LineDetailTypeEnum {
        
        /// <remarks/>
        PaymentLineDetail,
        
        /// <remarks/>
        DiscountLineDetail,
        
        /// <remarks/>
        TaxLineDetail,
        
        /// <remarks/>
        SalesItemLineDetail,
        
        /// <remarks/>
        ItemBasedExpenseLineDetail,
        
        /// <remarks/>
        AccountBasedExpenseLineDetail,
        
        /// <remarks/>
        DepositLineDetail,
        
        /// <remarks/>
        PurchaseOrderItemLineDetail,
        
        /// <remarks/>
        ItemReceiptLineDetail,
        
        /// <remarks/>
        JournalEntryLineDetail,
        
        /// <remarks/>
        GroupLineDetail,
        
        /// <remarks/>
        DescriptionOnly,
        
        /// <remarks/>
        SubTotalLineDetail,
        
        /// <remarks/>
        SalesOrderItemLineDetail,
        
        /// <remarks/>
        TDSLineDetail,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Account
    /// sub-types(QBW) and Account types(QBO) used to specifically
    /// categorize accounts. Note: QBO doesn't support the "Non-Posting"
    /// Account type.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AccountTypeEnum {
        
        /// <remarks/>
        Bank,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Accounts Receivable")]
        [JsonPropertyAttribute("Accounts Receivable")]
        AccountsReceivable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Current Asset")]
        [JsonPropertyAttribute("Other Current Asset")]
        OtherCurrentAsset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fixed Asset")]
        [JsonPropertyAttribute("Fixed Asset")]
        FixedAsset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Asset")]
        [JsonPropertyAttribute("Other Asset")]
        OtherAsset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Accounts Payable")]
        [JsonPropertyAttribute("Accounts Payable")]
        AccountsPayable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Credit Card")]
        [JsonPropertyAttribute("Credit Card")]
        CreditCard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Current Liability")]
        [JsonPropertyAttribute("Other Current Liability")]
        OtherCurrentLiability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Long Term Liability")]
        [JsonPropertyAttribute("Long Term Liability")]
        LongTermLiability,
        
        /// <remarks/>
        Equity,
        
        /// <remarks/>
        Income,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Cost of Goods Sold")]
        [JsonPropertyAttribute("Cost of Goods Sold")]
        CostofGoodsSold,
        
        /// <remarks/>
        Expense,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Income")]
        [JsonPropertyAttribute("Other Income")]
        OtherIncome,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other Expense")]
        [JsonPropertyAttribute("Other Expense")]
        OtherExpense,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Non-Posting")]
        [JsonPropertyAttribute("Non-Posting")]
        NonPosting,
    }
    
    /// <remarks/>
    /// <summary>
    /// Product: QBO Description: Enumeration of
    /// TaxRateDisplayType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxRateDisplayTypeEnum {
        
        /// <remarks/>
        ReadOnly,
        
        /// <remarks/>
        HideInTransactionForms,
        
        /// <remarks/>
        HideInPrintedForms,
        
        /// <remarks/>
        HideInAll,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of Account
    /// sub-types used to specifically categorize account types in
    /// QuickBooks Online.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AccountSubTypeEnum {
        
        /// <remarks/>
        IncomeTaxPayable,
        
        /// <remarks/>
        IntangibleAssetsOther,
        
        /// <remarks/>
        AccountsPayable,
        
        /// <remarks/>
        AccountsReceivable,
        
        /// <remarks/>
        AccumulatedAdjustment,
        
        /// <remarks/>
        AccumulatedAmortization,
        
        /// <remarks/>
        AccumulatedAmortizationOfOtherAssets,
        
        /// <remarks/>
        AccumulatedDepletion,
        
        /// <remarks/>
        AccumulatedDepreciation,
        
        /// <remarks/>
        AdvertisingPromotional,
        
        /// <remarks/>
        AllowanceForBadDebts,
        
        /// <remarks/>
        Amortization,
        
        /// <remarks/>
        Auto,
        
        /// <remarks/>
        BadDebts,
        
        /// <remarks/>
        BankCharges,
        
        /// <remarks/>
        Buildings,
        
        /// <remarks/>
        CashOnHand,
        
        /// <remarks/>
        CharitableContributions,
        
        /// <remarks/>
        Checking,
        
        /// <remarks/>
        CommonStock,
        
        /// <remarks/>
        CostOfLabor,
        
        /// <remarks/>
        CostOfLaborCos,
        
        /// <remarks/>
        CreditCard,
        
        /// <remarks/>
        DepletableAssets,
        
        /// <remarks/>
        Depreciation,
        
        /// <remarks/>
        DevelopmentCosts,
        
        /// <remarks/>
        DirectDepositPayable,
        
        /// <remarks/>
        DiscountsRefundsGiven,
        
        /// <remarks/>
        DividendIncome,
        
        /// <remarks/>
        DuesSubscriptions,
        
        /// <remarks/>
        EmployeeCashAdvances,
        
        /// <remarks/>
        Entertainment,
        
        /// <remarks/>
        EntertainmentMeals,
        
        /// <remarks/>
        EquipmentRental,
        
        /// <remarks/>
        EquipmentRentalCos,
        
        /// <remarks/>
        EstimatedTaxes,
        
        /// <remarks/>
        ExchangeGainOrLoss,
        
        /// <remarks/>
        FederalIncomeTaxPayable,
        
        /// <remarks/>
        FinanceCosts,
        
        /// <remarks/>
        FixedAssetComputers,
        
        /// <remarks/>
        FixedAssetCopiers,
        
        /// <remarks/>
        FixedAssetFurniture,
        
        /// <remarks/>
        FixedAssetPhone,
        
        /// <remarks/>
        FixedAssetPhotoVideo,
        
        /// <remarks/>
        FixedAssetSoftware,
        
        /// <remarks/>
        FixedAssetOtherToolsEquipment,
        
        /// <remarks/>
        FurnitureAndFixtures,
        
        /// <remarks/>
        GlobalTaxExpense,
        
        /// <remarks/>
        GlobalTaxPayable,
        
        /// <remarks/>
        GlobalTaxSuspense,
        
        /// <remarks/>
        GasAndFuel,
        
        /// <remarks/>
        Goodwill,
        
        /// <remarks/>
        Gratuity,
        
        /// <remarks/>
        Healthcare,
        
        /// <remarks/>
        HomeOffice,
        
        /// <remarks/>
        HomeownerRentalInsurance,
        
        /// <remarks/>
        Insurance,
        
        /// <remarks/>
        InsurancePayable,
        
        /// <remarks/>
        IntangibleAssets,
        
        /// <remarks/>
        InterestEarned,
        
        /// <remarks/>
        InterestPaid,
        
        /// <remarks/>
        Inventory,
        
        /// <remarks/>
        Investment_MortgageRealEstateLoans,
        
        /// <remarks/>
        Investment_Other,
        
        /// <remarks/>
        Investment_TaxExemptSecurities,
        
        /// <remarks/>
        Investment_USGovernmentObligations,
        
        /// <remarks/>
        Land,
        
        /// <remarks/>
        LeaseBuyout,
        
        /// <remarks/>
        LeaseholdImprovements,
        
        /// <remarks/>
        LegalProfessionalFees,
        
        /// <remarks/>
        Licenses,
        
        /// <remarks/>
        LineOfCredit,
        
        /// <remarks/>
        LoanPayable,
        
        /// <remarks/>
        LoansToOfficers,
        
        /// <remarks/>
        LoansToOthers,
        
        /// <remarks/>
        LoansToStockholders,
        
        /// <remarks/>
        MachineryAndEquipment,
        
        /// <remarks/>
        MoneyMarket,
        
        /// <remarks/>
        MortgageInterestHomeOffice,
        
        /// <remarks/>
        NonProfitIncome,
        
        /// <remarks/>
        NotesPayable,
        
        /// <remarks/>
        OfficeGeneralAdministrativeExpenses,
        
        /// <remarks/>
        OpeningBalanceEquity,
        
        /// <remarks/>
        OrganizationalCosts,
        
        /// <remarks/>
        OtherBusinessExpenses,
        
        /// <remarks/>
        OtherCostsOfServiceCos,
        
        /// <remarks/>
        OtherCurrentAssets,
        
        /// <remarks/>
        OtherCurrentLiabilities,
        
        /// <remarks/>
        OtherFixedAssets,
        
        /// <remarks/>
        OtherHomeOfficeExpenses,
        
        /// <remarks/>
        OtherInvestmentIncome,
        
        /// <remarks/>
        OtherLongTermAssets,
        
        /// <remarks/>
        OtherLongTermLiabilities,
        
        /// <remarks/>
        OtherMiscellaneousExpense,
        
        /// <remarks/>
        OtherMiscellaneousIncome,
        
        /// <remarks/>
        OtherMiscellaneousServiceCost,
        
        /// <remarks/>
        OtherPrimaryIncome,
        
        /// <remarks/>
        OtherVehicleExpenses,
        
        /// <remarks/>
        OwnersEquity,
        
        /// <remarks/>
        PaidInCapitalOrSurplus,
        
        /// <remarks/>
        ParkingAndTolls,
        
        /// <remarks/>
        PartnerContributions,
        
        /// <remarks/>
        PartnerDistributions,
        
        /// <remarks/>
        PartnersEquity,
        
        /// <remarks/>
        PayrollClearing,
        
        /// <remarks/>
        PayrollExpenses,
        
        /// <remarks/>
        PayrollTaxPayable,
        
        /// <remarks/>
        PenaltiesSettlements,
        
        /// <remarks/>
        PersonalExpense,
        
        /// <remarks/>
        PersonalIncome,
        
        /// <remarks/>
        PreferredStock,
        
        /// <remarks/>
        PrepaidExpenses,
        
        /// <remarks/>
        PrepaidExpensesPayable,
        
        /// <remarks/>
        PromotionalMeals,
        
        /// <remarks/>
        RentAndLeaseHomeOffice,
        
        /// <remarks/>
        RentOrLeaseOfBuildings,
        
        /// <remarks/>
        RentsHeldInTrust,
        
        /// <remarks/>
        RentsInTrustLiability,
        
        /// <remarks/>
        RepairsAndMaintainceHomeOffice,
        
        /// <remarks/>
        RepairMaintenance,
        
        /// <remarks/>
        Retainage,
        
        /// <remarks/>
        RetainedEarnings,
        
        /// <remarks/>
        SalesOfProductIncome,
        
        /// <remarks/>
        SalesTaxPayable,
        
        /// <remarks/>
        Savings,
        
        /// <remarks/>
        SecurityDeposits,
        
        /// <remarks/>
        ServiceFeeIncome,
        
        /// <remarks/>
        ShareholderNotesPayable,
        
        /// <remarks/>
        ShippingFreightDelivery,
        
        /// <remarks/>
        ShippingFreightDeliveryCos,
        
        /// <remarks/>
        StateLocalIncomeTaxPayable,
        
        /// <remarks/>
        SuppliesMaterials,
        
        /// <remarks/>
        SuppliesMaterialsCogs,
        
        /// <remarks/>
        TaxesPaid,
        
        /// <remarks/>
        TaxExemptInterest,
        
        /// <remarks/>
        Travel,
        
        /// <remarks/>
        TravelMeals,
        
        /// <remarks/>
        TreasuryStock,
        
        /// <remarks/>
        TrustAccounts,
        
        /// <remarks/>
        TrustAccountsLiabilities,
        
        /// <remarks/>
        UnappliedCashBillPaymentExpense,
        
        /// <remarks/>
        UnappliedCashPaymentIncome,
        
        /// <remarks/>
        UndepositedFunds,
        
        /// <remarks/>
        Utilities,
        
        /// <remarks/>
        UtilitiesHomeOffice,
        
        /// <remarks/>
        Vehicle,
        
        /// <remarks/>
        VehicleInsurance,
        
        /// <remarks/>
        VehicleLease,
        
        /// <remarks/>
        VehicleLoan,
        
        /// <remarks/>
        VehicleLoanInterest,
        
        /// <remarks/>
        VehicleRegistration,
        
        /// <remarks/>
        VehicleRepairs,
        
        /// <remarks/>
        Vehicles,
        
        /// <remarks/>
        WashAndRoadServices,
        
        /// <remarks/>
        WithholdingTaxSales,
        
        /// <remarks/>
        WithholdingTaxPurchases,
        
        /// <remarks/>
        WithholdingAssetAmount,
        
        /// <remarks/>
        WithholdingLiabilityAmount,
        
        /// <remarks/>
        WithholdingTaxSuspense,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DevelopmentCosts")]
        DevelopmentCosts1,
        
        /// <remarks/>
        ProvisionsCurrentAssets,
        
        /// <remarks/>
        OtherConsumables,
        
        /// <remarks/>
        ExpenditureAuthorisationsAndLettersOfCredit,
        
        /// <remarks/>
        InternalTransfers,
        
        /// <remarks/>
        ProvisionsFixedAssets,
        
        /// <remarks/>
        AssetsInCourseOfConstruction,
        
        /// <remarks/>
        ParticipatingInterests,
        
        /// <remarks/>
        CumulativeDepreciationOnIntangibleAssets,
        
        /// <remarks/>
        ProvisionsNonCurrentAssets,
        
        /// <remarks/>
        OutstandingDuesMicroSmallEnterprise,
        
        /// <remarks/>
        OutstandingDuesOtherThanMicroSmallEnterprise,
        
        /// <remarks/>
        GlobalTaxRefund,
        
        /// <remarks/>
        GlobalTaxDeferred,
        
        /// <remarks/>
        ProvisionsCurrentLiabilities,
        
        /// <remarks/>
        StaffAndRelatedLiabilityAccounts,
        
        /// <remarks/>
        SocialSecurityAgencies,
        
        /// <remarks/>
        SundryDebtorsAndCreditors,
        
        /// <remarks/>
        ProvisionsNonCurrentLiabilities,
        
        /// <remarks/>
        DebtsRelatedToParticipatingInterests,
        
        /// <remarks/>
        StaffAndRelatedLongTermLiabilityAccounts,
        
        /// <remarks/>
        GovernmentAndOtherPublicAuthorities,
        
        /// <remarks/>
        GroupAndAssociates,
        
        /// <remarks/>
        InvestmentGrants,
        
        /// <remarks/>
        CashReceiptIncome,
        
        /// <remarks/>
        OwnWorkCapitalized,
        
        /// <remarks/>
        OperatingGrants,
        
        /// <remarks/>
        OtherCurrentOperatingIncome,
        
        /// <remarks/>
        CostOfSales,
        
        /// <remarks/>
        CashExpenditureExpense,
        
        /// <remarks/>
        ExternalServices,
        
        /// <remarks/>
        OtherExternalServices,
        
        /// <remarks/>
        PurchasesRebates,
        
        /// <remarks/>
        OtherRentalCosts,
        
        /// <remarks/>
        ProjectStudiesSurveysAssessments,
        
        /// <remarks/>
        Sundry,
        
        /// <remarks/>
        StaffCosts,
        
        /// <remarks/>
        OtherCurrentOperatingCharges,
        
        /// <remarks/>
        ExtraordinaryCharges,
        
        /// <remarks/>
        AppropriationsToDepreciation,
        
        /// <remarks/>
        AccrualsAndDeferredIncome,
        
        /// <remarks/>
        CurrentTaxLiability,
        
        /// <remarks/>
        DeferredTax,
        
        /// <remarks/>
        DistributionCosts,
        
        /// <remarks/>
        Investments,
        
        /// <remarks/>
        LongTermBorrowings,
        
        /// <remarks/>
        OtherIntangibleAssets,
        
        /// <remarks/>
        PrepaymentsAndAccruedIncome,
        
        /// <remarks/>
        ShortTermBorrowings,
        
        /// <remarks/>
        ProvisionForLiabilities,
        
        /// <remarks/>
        CalledUpShareCapital,
        
        /// <remarks/>
        CalledUpShareCapitalNotPaid,
        
        /// <remarks/>
        LandAsset,
        
        /// <remarks/>
        AvailableForSaleFinancialAssets,
        
        /// <remarks/>
        ProvisionForWarrantyObligations,
        
        /// <remarks/>
        CurrentPortionEmployeeBenefitsObligations,
        
        /// <remarks/>
        LongTermEmployeeBenefitObligations,
        
        /// <remarks/>
        ObligationsUnderFinanceLeases,
        
        /// <remarks/>
        BankLoans,
        
        /// <remarks/>
        InterestPayables,
        
        /// <remarks/>
        GainLossOnSaleOfInvestments,
        
        /// <remarks/>
        GainLossOnSaleOfFixedAssets,
        
        /// <remarks/>
        ShareCapital,
        
        /// <remarks/>
        CurrentPortionOfObligationsUnderFinanceLeases,
        
        /// <remarks/>
        AssetsHeldForSale,
        
        /// <remarks/>
        AccruedLiabilities,
        
        /// <remarks/>
        AccruedLongLermLiabilities,
        
        /// <remarks/>
        AccruedVacationPayable,
        
        /// <remarks/>
        CashAndCashEquivalents,
        
        /// <remarks/>
        CommissionsAndFees,
        
        /// <remarks/>
        AmortizationExpense,
        
        /// <remarks/>
        LossOnDiscontinuedOperationsNetOfTax,
        
        /// <remarks/>
        ManagementCompensation,
        
        /// <remarks/>
        OtherSellingExpenses,
        
        /// <remarks/>
        LiabilitiesRelatedToAssetsHeldForSale,
        
        /// <remarks/>
        LongTermDebit,
        
        /// <remarks/>
        EquityInEarningsOfSubsiduaries,
        
        /// <remarks/>
        OtherOperatingIncome,
        
        /// <remarks/>
        RevenueGeneral,
        
        /// <remarks/>
        DividendDisbursed,
        
        /// <remarks/>
        FreightAndDeliveryCos,
        
        /// <remarks/>
        ShippingAndDeliveryExpense,
        
        /// <remarks/>
        TravelExpensesGeneralAndAdminExpenses,
        
        /// <remarks/>
        TravelExpensesSellingExpense,
        
        /// <remarks/>
        UnrealisedLossOnSecuritiesNetOfTax,
        
        /// <remarks/>
        SalesRetail,
        
        /// <remarks/>
        SalesWholesale,
        
        /// <remarks/>
        AccumulatedOtherComprehensiveIncome,
        
        /// <remarks/>
        AssetsAvailableForSale,
        
        /// <remarks/>
        LossOnDisposalOfAssets,
        
        /// <remarks/>
        NonCurrentAssets,
        
        /// <remarks/>
        IncomeTaxExpense,
        
        /// <remarks/>
        LongTermInvestments,
        
        /// <remarks/>
        DividendsPayable,
        
        /// <remarks/>
        TradeAndOtherReceivables,
        
        /// <remarks/>
        TradeAndOtherPayables,
        
        /// <remarks/>
        CurrentLiabilities,
        
        /// <remarks/>
        SavingsByTaxScheme,
        
        /// <remarks/>
        BorrowingCost,
        
        /// <remarks/>
        Depletion,
        
        /// <remarks/>
        ExceptionalItems,
        
        /// <remarks/>
        PriorPeriodItems,
        
        /// <remarks/>
        ExtraordinaryItems,
        
        /// <remarks/>
        MatCredit,
        
        /// <remarks/>
        OtherFreeReserves,
        
        /// <remarks/>
        CapitalReserves,
        
        /// <remarks/>
        Funds,
        
        /// <remarks/>
        MoneyReceivedAgainstShareWarrants,
        
        /// <remarks/>
        ShareApplicationMoneyPendingAllotment,
        
        /// <remarks/>
        DeferredTaxLiabilities,
        
        /// <remarks/>
        OtherLongTermProvisions,
        
        /// <remarks/>
        CapitalWip,
        
        /// <remarks/>
        IntangibleAssetsUnderDevelopment,
        
        /// <remarks/>
        OtherLongTermInvestments,
        
        /// <remarks/>
        LongTermLoansAndAdvancesToRelatedParties,
        
        /// <remarks/>
        OtherLongTermLoansAndAdvances,
        
        /// <remarks/>
        ShortTermInvestmentsInRelatedParties,
        
        /// <remarks/>
        OtherEarmarkedBankAccounts,
        
        /// <remarks/>
        ShortTermLoansAndAdvancesToRelatedParties,
        
        /// <remarks/>
        DeferredTaxExpense,
        
        /// <remarks/>
        IncomeTaxOtherExpense,
        
        /// <remarks/>
        DutiesAndTaxes,
        
        /// <remarks/>
        BalWithGovtAuthorities,
        
        /// <remarks/>
        TaxRoundoffGainOrLoss,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Credit Card
    /// operation type: Charge or Credit.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum APCreditCardOperationEnum {
        
        /// <remarks/>
        Charge,
        
        /// <remarks/>
        Credit,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of the days of
    /// the week.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DayOfWeekEnum {
        
        /// <remarks/>
        Monday,
        
        /// <remarks/>
        Tuesday,
        
        /// <remarks/>
        Wednesday,
        
        /// <remarks/>
        Thursday,
        
        /// <remarks/>
        Friday,
        
        /// <remarks/>
        Saturday,
        
        /// <remarks/>
        Sunday,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of status for
    /// an estimate.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EstimateStatusEnum {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        NotActive,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of payment
    /// methods when receiving a customer payment of paying for goods.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PaymentMethodEnum {
        
        /// <remarks/>
        AmEx,
        
        /// <remarks/>
        Cash,
        
        /// <remarks/>
        Check,
        
        /// <remarks/>
        DebitCard,
        
        /// <remarks/>
        Discover,
        
        /// <remarks/>
        ECheck,
        
        /// <remarks/>
        GiftCard,
        
        /// <remarks/>
        MasterCard,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        OtherCreditCard,
        
        /// <remarks/>
        Visa,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of payable
    /// status for an invoice, as follows: A pending invoice is not yet
    /// approved/final/sent; not yet payable by customer. A payable invoice
    /// is now payable. Partial payments may have been received, but money
    /// still remains to be paid. No claim is made about due vs. overdue,
    /// past due etc... A paid invoice has been paid in full. No amount
    /// remains to be paid.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PaymentStatusEnum {
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Overdue,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Payable,
        
        /// <remarks/>
        Paid,
        
        /// <remarks/>
        Trash,
        
        /// <remarks/>
        UnPaid,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of sales tax
    /// payment basis.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PaySalesTaxEnum {
        
        /// <remarks/>
        Annually,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Quarterly,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of per item
    /// adjustments.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PerItemAdjustEnum {
        
        /// <remarks/>
        Cost,
        
        /// <remarks/>
        CurrentCustomPrice,
        
        /// <remarks/>
        StandardPrice,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of price level
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PriceLevelTypeEnum {
        
        /// <remarks/>
        FixedPercentage,
        
        /// <remarks/>
        PerItem,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of status for
    /// an estimate in QuickBooks Online.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum QboEstimateStatusEnum {
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Rejected,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of status for
    /// purchase order
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PurchaseOrderStatusEnum {
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        Closed,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of
    /// reimbursable status for purchased items/services.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ReimbursableTypeEnum {
        
        /// <remarks/>
        Billable,
        
        /// <remarks/>
        BillableHasBeenBilled,
        
        /// <remarks/>
        NotBillable,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of rounding
    /// methods.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum RoundingMethodEnum {
        
        /// <remarks/>
        Down,
        
        /// <remarks/>
        Nearest,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Up,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of sales rep
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SalesRepTypeEnum {
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Vendor,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of sales term
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SalesTermTypeEnum {
        
        /// <remarks/>
        DateDriven,
        
        /// <remarks/>
        Standard,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of special
    /// item types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SpecialItemTypeEnum {
        
        /// <remarks/>
        FinanceCharge,
        
        /// <remarks/>
        ReimbursableExpenseGroup,
        
        /// <remarks/>
        ReimbursableExpenseSubtotal,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of symbol
    /// positions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SymbolPositionEnum {
        
        /// <remarks/>
        Leading,
        
        /// <remarks/>
        Trailing,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: TaxTypeApplicability
    /// enumeration
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxTypeApplicablityEnum {
        
        /// <remarks/>
        TaxOnAmount,
        
        /// <remarks/>
        TaxOnAmountPlusTax,
        
        /// <remarks/>
        TaxOnTax,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of template
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TemplateTypeEnum {
        
        /// <remarks/>
        BuildAssembly,
        
        /// <remarks/>
        CreditMemo,
        
        /// <remarks/>
        Estimate,
        
        /// <remarks/>
        Invoice,
        
        /// <remarks/>
        PurchaseOrder,
        
        /// <remarks/>
        SalesOrder,
        
        /// <remarks/>
        SalesReceipt,
        
        /// <remarks/>
        StatementCharge,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of time
    /// activity types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TimeActivityTypeEnum {
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Vendor,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of transaction
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TxnTypeEnum {
        
        /// <remarks/>
        APCreditCard,
        
        /// <remarks/>
        ARRefundCreditCard,
        
        /// <remarks/>
        Bill,
        
        /// <remarks/>
        BillPaymentCheck,
        
        /// <remarks/>
        BuildAssembly,
        
        /// <remarks/>
        CarryOver,
        
        /// <remarks/>
        CashPurchase,
        
        /// <remarks/>
        Charge,
        
        /// <remarks/>
        Check,
        
        /// <remarks/>
        CreditCardPayment,
        
        /// <remarks/>
        CreditMemo,
        
        /// <remarks/>
        Deposit,
        
        /// <remarks/>
        EFPLiabilityCheck,
        
        /// <remarks/>
        EFTBillPayment,
        
        /// <remarks/>
        EFTRefund,
        
        /// <remarks/>
        Estimate,
        
        /// <remarks/>
        InventoryAdjustment,
        
        /// <remarks/>
        InventoryTransfer,
        
        /// <remarks/>
        Invoice,
        
        /// <remarks/>
        ItemReceipt,
        
        /// <remarks/>
        JournalEntry,
        
        /// <remarks/>
        LiabilityAdjustment,
        
        /// <remarks/>
        Paycheck,
        
        /// <remarks/>
        PayrollLiabilityCheck,
        
        /// <remarks/>
        PurchaseOrder,
        
        /// <remarks/>
        PriorPayment,
        
        /// <remarks/>
        ReceivePayment,
        
        /// <remarks/>
        RefundCheck,
        
        /// <remarks/>
        SalesOrder,
        
        /// <remarks/>
        SalesReceipt,
        
        /// <remarks/>
        SalesTaxPaymentCheck,
        
        /// <remarks/>
        Transfer,
        
        /// <remarks/>
        TimeActivity,
        
        /// <remarks/>
        VendorCredit,
        
        /// <remarks/>
        YTDAdjustment,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of measurement
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum UOMBaseTypeEnum {
        
        /// <remarks/>
        Area,
        
        /// <remarks/>
        Count,
        
        /// <remarks/>
        Length,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        Volume,
        
        /// <remarks/>
        Weight,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of payment
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PaymentTypeEnum {
        
        /// <remarks/>
        Cash,
        
        /// <remarks/>
        Check,
        
        /// <remarks/>
        CreditCard,
        
        /// <remarks/>
        Expense,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of bill
    /// payment types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum BillPaymentTypeEnum {
        
        /// <remarks/>
        Check,
        
        /// <remarks/>
        CreditCard,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of print
    /// status values.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PrintStatusEnum {
        
        /// <remarks/>
        NotSet,
        
        /// <remarks/>
        NeedToPrint,
        
        /// <remarks/>
        PrintComplete,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of email
    /// status values.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EmailStatusEnum {
        
        /// <remarks/>
        NotSet,
        
        /// <remarks/>
        NeedToSend,
        
        /// <remarks/>
        EmailSent,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of
    /// eTransaction status values. The statuses (Sent, Viewed, Paid,
    /// Delivery Error, Updated, Sent With ICN Error) are used by QBO
    /// eInvoicing. The rest statuses are to be used for Tradeshift
    /// Integration
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ETransactionStatusEnum {
        
        /// <remarks/>
        Sent,
        
        /// <remarks/>
        Viewed,
        
        /// <remarks/>
        Paid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Delivery Error")]
        DeliveryError,
        
        /// <remarks/>
        Updated,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sent With ICN Error")]
        SentWithICNError,
        
        /// <remarks/>
        Delivered,
        
        /// <remarks/>
        Disputed,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of
    /// eTransaction prefs status.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ETransactionEnabledStatusEnum {
        
        /// <remarks/>
        Enabled,
        
        /// <remarks/>
        NotApplicable,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of tax model
    /// types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum GlobalTaxCalculationEnum {
        
        /// <remarks/>
        TaxInclusive,
        
        /// <remarks/>
        TaxExcluded,
        
        /// <remarks/>
        NotApplicable,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of transaction
    /// source.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TxnSourceEnum {
        
        /// <remarks/>
        QBMobile,
        
        /// <remarks/>
        GoPayment,
        
        /// <remarks/>
        EInvoice,
        
        /// <remarks/>
        Square,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Budget Types
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum BudgetTypeEnum {
        
        /// <remarks/>
        ProfitAndLoss,
        
        /// <remarks/>
        BalanceSheet,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of BudgetEntry Type
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum BudgetEntryTypeEnum {
        
        /// <remarks/>
        Yearly,
        
        /// <remarks/>
        Quarterly,
        
        /// <remarks/>
        Monthly,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of Item Category Type for France
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ItemCategoryTypeEnum {
        
        /// <remarks/>
        Product,
        
        /// <remarks/>
        Service,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of Purchase or Sale Location for France
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TransactionLocationTypeEnum {
        
        /// <remarks/>
        WithinFrance,
        
        /// <remarks/>
        FranceOverseas,
        
        /// <remarks/>
        OutsideFranceWithEU,
        
        /// <remarks/>
        OutsideEU,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of the different types of Journal Codes applicable in
    /// FR
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum JournalCodeTypeEnum {
        
        /// <remarks/>
        Expenses,
        
        /// <remarks/>
        Sales,
        
        /// <remarks/>
        Bank,
        
        /// <remarks/>
        Nouveaux,
        
        /// <remarks/>
        Wages,
        
        /// <remarks/>
        Cash,
        
        /// <remarks/>
        Others,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of the different types of Discounts
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DiscountTypeEnum {
        
        /// <remarks/>
        Rate,
        
        /// <remarks/>
        Amount,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of item service type for India sales
    /// tax
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ServiceTypeEnum {
        
        /// <remarks/>
        ADVT,
        
        /// <remarks/>
        AIRPORTSERVICES,
        
        /// <remarks/>
        AIRTRANSPORT,
        
        /// <remarks/>
        AIRTRVLAGNT,
        
        /// <remarks/>
        ARCHITECT,
        
        /// <remarks/>
        ASSTMGMT,
        
        /// <remarks/>
        ATMMAINTENANCE,
        
        /// <remarks/>
        AUCTIONSERV,
        
        /// <remarks/>
        AUTHSERST,
        
        /// <remarks/>
        BANKANDFIN,
        
        /// <remarks/>
        BEAUTYPARLOR,
        
        /// <remarks/>
        BROADCAST,
        
        /// <remarks/>
        BUSINESSAUX,
        
        /// <remarks/>
        BUSINESSEXHIBITION,
        
        /// <remarks/>
        BUSINESSSUPPORTSERV,
        
        /// <remarks/>
        CA,
        
        /// <remarks/>
        CABLEOPTR,
        
        /// <remarks/>
        CARGOHAND,
        
        /// <remarks/>
        CLEANINGSERV,
        
        /// <remarks/>
        CLEARANDFORW,
        
        /// <remarks/>
        CLUBSANDASSSERVICE,
        
        /// <remarks/>
        COMMCOACHORTRAINING,
        
        /// <remarks/>
        CONSENG,
        
        /// <remarks/>
        CONSTRCOMMERCIALCOMPLEX,
        
        /// <remarks/>
        CONTAINERRAILTRANS,
        
        /// <remarks/>
        CONVSERV,
        
        /// <remarks/>
        COSTACC,
        
        /// <remarks/>
        COURIER,
        
        /// <remarks/>
        CREDITCARD,
        
        /// <remarks/>
        CREDITRATAGNCY,
        
        /// <remarks/>
        CRUISESHIPTOUR,
        
        /// <remarks/>
        CS,
        
        /// <remarks/>
        CUSHOUSEAG,
        
        /// <remarks/>
        DESIGNSERV,
        
        /// <remarks/>
        DEVELOPSUPPLYCONTENT,
        
        /// <remarks/>
        DREDGING,
        
        /// <remarks/>
        DRYCLEANING,
        
        /// <remarks/>
        ERECTIONCOMMORINSTALL,
        
        /// <remarks/>
        EVENTMGMT,
        
        /// <remarks/>
        FASHIONDES,
        
        /// <remarks/>
        FOREXBROKING,
        
        /// <remarks/>
        FORWARDCONTRACT,
        
        /// <remarks/>
        FRANCHISESERV,
        
        /// <remarks/>
        GENERALINSURANCE,
        
        /// <remarks/>
        GOODSTRANSPORT,
        
        /// <remarks/>
        HEALTHCLUBANDFITNESS,
        
        /// <remarks/>
        INFORMATIONSERV,
        
        /// <remarks/>
        INSURAUX,
        
        /// <remarks/>
        INTDEC,
        
        /// <remarks/>
        INTELLECTUALPROPERTY,
        
        /// <remarks/>
        INTERNATIONALAIRTRAVEL,
        
        /// <remarks/>
        INTERNETCAFE,
        
        /// <remarks/>
        INTERNETTELEPHONY,
        
        /// <remarks/>
        LIFEINS,
        
        /// <remarks/>
        MAILLISTCOMPILE,
        
        /// <remarks/>
        MANDAPKEEPER,
        
        /// <remarks/>
        MANPWRRECRUIT,
        
        /// <remarks/>
        MGMTCONSUL,
        
        /// <remarks/>
        MGMTMAINTREPAIR,
        
        /// <remarks/>
        MININGOIL,
        
        /// <remarks/>
        MKTRESAGNCY,
        
        /// <remarks/>
        ONLINEINFORMRETRIEVAL,
        
        /// <remarks/>
        OPINIONPOLL,
        
        /// <remarks/>
        OUTDOORCATERING,
        
        /// <remarks/>
        PACKAGINGSERV,
        
        /// <remarks/>
        PANDALSHAMIANA,
        
        /// <remarks/>
        PHOTOGRAPHY,
        
        /// <remarks/>
        PORT,
        
        /// <remarks/>
        PORTSER,
        
        /// <remarks/>
        PROCESSCLEARHOUSE,
        
        /// <remarks/>
        PUBLICRELATIONMGMT,
        
        /// <remarks/>
        RAILTRAVELAGNT,
        
        /// <remarks/>
        REALESTAGT,
        
        /// <remarks/>
        RECOVERYAGENTS,
        
        /// <remarks/>
        REGISTRARSERV,
        
        /// <remarks/>
        RENTACAB,
        
        /// <remarks/>
        RENTINGIMMOVABLEPROP,
        
        /// <remarks/>
        RESIDENTIALCOMPLEXCONST,
        
        /// <remarks/>
        SALEOFSPACEFORADVT,
        
        /// <remarks/>
        SCANDTECHCONSUL,
        
        /// <remarks/>
        SECAG,
        
        /// <remarks/>
        SERVICESPROVIDEDFORTRANSACTION,
        
        /// <remarks/>
        SHARETRANSFERSERV,
        
        /// <remarks/>
        SHIPMGMT,
        
        /// <remarks/>
        SITEPREP,
        
        /// <remarks/>
        SOUNDRECORD,
        
        /// <remarks/>
        SPONSORSHIP,
        
        /// <remarks/>
        STAG,
        
        /// <remarks/>
        STOCKBROKING,
        
        /// <remarks/>
        STOCKEXCHGSERV,
        
        /// <remarks/>
        STORANDWAREHOUSING,
        
        /// <remarks/>
        SUPPLYTANGIBLEGOODS,
        
        /// <remarks/>
        SURVEYANDMAPMAKING,
        
        /// <remarks/>
        SURVEYMINERALS,
        
        /// <remarks/>
        TECHINSPECTION,
        
        /// <remarks/>
        TECHTESTING,
        
        /// <remarks/>
        TELECOMMUNICATIONSERV,
        
        /// <remarks/>
        TELEVISIONANDRADIO,
        
        /// <remarks/>
        TOUROP,
        
        /// <remarks/>
        TRANSPORTPIPELINE,
        
        /// <remarks/>
        TRAVELAGENT,
        
        /// <remarks/>
        ULIPMANAGEMENT,
        
        /// <remarks/>
        UNDERWRITER,
        
        /// <remarks/>
        VIDEOTAPEPROD,
        
        /// <remarks/>
        WORKSCONTRACT,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of Qbo Entity Type For AppId Migration
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum QboEntityTypeEnum {
        
        /// <remarks/>
        CUSTOMER,
        
        /// <remarks/>
        VENDOR,
        
        /// <remarks/>
        EMPLOYEE,
        
        /// <remarks/>
        CREDIT_CARD,
        
        /// <remarks/>
        CHECK,
        
        /// <remarks/>
        INVOICE,
        
        /// <remarks/>
        RECEIVED_PAYMENT,
        
        /// <remarks/>
        GENERAL_JOURNAL,
        
        /// <remarks/>
        BILL,
        
        /// <remarks/>
        CREDIT_CARD_CREDIT,
        
        /// <remarks/>
        BILL_CREDIT,
        
        /// <remarks/>
        CHARGE_CREDIT,
        
        /// <remarks/>
        BILL_CHECK,
        
        /// <remarks/>
        BILL_CREDIT_CARD,
        
        /// <remarks/>
        CHARGE,
        
        /// <remarks/>
        TRANSFER,
        
        /// <remarks/>
        RECEIVED_MONEY,
        
        /// <remarks/>
        STATEMENT,
        
        /// <remarks/>
        REIMB_CHARGE,
        
        /// <remarks/>
        CASH_PURCHASE,
        
        /// <remarks/>
        CASH_SALE,
        
        /// <remarks/>
        CREDIT_MEMO,
        
        /// <remarks/>
        CREDIT_REFUND,
        
        /// <remarks/>
        ESTIMATE,
        
        /// <remarks/>
        INVENTORY_QUANTITY_ADJUSTMENT,
        
        /// <remarks/>
        PURCHASE_ORDER,
        
        /// <remarks/>
        PAYROLL_CHECK,
        
        /// <remarks/>
        TAX_PAYMENT,
        
        /// <remarks/>
        PAYROLL_ADJUSTMENT_V2,
        
        /// <remarks/>
        PAYROLL_REFUND,
        
        /// <remarks/>
        GLOBAL_TAX_PAYMENT,
        
        /// <remarks/>
        GLOBAL_TAX_ADJUSTMENT,
        
        /// <remarks/>
        JOB_INVOICE,
        
        /// <remarks/>
        ITEM,
        
        /// <remarks/>
        GENERIC_EXPENSE,
        
        /// <remarks/>
        TIME_ACTIVITY,
        
        /// <remarks/>
        DEPARTMENT,
        
        /// <remarks/>
        USERS,
        
        /// <remarks/>
        KLASS,
        
        /// <remarks/>
        PAYMENT_METHOD,
        
        /// <remarks/>
        MEMORIZED_TRANSACTION,
        
        /// <remarks/>
        TERM,
        
        /// <remarks/>
        BUDGET,
        
        /// <remarks/>
        TAX_CODE,
        
        /// <remarks/>
        TAX_CODE_RATE,
        
        /// <remarks/>
        TAX_AGENCY,
        
        /// <remarks/>
        ATTACHABLE,
        
        /// <remarks/>
        ACCOUNT,
        
        /// <remarks/>
        PREFERENCES,
        
        /// <remarks/>
        JOURNAL_CODE,
        
        /// <remarks/>
        DISCOUNT_RATE,
        
        /// <remarks/>
        BANKING_TRANSACTIONS,
        
        /// <remarks/>
        BUSINESS_TERMS,
        
        /// <remarks/>
        LIABILITY_CHECK,
        
        /// <remarks/>
        LIABILITY_CREDIT_CARD,
        
        /// <remarks/>
        LIABILITY_REFUND,
        
        /// <remarks/>
        PRIOR_LIABILITY_PAYMENTS,
        
        /// <remarks/>
        LIABILITY_EPAY,
        
        /// <remarks/>
        LIABILITY_MMAP,
        
        /// <remarks/>
        TAX_CREDIT_UTILISE,
        
        /// <remarks/>
        TAX_CREDIT_DEFER,
        
        /// <remarks/>
        TAX_CREDIT_REVERSE,
        
        /// <remarks/>
        TAX_CREDIT_REFUND,
        
        /// <remarks/>
        GROSS_ADJUSTMENT,
        
        /// <remarks/>
        REVERSE_CHARGE,
        
        /// <remarks/>
        DD_CHECK,
        
        /// <remarks/>
        PAYCHECK,
        
        /// <remarks/>
        PAYROLL_ADJUSTMENT,
        
        /// <remarks/>
        PAYROLL_YTD,
        
        /// <remarks/>
        SDK_USERS,
        
        /// <remarks/>
        PAYROLL_ITEMS,
        
        /// <remarks/>
        PAY_GROUPS,
        
        /// <remarks/>
        PAID_TIME_OFF_ENTRIES,
        
        /// <remarks/>
        TAX_JURISDICTIONS,
        
        /// <remarks/>
        MEMORIZED_REPORTS,
        
        /// <remarks/>
        OLB_FINANCIAL_INSTITUTIONS,
        
        /// <remarks/>
        DIRECT_DEPOSIT_BANK_INFO,
        
        /// <remarks/>
        REMINDERS,
        
        /// <remarks/>
        PAYROLL_FORMS,
        
        /// <remarks/>
        EPAY_BANK_ACCOUNT_INFO,
        
        /// <remarks/>
        EPAY_AGENCY_CREDENTIALS,
        
        /// <remarks/>
        EFILE_ENROLLMENT,
        
        /// <remarks/>
        TAXRETURNLINES,
        
        /// <remarks/>
        NOTES,
        
        /// <remarks/>
        PRINT_PREF,
        
        /// <remarks/>
        MANAGEMENT_REPORT,
        
        /// <remarks/>
        OLB_RULES,
        
        /// <remarks/>
        DESKTOPIMPORT_SEED_QOH,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of Desktop Entity Type For
    /// ThirdPartyAppId Migration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DesktopEntityTypeEnum {
        
        /// <remarks/>
        ANY,
        
        /// <remarks/>
        CREDIT_CARD,
        
        /// <remarks/>
        DEPOSIT,
        
        /// <remarks/>
        CHECK,
        
        /// <remarks/>
        INVOICE,
        
        /// <remarks/>
        CASHSALE,
        
        /// <remarks/>
        CREDIT_MEMO,
        
        /// <remarks/>
        APP_PAY,
        
        /// <remarks/>
        GENERAL_JOURNAL,
        
        /// <remarks/>
        BILL,
        
        /// <remarks/>
        GENERIC,
        
        /// <remarks/>
        CREDIT_CARD_REFUND,
        
        /// <remarks/>
        BILL_REFUND,
        
        /// <remarks/>
        AR_CREDIT_CARD_REFUND,
        
        /// <remarks/>
        BILL_CHECK,
        
        /// <remarks/>
        BILL_CREDIT_CARD,
        
        /// <remarks/>
        SALES_TAX_PAYMENT,
        
        /// <remarks/>
        PURCHASE_ORDER,
        
        /// <remarks/>
        INVENTORY_ADJUSTMENT,
        
        /// <remarks/>
        INVENTORY_RECEIPT,
        
        /// <remarks/>
        PAYCHECK,
        
        /// <remarks/>
        LIABILITY_CHECK,
        
        /// <remarks/>
        BEGIN_BALANCE_CHECK,
        
        /// <remarks/>
        LIABILITY_ADJUSTMENT,
        
        /// <remarks/>
        ESTIMATE,
        
        /// <remarks/>
        STATEMENT_CHARGE,
        
        /// <remarks/>
        TRANSFER,
        
        /// <remarks/>
        SALESORDER,
        
        /// <remarks/>
        QBRSLIABCHECK,
        
        /// <remarks/>
        BUILDASSEMBLY,
        
        /// <remarks/>
        EFPLIABCHECK,
        
        /// <remarks/>
        PRIOR_PMT,
        
        /// <remarks/>
        LIAB_REFUND_CHECK,
        
        /// <remarks/>
        ITEM_SERVICE,
        
        /// <remarks/>
        ITEM_INVENTORY,
        
        /// <remarks/>
        ITEM_ASSEMBLY,
        
        /// <remarks/>
        ITEM_PART,
        
        /// <remarks/>
        ITEM_FIXEDASSET,
        
        /// <remarks/>
        ITEM_CHARGES,
        
        /// <remarks/>
        ITEM_SUBTOTAL,
        
        /// <remarks/>
        ITEM_GROUP,
        
        /// <remarks/>
        ITEM_DISCOUNT,
        
        /// <remarks/>
        ITEM_PAYMENT,
        
        /// <remarks/>
        ITEM_TAXCOMP,
        
        /// <remarks/>
        ITEM_TAXGROUP,
        
        /// <remarks/>
        ITEM_GROUPEND,
        
        /// <remarks/>
        ITEM_PURCHASE,
        
        /// <remarks/>
        ITEM_PO,
        
        /// <remarks/>
        ITEM_INVOICE,
        
        /// <remarks/>
        ITEM_ALLITEMS,
        
        /// <remarks/>
        ITEM_NOTAXES,
        
        /// <remarks/>
        ITEM_SERVICES_AND_CHARGES,
        
        /// <remarks/>
        ITEM_REAL_GROUP_END,
        
        /// <remarks/>
        ITEM_MAX,
        
        /// <remarks/>
        CUSTOMER,
        
        /// <remarks/>
        VENDOR,
        
        /// <remarks/>
        EMPLOYEE,
        
        /// <remarks/>
        OTHERNAME,
        
        /// <remarks/>
        NULLLINKTYPE,
        
        /// <remarks/>
        UNUSED1,
        
        /// <remarks/>
        REFUNDCHECKTOCRMEMO,
        
        /// <remarks/>
        INVOICETOCRMEMO,
        
        /// <remarks/>
        INVOICETOPAYMENT,
        
        /// <remarks/>
        INVOICETODISCOUNT,
        
        /// <remarks/>
        BILLTOCHECK,
        
        /// <remarks/>
        BILLTOCCARD,
        
        /// <remarks/>
        BILLTOCREDIT,
        
        /// <remarks/>
        DEPOSITTOPAYMENT,
        
        /// <remarks/>
        REFUNDCHECKTOPAYMENT,
        
        /// <remarks/>
        INVOICETOPMTLINE,
        
        /// <remarks/>
        INVOICETOCREDITLINE,
        
        /// <remarks/>
        BILLTOCREDITLINE,
        
        /// <remarks/>
        CREDLINETODISCLINE,
        
        /// <remarks/>
        PURCHASEORDERTORECEIPT,
        
        /// <remarks/>
        BILLTODISCOUNT,
        
        /// <remarks/>
        INVOICETODISCOUNTLINE,
        
        /// <remarks/>
        INVOICETOESTIMATEQTY,
        
        /// <remarks/>
        INVOICETOESTIMATEAMT,
        
        /// <remarks/>
        INVOICETOSALESORDERQTY,
        
        /// <remarks/>
        INVOICETOSALESORDERAMT,
        
        /// <remarks/>
        JOURNALENTRYTOCRMEMO,
        
        /// <remarks/>
        AR_CCREFUND_TO_CREDITMEMO,
        
        /// <remarks/>
        AR_CCREFUND_TO_PAYMENT,
        
        /// <remarks/>
        AR_CCREFUND_TO_JOURNAL,
        
        /// <remarks/>
        GIRO_TO_CHECK,
        
        /// <remarks/>
        ITEM,
        
        /// <remarks/>
        DEPARTMENT,
        
        /// <remarks/>
        USERS,
        
        /// <remarks/>
        KLASS,
        
        /// <remarks/>
        PAYMENT_METHOD,
        
        /// <remarks/>
        TERM,
        
        /// <remarks/>
        BUDGET,
        
        /// <remarks/>
        TAX_CODE,
        
        /// <remarks/>
        TAX_CODE_RATE,
        
        /// <remarks/>
        TAX_AGENCY,
        
        /// <remarks/>
        ATTACHABLE,
        
        /// <remarks/>
        ACCOUNT,
        
        /// <remarks/>
        PREFERENCES,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of the filing status that a TaxReturn can have
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxReturnStatusEnum {
        
        /// <remarks/>
        FILED,
        
        /// <remarks/>
        FILING_FAILED,
        
        /// <remarks/>
        FILING_FAILED_WRONG_AGENCY_CREDENTIALS,
        
        /// <remarks/>
        AGENCY_PAYMENT_INITIATED,
        
        /// <remarks/>
        AGENCY_PAYMENT_COMPLETED,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of payment methods that can be used to pay tax agency
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AgencyPaymentMethodEnum {
        
        /// <remarks/>
        ACH_CREDIT,
        
        /// <remarks/>
        ACH_DEBIT,
        
        /// <remarks/>
        CHECK,
        
        /// <remarks/>
        WIRE,
        
        /// <remarks/>
        OTHER,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of Reasons to review AST Taxes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxReviewStatusEnum {
        
        /// <remarks/>
        NON_AST_TAX,
        
        /// <remarks/>
        AST_TAX_OVERRIDE,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumeration of Convenience fee types applicable to Invoice
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ConvenienceFeeTypeEnum {
        
        /// <remarks/>
        MANUAL,
        
        /// <remarks/>
        AUTO,
        
        /// <remarks/>
        PAID,
        
        /// <remarks/>
        DISABLED,
    }
    
    /// <remarks/>
    /// <summary>
    /// That minimal subset of transaction information
    /// which is included on another transaction, so that a client viewing
    /// the second transaction entity need not make an additional request to
    /// the service in order to render it in human readable form. (e.g a
    /// payment needs to refer to an invoice by number)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class LinkedTxn {
        
        private string txnIdField;
        
        private string txnTypeField;
        
        private string txnLineIdField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Transaction the current
        /// entity is related to (linked to), for example, Sales Order.[br
        /// /]UNSUPPORTED FIELD.
        /// Product: QBO
        /// Description: A list of Estimate
        /// Ids that are to be associated with the invoice.[br /]Note: Only
        /// Pending and Accepted Estimates can be specified. Closed and
        /// Rejected estimates will be ignored.
        /// 
        /// </summary>
        public string TxnId {
            get {
                return txnIdField;
            }
            set {
                txnIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Transaction number.
        /// 
        /// </summary>
        public string TxnType {
            get {
                return txnTypeField;
            }
            set {
                txnTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: A link to a specific
        /// line of the LinkedTxn. If supplied the LinkedTxn field must also
        /// be populated.
        /// 
        /// </summary>
        public string TxnLineId {
            get {
                return txnLineIdField;
            }
            set {
                txnLineIdField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Details of approval status for the specific transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TxnApprovalInfo {
        
        private string approvalStatusField;
        
        private string approvalStatusDetailField;
        
        private string lastChangedByUserField;
        
        private System.DateTime lastChangedDateField;
        
        private bool lastChangedDateFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Overall Approval Status, collective of all user approvals.
        /// InputType: QBO: ReadOnly
        /// 
        /// </summary>
        public string ApprovalStatus {
            get {
                return approvalStatusField;
            }
            set {
                approvalStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description:ApprovalStatusDetail represents the detailed approval statuses of a transaction. For a given ApprovalStatus, ApprovalStatusDetail can have one of the many values described below.
        /// Following are the approval status and their possible detailed approval statuses:
        /// Approval Status - APPROVED
        /// Approval Status Detail - APPROVED,AUTO_APPROVED,FORCE_APPROVED,WORKFLOW_AUTO_APPROVED
        /// 
        /// Approval Status - REJECTED
        /// Approval Status Detail - REJECTED,WORKFLOW_AUTO_REJECTED
        /// 
        /// Approval Status - REQUIRES_APPROVAL
        /// Approval Status Detail - REQUIRES_APPROVAL,CANNOT_DETERMINE
        /// 
        /// Approval Status - PENDING_APPROVAL
        /// Approval Status Detail - PENDING_APPROVAL
        /// 
        /// Approval Status - IN_PROGRESS
        /// Approval Status Detail - IN_PROGRESS
        /// InputType: QBO: ReadOnly
        /// 
        /// </summary>
        public string ApprovalStatusDetail {
            get {
                return approvalStatusDetailField;
            }
            set {
                approvalStatusDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: User-id of the user last updating the approval status.
        /// InputType: QBO: ReadOnly
        /// 
        /// </summary>
        public string LastChangedByUser {
            get {
                return lastChangedByUserField;
            }
            set {
                lastChangedByUserField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Date when the approval status was last updated.
        /// InputType: QBO: ReadOnly
        /// 
        /// </summary>
        public System.DateTime LastChangedDate {
            get {
                return lastChangedDateField;
            }
            set {
                lastChangedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastChangedDateSpecified {
            get {
                return lastChangedDateFieldSpecified;
            }
            set {
                lastChangedDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Provides the mapping between ListId and TxnId in
    /// Desktop to the same Entity Id in QBO. These mappings are available
    /// for only companies that have migrated from Desktop to QBO
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class QbdtEntityIdMapping : IntuitEntity, IEntity {
        
        private string qboEntityIdField;
        
        private string qbdtExportableIdField;
        
        private string qboEntityTypeField;
        
        private string qbdtEntityTypeField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Id of the QBO Entity. This id is accepted by V3 APIs. They
        /// uniquely identify the entity in QBO for that company.
        /// 
        /// </summary>
        public string QboEntityId {
            get {
                return qboEntityIdField;
            }
            set {
                qboEntityIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The ListId or TxnId of the QB Desktop Entity. They uniquely
        /// identify the entity in QB Desktop for that company.
        /// 
        /// </summary>
        public string QbdtExportableId {
            get {
                return qbdtExportableIdField;
            }
            set {
                qbdtExportableIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The entity type name of the entity in QBO. Refer
        /// QboEntityTypeEnum for all the values.
        /// 
        /// </summary>
        public string QboEntityType {
            get {
                return qboEntityTypeField;
            }
            set {
                qboEntityTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The entity type name of the entity in QBO. Refer
        /// QbdtEntityTypeEnum for all the values.
        /// 
        /// </summary>
        public string QbdtEntityType {
            get {
                return qbdtEntityTypeField;
            }
            set {
                qbdtEntityTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Base type of any top level Intuit Entity of small business type.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SyncActivity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Status))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RecurringTransaction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VendorType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JobType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomerType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(User))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NameBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OtherName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Employee))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Vendor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxAgency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Customer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxPayment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxClassification))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxReturn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TDSMetadata))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Budget))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Attachable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemplateName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UOM))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NumberTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Preferences))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserAlert))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Task))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShipMethod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InventorySite))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeActivity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomerMsg))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PriceLevelPerItem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PriceLevel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesRep))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ExchangeRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompanyCurrency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Currency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Term))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Item))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Department))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PaymentMethod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JournalCode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Class))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Account))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MasterAccount))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxCode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FixedAsset))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailDeliveryInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConvenienceFeeDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tag))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transaction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChargeCredit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReimburseCharge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JournalEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditCardPaymentTxn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Deposit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BillPayment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Payment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StatementCharge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseByVendor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VendorCredit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bill))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Purchase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesTransaction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RefundReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditMemo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Estimate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Invoice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompanyInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Company))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QbdtEntityIdMapping))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public abstract partial class IntuitEntity {
        
        private string idField;
        
        private string syncTokenField;
        
        private ModificationMetaData metaDataField;
        
        private CustomField[] customFieldField;
        
        private AttachableRef[] attachableRefField;
        
        private string domainField;
        
        private EntityStatusEnum statusField;
        
        private bool statusFieldSpecified;
        
        private bool sparseField;
        
        private bool sparseFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique Identifier for an Intuit entity (object). [br /]Required for the update operation.
        /// Required: ALL
        /// Filterable: ALL
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Version number of the entity.  The SyncToken is used to lock the entity for use by one application at a time. As soon as an application modifies an entity, its SyncToken is incremented; another application's request to modify the entity with the same SyncToken will fail. Only the latest version of the entity is maintained by Data Services.  An attempt to modify an entity specifying an older SyncToken will fail. [br /]Required for the update operation.
        /// Required: ALL
        /// 
        /// </summary>
        public string SyncToken {
            get {
                return syncTokenField;
            }
            set {
                syncTokenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive information about the entity.  The MetaData values are set by Data Services and are read only for all applications.
        /// 
        /// </summary>
        public ModificationMetaData MetaData {
            get {
                return metaDataField;
            }
            set {
                metaDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Custom field (or data extension).
        /// Filterable: QBW
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CustomField")]
        public CustomField[] CustomField {
            get {
                return customFieldField;
            }
            set {
                customFieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies entity name of the attachment from where the attachment was requested
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AttachableRef")]
        public AttachableRef[] AttachableRef {
            get {
                return attachableRefField;
            }
            set {
                attachableRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Domain in which the entity belongs.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string domain {
            get {
                return domainField;
            }
            set {
                domainField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: System status of the entity. Output only field.[br /]
        /// Filterable: ALL
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EntityStatusEnum status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool statusSpecified {
            get {
                return statusFieldSpecified;
            }
            set {
                statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the entity representation has a partial set of elements. Output only field.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool sparse {
            get {
                return sparseField;
            }
            set {
                sparseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool sparseSpecified {
            get {
                return sparseFieldSpecified;
            }
            set {
                sparseFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Metadata for the instance of the entity. All properties are read only.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ModificationMetaData {
        
        private ReferenceType createdByRefField;
        
        private System.DateTime createTimeField;
        
        private bool createTimeFieldSpecified;
        
        private ReferenceType lastModifiedByRefField;
        
        private System.DateTime lastUpdatedTimeField;
        
        private bool lastUpdatedTimeFieldSpecified;
        
        private System.DateTime lastChangedInQBField;
        
        private bool lastChangedInQBFieldSpecified;
        
        private bool synchronizedField;
        
        private bool synchronizedFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the user who created the data. Read only property.
        /// 
        /// </summary>
        public ReferenceType CreatedByRef {
            get {
                return createdByRefField;
            }
            set {
                createdByRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Time the entity was created in the source domain (QBD or QBO). Read only property.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public System.DateTime CreateTime {
            get {
                return createTimeField;
            }
            set {
                createTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreateTimeSpecified {
            get {
                return createTimeFieldSpecified;
            }
            set {
                createTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the user who last modified the entity. Read only property.
        /// 
        /// </summary>
        public ReferenceType LastModifiedByRef {
            get {
                return lastModifiedByRefField;
            }
            set {
                lastModifiedByRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Time the entity was last updated in the source domain (QBD or QBO). Read only property.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public System.DateTime LastUpdatedTime {
            get {
                return lastUpdatedTimeField;
            }
            set {
                lastUpdatedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastUpdatedTimeSpecified {
            get {
                return lastUpdatedTimeFieldSpecified;
            }
            set {
                lastUpdatedTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Time the entity was last updated in QB. Read only property.
        /// 
        /// </summary>
        public System.DateTime LastChangedInQB {
            get {
                return lastChangedInQBField;
            }
            set {
                lastChangedInQBField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastChangedInQBSpecified {
            get {
                return lastChangedInQBFieldSpecified;
            }
            set {
                lastChangedInQBFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: If true, the data on the cloud has been synchronized with QuickBooks for Windows. If false, the data has been created or updated on the cloud but has not been synchronized with QuickBooks for Windows. Read-only field.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Synchronized {
            get {
                return synchronizedField;
            }
            set {
                synchronizedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SynchronizedSpecified {
            get {
                return synchronizedFieldSpecified;
            }
            set {
                synchronizedFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Custom field that can be added to an entity. This type is not extended from IntuitEntity as CustomField can not be manipulated as independent entity and will always be considered in association with another top level Intuit entity.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CustomField {
        
        private string definitionIdField;
        
        private string nameField;
        
        private CustomFieldTypeEnum typeField;
        
        private object itemField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier of the CustomFieldDefinition that corresponds to this CustomField.  DefinitionId is required for every CustomField.
        /// 
        /// </summary>
        public string DefinitionId {
            get {
                return definitionIdField;
            }
            set {
                definitionIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the custom field.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Data type of custom field.[br /]
        /// 
        /// </summary>
        public CustomFieldTypeEnum Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BooleanValue", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("DateValue", typeof(System.DateTime), DataType="dateTime")]
        [System.Xml.Serialization.XmlElementAttribute("NumberValue", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("StringValue", typeof(string))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Possible supported CustomFieldTypes.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CustomFieldTypeEnum {
        
        /// <remarks/>
        StringType,
        
        /// <remarks/>
        BooleanType,
        
        /// <remarks/>
        NumberType,
        
        /// <remarks/>
        DateType,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Describes the details of the attachable and provides information such as where they are referenced and custom fields.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class AttachableRef {
        
        private ReferenceType entityRefField;
        
        private string lineInfoField;
        
        private bool includeOnSendField;
        
        private bool includeOnSendFieldSpecified;
        
        private CustomField[] customFieldField;
        
        private IntuitAnyType attachableRefExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the entity.
        /// 
        /// </summary>
        public ReferenceType EntityRef {
            get {
                return entityRefField;
            }
            set {
                entityRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description:
        /// 
        /// </summary>
        public string LineInfo {
            get {
                return lineInfoField;
            }
            set {
                lineInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description:
        /// 
        /// </summary>
        public bool IncludeOnSend {
            get {
                return includeOnSendField;
            }
            set {
                includeOnSendField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IncludeOnSendSpecified {
            get {
                return includeOnSendFieldSpecified;
            }
            set {
                includeOnSendFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Custom field (or data extension).
        /// Filterable: ALL
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CustomField")]
        public CustomField[] CustomField {
            get {
                return customFieldField;
            }
            set {
                customFieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies extension entity to allow extension
        /// 
        /// </summary>
        public IntuitAnyType AttachableRefEx {
            get {
                return attachableRefExField;
            }
            set {
                attachableRefExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Definition of IntuitAnyType to add and extend new elements to the existing entities.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class IntuitAnyType {
        
        private System.Xml.XmlElement[] anyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any {
            get {
                return anyField;
            }
            set {
                anyField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Possible Status of an Entity.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EntityStatusEnum {
        
        /// <remarks/>
        Deleted,
        
        /// <remarks/>
        Voided,
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        InTransit,
        
        /// <remarks/>
        Synchronized,
        
        /// <remarks/>
        SyncError,
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes Company information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Company : IntuitEntity, IEntity {
        
        private string companyNameField;
        
        private string legalNameField;
        
        private PhysicalAddress companyAddrField;
        
        private PhysicalAddress customerCommunicationAddrField;
        
        private PhysicalAddress legalAddrField;
        
        private EmailAddress companyEmailAddrField;
        
        private EmailAddress customerCommunicationEmailAddrField;
        
        private WebSiteAddress companyURLField;
        
        private TelephoneNumber primaryPhoneField;
        
        private ContactInfo[] otherContactInfoField;
        
        private string companyFileNameField;
        
        private string flavorStratumField;
        
        private bool sampleFileField;
        
        private bool sampleFileFieldSpecified;
        
        private string companyUserIdField;
        
        private string companyUserAdminEmailField;
        
        private System.DateTime companyStartDateField;
        
        private bool companyStartDateFieldSpecified;
        
        private string employerIdField;
        
        private MonthEnum fiscalYearStartMonthField;
        
        private bool fiscalYearStartMonthFieldSpecified;
        
        private MonthEnum taxYearStartMonthField;
        
        private bool taxYearStartMonthFieldSpecified;
        
        private string qBVersionField;
        
        private string countryField;
        
        private PhysicalAddress shipAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private TelephoneNumber mobileField;
        
        private TelephoneNumber faxField;
        
        private EmailAddress emailField;
        
        private WebSiteAddress webSiteField;
        
        private System.DateTime lastImportedTimeField;
        
        private bool lastImportedTimeFieldSpecified;
        
        private string supportedLanguagesField;
        
        private string defaultTimeZoneField;
        
        private bool multiByteCharsSupportedField;
        
        private bool multiByteCharsSupportedFieldSpecified;
        
        private NameValue[] nameValueField;
        
        private IntuitAnyType companyInfoExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the company.[br /]Max. length: 1024 characters.
        /// 
        /// </summary>
        public string CompanyName {
            get {
                return companyNameField;
            }
            set {
                companyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// LegalName if different from the CompanyName
        /// 
        /// </summary>
        public string LegalName {
            get {
                return legalNameField;
            }
            set {
                legalNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Company Address as described in preference
        /// 
        /// </summary>
        public PhysicalAddress CompanyAddr {
            get {
                return companyAddrField;
            }
            set {
                companyAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address of the company as given to th customer,
        /// sometimes the address given to the customer mail address is
        /// different from Company address
        /// </summary>
        public PhysicalAddress CustomerCommunicationAddr {
            get {
                return customerCommunicationAddrField;
            }
            set {
                customerCommunicationAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Legal Address given to the government for any
        /// government communication
        /// </summary>
        public PhysicalAddress LegalAddr {
            get {
                return legalAddrField;
            }
            set {
                legalAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// CompanyEmail Address
        /// </summary>
        public EmailAddress CompanyEmailAddr {
            get {
                return companyEmailAddrField;
            }
            set {
                companyEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Email Address published to customer for
        /// communication if different from CompanyEmailAddress
        /// 
        /// </summary>
        public EmailAddress CustomerCommunicationEmailAddr {
            get {
                return customerCommunicationEmailAddrField;
            }
            set {
                customerCommunicationEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Company URL
        /// </summary>
        public WebSiteAddress CompanyURL {
            get {
                return companyURLField;
            }
            set {
                companyURLField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Primary Phone number
        /// </summary>
        public TelephoneNumber PrimaryPhone {
            get {
                return primaryPhoneField;
            }
            set {
                primaryPhoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: List of ContactInfo
        /// entities of any contact info type. The ContactInfo Type values
        /// are defined in the ContactTypeEnum.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherContactInfo")]
        public ContactInfo[] OtherContactInfo {
            get {
                return otherContactInfoField;
            }
            set {
                otherContactInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: QuickBooks company
        /// file name.[br /]Data Services max. length: 512 characters.
        /// 
        /// </summary>
        public string CompanyFileName {
            get {
                return companyFileNameField;
            }
            set {
                companyFileNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: QB software flavor
        /// being used on the file on the PC.[br /]Data Services max.
        /// length: 512 characters.
        /// 
        /// </summary>
        public string FlavorStratum {
            get {
                return flavorStratumField;
            }
            set {
                flavorStratumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: if the QB desktop file is a sample file.
        /// 
        /// </summary>
        public bool SampleFile {
            get {
                return sampleFileField;
            }
            set {
                sampleFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SampleFileSpecified {
            get {
                return sampleFileFieldSpecified;
            }
            set {
                sampleFileFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: IAM or QBN admin users
        /// id sequence number to group many external realms for this user
        /// under his id number.[br /]Data Services max. length: 512
        /// characters.
        /// 
        /// </summary>
        public string CompanyUserId {
            get {
                return companyUserIdField;
            }
            set {
                companyUserIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: IAM or QBN admin users
        /// email.[br /]Data Services max. length: 100 characters.
        /// 
        /// </summary>
        public string CompanyUserAdminEmail {
            get {
                return companyUserAdminEmailField;
            }
            set {
                companyUserAdminEmailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: DateTime when the company file was created.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime CompanyStartDate {
            get {
                return companyStartDateField;
            }
            set {
                companyStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CompanyStartDateSpecified {
            get {
                return companyStartDateFieldSpecified;
            }
            set {
                companyStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Employer identifier (EID).
        /// 
        /// </summary>
        public string EmployerId {
            get {
                return employerIdField;
            }
            set {
                employerIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Starting month of the company's fiscal year.
        /// 
        /// </summary>
        public MonthEnum FiscalYearStartMonth {
            get {
                return fiscalYearStartMonthField;
            }
            set {
                fiscalYearStartMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FiscalYearStartMonthSpecified {
            get {
                return fiscalYearStartMonthFieldSpecified;
            }
            set {
                fiscalYearStartMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Starting month of the company's fiscal year.
        /// 
        /// </summary>
        public MonthEnum TaxYearStartMonth {
            get {
                return taxYearStartMonthField;
            }
            set {
                taxYearStartMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxYearStartMonthSpecified {
            get {
                return taxYearStartMonthFieldSpecified;
            }
            set {
                taxYearStartMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QuickBooks company file latest version. The format reports the
        /// major release in the first number, the minor release in the
        /// second number (always a zero), the release update (slipstream or
        /// "R") in the third number, and the build number in the final
        /// number.[br /]Max. length: 512 characters.
        /// 
        /// </summary>
        public string QBVersion {
            get {
                return qBVersionField;
            }
            set {
                qBVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Country name to which the company belongs for fiancial
        /// calculations.
        /// 
        /// </summary>
        public string Country {
            get {
                return countryField;
            }
            set {
                countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default shipping address.
        /// 
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Other company addresses.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default mobile phone number of the company.
        /// 
        /// </summary>
        public TelephoneNumber Mobile {
            get {
                return mobileField;
            }
            set {
                mobileField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default fax number.
        /// 
        /// </summary>
        public TelephoneNumber Fax {
            get {
                return faxField;
            }
            set {
                faxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default email address.
        /// 
        /// </summary>
        public EmailAddress Email {
            get {
                return emailField;
            }
            set {
                emailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default company web site address.
        /// 
        /// </summary>
        public WebSiteAddress WebSite {
            get {
                return webSiteField;
            }
            set {
                webSiteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies last imported time.
        /// 
        /// </summary>
        public System.DateTime LastImportedTime {
            get {
                return lastImportedTimeField;
            }
            set {
                lastImportedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastImportedTimeSpecified {
            get {
                return lastImportedTimeFieldSpecified;
            }
            set {
                lastImportedTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Comma separated list of languages
        /// 
        /// </summary>
        public string SupportedLanguages {
            get {
                return supportedLanguagesField;
            }
            set {
                supportedLanguagesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Default time zone for the company
        /// 
        /// </summary>
        public string DefaultTimeZone {
            get {
                return defaultTimeZoneField;
            }
            set {
                defaultTimeZoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies if the company support multibyte or
        /// not
        /// </summary>
        public bool MultiByteCharsSupported {
            get {
                return multiByteCharsSupportedField;
            }
            set {
                multiByteCharsSupportedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MultiByteCharsSupportedSpecified {
            get {
                return multiByteCharsSupportedFieldSpecified;
            }
            set {
                multiByteCharsSupportedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Any other preference not covered in base is
        /// covered as name value pair, for detailed explanation look at the
        /// document
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only: extension place holder for Company.
        /// 
        /// </summary>
        public IntuitAnyType CompanyInfoEx {
            get {
                return companyInfoExField;
            }
            set {
                companyInfoExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Physical (or postal) address type, this entity is always manipulated in context of another parent entity like Person, Organization etc.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PhysicalAddress {
        
        private string idField;
        
        private string line1Field;
        
        private string line2Field;
        
        private string line3Field;
        
        private string line4Field;
        
        private string line5Field;
        
        private string cityField;
        
        private string countryField;
        
        private string countryCodeField;
        
        private string countyField;
        
        private string countrySubDivisionCodeField;
        
        private string postalCodeField;
        
        private string postalCodeSuffixField;
        
        private string latField;
        
        private string longField;
        
        private string tagField;
        
        private string noteField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier of the Intuit entity for the address, mainly used for modifying the address.[br /]Note: There is no SyncToken for this entity because it is always associated with the IntuitEntity type that is the top level or parent entity.
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: First line of the address.[br /]Max. length: 41 characters.
        /// Product: QBO
        /// Description: First line of the address.[br /]Max. length: 500 characters.
        /// 
        /// </summary>
        public string Line1 {
            get {
                return line1Field;
            }
            set {
                line1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Second line of the address.[br /]Max. length: 41 characters.
        /// Product: QBO
        /// Description: Second line of the address.[br /]Max. length: 500 characters.
        /// 
        /// </summary>
        public string Line2 {
            get {
                return line2Field;
            }
            set {
                line2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Third line of the address.[br /]Max. length: 41 characters.
        /// Product: QBO
        /// Description: Third line of the address.[br /]Max. length: 500 characters.
        /// 
        /// </summary>
        public string Line3 {
            get {
                return line3Field;
            }
            set {
                line3Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Fourth line of the address.[br /]Max. length: 41 characters.
        /// Product: QBO
        /// Description: Fourth line of the address.[br /]Max. length: 500 characters.
        /// 
        /// </summary>
        public string Line4 {
            get {
                return line4Field;
            }
            set {
                line4Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Fifth line of the address.[br /]Max. length: 41 characters.
        /// Product: QBO
        /// Description: Fifth line of the address.[br /]Max. length: 500 characters.
        /// 
        /// </summary>
        public string Line5 {
            get {
                return line5Field;
            }
            set {
                line5Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: City name.[br /]Max. length: 31 characters.
        /// Product: QBO
        /// Description: City name.[br /]Max. length: 255 characters.
        /// 
        /// </summary>
        public string City {
            get {
                return cityField;
            }
            set {
                cityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Country name.[br /]Max. length: 31 characters.
        /// Product: QBO
        /// Description: Country name.[br /]Max. length: 255 characters.
        /// 
        /// </summary>
        public string Country {
            get {
                return countryField;
            }
            set {
                countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Country code per ISO 3166.[br /]Unsupported field.
        /// 
        /// </summary>
        public string CountryCode {
            get {
                return countryCodeField;
            }
            set {
                countryCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: County name.[br /]Max. length: 25 characters.
        /// 
        /// </summary>
        public string County {
            get {
                return countyField;
            }
            set {
                countyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Region within a country.  For example, state name for USA, province name for Canada.[br /]Max. length: 21 characters.
        /// Product: QBO
        /// Description: Globalized representation of a region. For example, state name for USA, province name for Canada.[br /]Max. length: 255 characters.
        /// 
        /// </summary>
        public string CountrySubDivisionCode {
            get {
                return countrySubDivisionCodeField;
            }
            set {
                countrySubDivisionCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Postal code. For example, zip code for USA and Canada.[br /]Max. length: 13 characters.
        /// Product: QBO
        /// Description: Postal code. For example, zip code for USA and Canada.[br /]Max. length: 30 characters.
        /// 
        /// </summary>
        public string PostalCode {
            get {
                return postalCodeField;
            }
            set {
                postalCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Postal Code extension. For example, in the USA this is a 4 digit extension of the zip code.
        /// 
        /// </summary>
        public string PostalCodeSuffix {
            get {
                return postalCodeSuffixField;
            }
            set {
                postalCodeSuffixField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Latitude coordinate of Geocode (Geospatial Entity Object Code).[br /]Unsupported field.
        /// 
        /// </summary>
        public string Lat {
            get {
                return latField;
            }
            set {
                latField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Longitude coordinate of Geocode (Geospatial Entity Object Code).[br /]Unsupported field.
        /// 
        /// </summary>
        public string Long {
            get {
                return longField;
            }
            set {
                longField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive tag (or label) associated with the physical address. Valid values are Shipping and Billing, as defined in the PhysicalAddressLabelType.
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Note for .
        /// 
        /// </summary>
        public string Note {
            get {
                return noteField;
            }
            set {
                noteField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: EmailAddress type definition. This entity is always manipulated in context of another parent entity like Person, Organization etc.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EmailAddress {
        
        private string idField;
        
        private string addressField;
        
        private bool defaultField;
        
        private bool defaultFieldSpecified;
        
        private string tagField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Unique identifier for an Intuit entity.
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Email address.[br /]Max. length: 1023 characters.
        /// Product: QBO
        /// Description: Email address.[br /]Max. length: 100 characters.
        /// 
        /// </summary>
        public string Address {
            get {
                return addressField;
            }
            set {
                addressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if this is the default email address.
        /// 
        /// </summary>
        public bool Default {
            get {
                return defaultField;
            }
            set {
                defaultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultSpecified {
            get {
                return defaultFieldSpecified;
            }
            set {
                defaultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive tag (or label) associated with the email address. Valid values are Business and Home, as defined in the EmailAddressLabelType.
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Website address type. This entity is always manipulated in context of another parent entity like Person, Organization etc.[br /]Unsupported type.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class WebSiteAddress {
        
        private string idField;
        
        private string uRIField;
        
        private bool defaultField;
        
        private bool defaultFieldSpecified;
        
        private string tagField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier for an Intuit entity.
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Uniform Resource Identifier for the web site.[br /]Max. length: 1000 characters.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string URI {
            get {
                return uRIField;
            }
            set {
                uRIField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if this is the default web site.
        /// 
        /// </summary>
        public bool Default {
            get {
                return defaultField;
            }
            set {
                defaultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultSpecified {
            get {
                return defaultFieldSpecified;
            }
            set {
                defaultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive tag associated with the web site.
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Telephone number type definition. This entity is always manipulated in the context of another parent entity like Person, Organization etc.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TelephoneNumber {
        
        private string idField;
        
        private string deviceTypeField;
        
        private string countryCodeField;
        
        private string areaCodeField;
        
        private string exchangeCodeField;
        
        private string extensionField;
        
        private string freeFormNumberField;
        
        private bool defaultField;
        
        private bool defaultFieldSpecified;
        
        private string tagField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Unique identifier for an Intuit entity.
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Phone device type. Valid values are LandLine, Mobile, Fax, and Pager, as defined in the TelephoneDevice.
        /// 
        /// </summary>
        public string DeviceType {
            get {
                return deviceTypeField;
            }
            set {
                deviceTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Telephone country code.
        /// 
        /// </summary>
        public string CountryCode {
            get {
                return countryCodeField;
            }
            set {
                countryCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Telephone area code.
        /// 
        /// </summary>
        public string AreaCode {
            get {
                return areaCodeField;
            }
            set {
                areaCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Telephone exchange code.
        /// 
        /// </summary>
        public string ExchangeCode {
            get {
                return exchangeCodeField;
            }
            set {
                exchangeCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Telephone extension code.
        /// 
        /// </summary>
        public string Extension {
            get {
                return extensionField;
            }
            set {
                extensionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the telephone number in free form.  FreeFormNumber takes precedence over CountryCode, AreaCode, ExchangeCode, and Extension.[br /]Max length: 21 characters.
        /// 
        /// </summary>
        public string FreeFormNumber {
            get {
                return freeFormNumberField;
            }
            set {
                freeFormNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if this is the default telephone number.
        /// 
        /// </summary>
        public bool Default {
            get {
                return defaultField;
            }
            set {
                defaultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultSpecified {
            get {
                return defaultFieldSpecified;
            }
            set {
                defaultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive tag (or label) associated with the telephone number. Valid values are Business, Fax, Home, Mobile, Pager, Primary, Secondary, and Other, as defined in the TelephoneNumberLabelType.
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Contact information identified by Type.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ContactInfo {
        
        private ContactTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        private object itemField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The type of contact information.[br /]
        /// 
        /// </summary>
        public ContactTypeEnum Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TypeSpecified {
            get {
                return typeFieldSpecified;
            }
            set {
                typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Email", typeof(EmailAddress))]
        [System.Xml.Serialization.XmlElementAttribute("OtherContact", typeof(GenericContactType))]
        [System.Xml.Serialization.XmlElementAttribute("Telephone", typeof(TelephoneNumber))]
        [System.Xml.Serialization.XmlElementAttribute("WebSite", typeof(WebSiteAddress))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Types of ContactInfo entities.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ContactTypeEnum {
        
        /// <remarks/>
        TelephoneNumber,
        
        /// <remarks/>
        EmailAddress,
        
        /// <remarks/>
        WebSiteAddress,
        
        /// <remarks/>
        GenericContactType,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Contact type other than email, phone, address. Examples: "Chat", "SkypeId", "FaceBook" etc.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class GenericContactType {
        
        private string idField;
        
        private string nameField;
        
        private string valueField;
        
        private string typeField;
        
        private bool defaultField;
        
        private bool defaultFieldSpecified;
        
        private string tagField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier for an Intuit entity.
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the generic contact type. For example, "GoogleChat" related contact info can have the Name, "ChatId".
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Value of the contact type. For example, for a "GoogleChat" contact info, the Value may be the chat ID.
        /// 
        /// </summary>
        public string Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type of contact. For example, "GoogleChat" or "Skype".
        /// 
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if this is the default contact information.
        /// 
        /// </summary>
        public bool Default {
            get {
                return defaultField;
            }
            set {
                defaultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultSpecified {
            get {
                return defaultFieldSpecified;
            }
            set {
                defaultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Descriptive tag associated with the contact information.
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes Company information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CompanyInfo : IntuitEntity, IEntity {
        
        private string companyNameField;
        
        private string legalNameField;
        
        private PhysicalAddress companyAddrField;
        
        private PhysicalAddress customerCommunicationAddrField;
        
        private PhysicalAddress legalAddrField;
        
        private EmailAddress companyEmailAddrField;
        
        private EmailAddress customerCommunicationEmailAddrField;
        
        private WebSiteAddress companyURLField;
        
        private TelephoneNumber primaryPhoneField;
        
        private ContactInfo[] otherContactInfoField;
        
        private string companyFileNameField;
        
        private string flavorStratumField;
        
        private bool sampleFileField;
        
        private bool sampleFileFieldSpecified;
        
        private string companyUserIdField;
        
        private string companyUserAdminEmailField;
        
        private System.DateTime companyStartDateField;
        
        private bool companyStartDateFieldSpecified;
        
        private string employerIdField;
        
        private MonthEnum fiscalYearStartMonthField;
        
        private bool fiscalYearStartMonthFieldSpecified;
        
        private MonthEnum taxYearStartMonthField;
        
        private bool taxYearStartMonthFieldSpecified;
        
        private string qBVersionField;
        
        private string countryField;
        
        private PhysicalAddress shipAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private TelephoneNumber mobileField;
        
        private TelephoneNumber faxField;
        
        private EmailAddress emailField;
        
        private WebSiteAddress webAddrField;
        
        private System.DateTime lastImportedTimeField;
        
        private bool lastImportedTimeFieldSpecified;
        
        private System.DateTime lastSyncTimeField;
        
        private bool lastSyncTimeFieldSpecified;
        
        private string supportedLanguagesField;
        
        private string defaultTimeZoneField;
        
        private bool multiByteCharsSupportedField;
        
        private bool multiByteCharsSupportedFieldSpecified;
        
        private NameValue[] nameValueField;
        
        private FifoCalculationStatus fifoCalculationStatusField;
        
        private bool fifoCalculationStatusFieldSpecified;
        
        private IntuitAnyType companyInfoExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the company.[br /]Max. length: 1024 characters.
        /// 
        /// </summary>
        public string CompanyName {
            get {
                return companyNameField;
            }
            set {
                companyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// LegalName if different from the CompanyName
        /// 
        /// </summary>
        public string LegalName {
            get {
                return legalNameField;
            }
            set {
                legalNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Company Address as described in preference
        /// 
        /// </summary>
        public PhysicalAddress CompanyAddr {
            get {
                return companyAddrField;
            }
            set {
                companyAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address of the company as given to th customer,
        /// sometimes the address given to the customer mail address is
        /// different from Company address
        /// </summary>
        public PhysicalAddress CustomerCommunicationAddr {
            get {
                return customerCommunicationAddrField;
            }
            set {
                customerCommunicationAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Legal Address given to the government for any
        /// government communication
        /// </summary>
        public PhysicalAddress LegalAddr {
            get {
                return legalAddrField;
            }
            set {
                legalAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// CompanyEmail Address
        /// </summary>
        public EmailAddress CompanyEmailAddr {
            get {
                return companyEmailAddrField;
            }
            set {
                companyEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Email Address published to customer for
        /// communication if different from CompanyEmailAddress
        /// 
        /// </summary>
        public EmailAddress CustomerCommunicationEmailAddr {
            get {
                return customerCommunicationEmailAddrField;
            }
            set {
                customerCommunicationEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Company URL
        /// </summary>
        public WebSiteAddress CompanyURL {
            get {
                return companyURLField;
            }
            set {
                companyURLField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Primary Phone number
        /// </summary>
        public TelephoneNumber PrimaryPhone {
            get {
                return primaryPhoneField;
            }
            set {
                primaryPhoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: List of ContactInfo
        /// entities of any contact info type. The ContactInfo Type values
        /// are defined in the ContactTypeEnum.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherContactInfo")]
        public ContactInfo[] OtherContactInfo {
            get {
                return otherContactInfoField;
            }
            set {
                otherContactInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: QuickBooks company
        /// file name.[br /]Data Services max. length: 512 characters.
        /// 
        /// </summary>
        public string CompanyFileName {
            get {
                return companyFileNameField;
            }
            set {
                companyFileNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: QB software flavor
        /// being used on the file on the PC.[br /]Data Services max.
        /// length: 512 characters.
        /// 
        /// </summary>
        public string FlavorStratum {
            get {
                return flavorStratumField;
            }
            set {
                flavorStratumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: if the QB desktop file is a sample file.
        /// 
        /// </summary>
        public bool SampleFile {
            get {
                return sampleFileField;
            }
            set {
                sampleFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SampleFileSpecified {
            get {
                return sampleFileFieldSpecified;
            }
            set {
                sampleFileFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: IAM or QBN admin users
        /// id sequence number to group many external realms for this user
        /// under his id number.[br /]Data Services max. length: 512
        /// characters.
        /// 
        /// </summary>
        public string CompanyUserId {
            get {
                return companyUserIdField;
            }
            set {
                companyUserIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: IAM or QBN admin users
        /// email.[br /]Data Services max. length: 100 characters.
        /// 
        /// </summary>
        public string CompanyUserAdminEmail {
            get {
                return companyUserAdminEmailField;
            }
            set {
                companyUserAdminEmailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: DateTime when the company file was created.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime CompanyStartDate {
            get {
                return companyStartDateField;
            }
            set {
                companyStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CompanyStartDateSpecified {
            get {
                return companyStartDateFieldSpecified;
            }
            set {
                companyStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Employer identifier (EID).
        /// 
        /// </summary>
        public string EmployerId {
            get {
                return employerIdField;
            }
            set {
                employerIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Starting month of the company's fiscal year.
        /// 
        /// </summary>
        public MonthEnum FiscalYearStartMonth {
            get {
                return fiscalYearStartMonthField;
            }
            set {
                fiscalYearStartMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FiscalYearStartMonthSpecified {
            get {
                return fiscalYearStartMonthFieldSpecified;
            }
            set {
                fiscalYearStartMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Starting month of the company's fiscal year.
        /// 
        /// </summary>
        public MonthEnum TaxYearStartMonth {
            get {
                return taxYearStartMonthField;
            }
            set {
                taxYearStartMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxYearStartMonthSpecified {
            get {
                return taxYearStartMonthFieldSpecified;
            }
            set {
                taxYearStartMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QuickBooks company file latest version. The format reports the
        /// major release in the first number, the minor release in the
        /// second number (always a zero), the release update (slipstream or
        /// "R") in the third number, and the build number in the final
        /// number.[br /]Max. length: 512 characters.
        /// 
        /// </summary>
        public string QBVersion {
            get {
                return qBVersionField;
            }
            set {
                qBVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Country name to which the company belongs for fiancial
        /// calculations.
        /// 
        /// </summary>
        public string Country {
            get {
                return countryField;
            }
            set {
                countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default shipping address.
        /// 
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Other company addresses.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default mobile phone number of the company.
        /// 
        /// </summary>
        public TelephoneNumber Mobile {
            get {
                return mobileField;
            }
            set {
                mobileField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default fax number.
        /// 
        /// </summary>
        public TelephoneNumber Fax {
            get {
                return faxField;
            }
            set {
                faxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default email address.
        /// 
        /// </summary>
        public EmailAddress Email {
            get {
                return emailField;
            }
            set {
                emailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default company web site address.
        /// 
        /// </summary>
        public WebSiteAddress WebAddr {
            get {
                return webAddrField;
            }
            set {
                webAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies last imported time.
        /// 
        /// </summary>
        public System.DateTime LastImportedTime {
            get {
                return lastImportedTimeField;
            }
            set {
                lastImportedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastImportedTimeSpecified {
            get {
                return lastImportedTimeFieldSpecified;
            }
            set {
                lastImportedTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Specifies last sync time.
        /// 
        /// </summary>
        public System.DateTime LastSyncTime {
            get {
                return lastSyncTimeField;
            }
            set {
                lastSyncTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastSyncTimeSpecified {
            get {
                return lastSyncTimeFieldSpecified;
            }
            set {
                lastSyncTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Comma separated list of languages
        /// 
        /// </summary>
        public string SupportedLanguages {
            get {
                return supportedLanguagesField;
            }
            set {
                supportedLanguagesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Default time zone for the company
        /// 
        /// </summary>
        public string DefaultTimeZone {
            get {
                return defaultTimeZoneField;
            }
            set {
                defaultTimeZoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies if the company support multibyte or
        /// not
        /// </summary>
        public bool MultiByteCharsSupported {
            get {
                return multiByteCharsSupportedField;
            }
            set {
                multiByteCharsSupportedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MultiByteCharsSupportedSpecified {
            get {
                return multiByteCharsSupportedFieldSpecified;
            }
            set {
                multiByteCharsSupportedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Any other preference not covered in base is
        /// covered as name value pair, for detailed explanation look at the
        /// document
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Status of the Inventory Lots and Accounts Calculation for STQ imported company.
        /// 
        /// </summary>
        public FifoCalculationStatus FifoCalculationStatus {
            get {
                return fifoCalculationStatusField;
            }
            set {
                fifoCalculationStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FifoCalculationStatusSpecified {
            get {
                return fifoCalculationStatusFieldSpecified;
            }
            set {
                fifoCalculationStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only: extension place holder for Company.
        /// 
        /// </summary>
        public IntuitAnyType CompanyInfoEx {
            get {
                return companyInfoExField;
            }
            set {
                companyInfoExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of Inventory Lots and Accounts calculation
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum FifoCalculationStatus {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        InProgress,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Transaction is the base
    /// class of all transactions.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChargeCredit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReimburseCharge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JournalEntry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditCardPaymentTxn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Deposit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BillPayment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Payment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StatementCharge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseByVendor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VendorCredit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bill))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Purchase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesTransaction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RefundReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditMemo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Estimate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Invoice))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Transaction : IntuitEntity, IEntity {
        
        private string docNumberField;
        
        private System.DateTime txnDateField;
        
        private bool txnDateFieldSpecified;
        
        private ReferenceType departmentRefField;
        
        private ReferenceType currencyRefField;
        
        private decimal exchangeRateField;
        
        private bool exchangeRateFieldSpecified;
        
        private string privateNoteField;
        
        private string txnStatusField;
        
        private LinkedTxn[] linkedTxnField;
        
        private Line[] lineField;
        
        private TxnTaxDetail txnTaxDetailField;
        
        private string txnSourceField;
        
        private string taxFormTypeField;
        
        private string taxFormNumField;
        
        private string transactionLocationTypeField;
        
        private Tag[] tagField;
        
        private TxnApprovalInfo txnApprovalInfoField;
        
        private ReferenceType recurDataRefField;
        
        private RecurringInfo recurringInfoField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: Reference number
        /// for the transaction. If DocNumber is not provided, and the
        /// Custom Transaction Number is set to "Off", QBO assigns a
        /// document number using the next-in-sequence algorithm for Sales
        /// transactions. Otherwise the value will remaing null.
        /// Alternatively, you can also pass in "AUTO_GENERATE" in this
        /// field to force QBO to auto-sequence the document number for
        /// Invoices, Estimates and Sales Receipt.[br /]The maximum length
        /// for DocNumber is 21 characters. The default value is an empty
        /// String. Filter support not provided for Payment.
        /// Description:
        /// QBW: The primary document number for this transaction. DocNumber
        /// is exposed to end users.[br /]If it is not provided, QuickBooks
        /// business logic will assign the document number using the "next
        /// in sequence" algorithm.[br /]Max. length is 11 characters for
        /// Payment, Bill, ItemReceipt and VendorCredit. Max. length is 20
        /// characters for other entities.
        /// Filterable: QBO
        /// InputType: ReadWrite
        /// ValidRange: QBW: max=11
        /// ValidRange: QBO: max=21
        /// 
        /// </summary>
        public string DocNumber {
            get {
                return docNumberField;
            }
            set {
                docNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: The date entered
        /// by the user when this transaction occurred. [br /]Often, it is
        /// the date when the transaction is created in the system. [br
        /// /]For "posting" transactions, this is the posting date that
        /// affects the financial statements. If the date is not supplied,
        /// the current date on the server is used.
        /// Description: QBW: The
        /// nominal, user entered, date of the transaction. [br /]Often, but
        /// not required to be, the date the transaction was created in the
        /// system. [br /]For "posting" transactions, this is the posting
        /// date that affects financial statements.
        /// Filterable: ALL
        /// Sortable:
        /// ALL
        /// InputType: ReadWrite
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime TxnDate {
            get {
                return txnDateField;
            }
            set {
                txnDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnDateSpecified {
            get {
                return txnDateFieldSpecified;
            }
            set {
                txnDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Location of the
        /// transaction, as defined using location tracking in QuickBooks
        /// Online.
        /// 
        /// </summary>
        public ReferenceType DepartmentRef {
            get {
                return departmentRefField;
            }
            set {
                departmentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// Currency in which all amounts on the associated transaction are
        /// expressed.[br /]
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType CurrencyRef {
            get {
                return currencyRefField;
            }
            set {
                currencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Currency exchange
        /// rate. Valid only if the company file is set up to use
        /// Multi-Currency feature. In QuickBooks, exchange rates are always
        /// recorded as the number of home currency units it takes to equal
        /// one foreign currency unit. The foreign unit is always 1 and the
        /// amount of home units that equal that 1 foreign unit is what
        /// QuickBooks uses as the exchange rate.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public decimal ExchangeRate {
            get {
                return exchangeRateField;
            }
            set {
                exchangeRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ExchangeRateSpecified {
            get {
                return exchangeRateFieldSpecified;
            }
            set {
                exchangeRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User entered,
        /// organization-private note about the transaction. This note will
        /// not appear on the transaction records by default.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public string PrivateNote {
            get {
                return privateNoteField;
            }
            set {
                privateNoteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBW: The status of the
        /// transaction. Depending on the transaction type it may have
        /// different values.[br /]For Sales Transactions acceptable values
        /// are defined in PaymentStatusEnum. For Estimate, the values
        /// accepted are defined in EstimateStatusEnum.
        /// Description: QBO: The
        /// status of the transaction. Depending on the transaction type it
        /// may have different values.[br /]For Sales Transactions
        /// acceptable values are defined in PaymentStatusEnum. For
        /// Estimate, the values accepted are defined in
        /// QboEstimateStatusEnum.
        /// Filterable:QBW
        /// 
        /// </summary>
        public string TxnStatus {
            get {
                return txnStatusField;
            }
            set {
                txnStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: A linked (related)
        /// transaction. More than one transaction can be linked.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LinkedTxn")]
        public LinkedTxn[] LinkedTxn {
            get {
                return linkedTxnField;
            }
            set {
                linkedTxnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: A line item of a
        /// transaction.
        /// Product: QBO
        /// Description: A line item of a
        /// transaction. QuickBooks Online does not support tax lines in the
        /// main transaction body, only in the TxnTaxDetail section.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Line")]
        public Line[] Line {
            get {
                return lineField;
            }
            set {
                lineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Details of taxes
        /// charged on the transaction as a whole. For US versions of
        /// QuickBooks, tax rates used in the detail section must not be
        /// used in any tax line appearing in the main transaction body. For
        /// international versions of QuickBooks, the TxnTaxDetail should
        /// provide the details of all taxes (sales or purchase) calculated
        /// for the transaction based on the tax codes referenced by the
        /// transaction. This can be calculated by QuickBooks business logic
        /// or you may supply it when adding a transaction. For US versions
        /// of QuickBooks you need only supply the tax code for the customer
        /// and the tax code (in the case of multiple rates) or tax rate
        /// (for a single rate) to apply for the transaction as a
        /// whole.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
        /// Tax Model[/a].
        /// 
        /// </summary>
        public TxnTaxDetail TxnTaxDetail {
            get {
                return txnTaxDetailField;
            }
            set {
                txnTaxDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Originating source of
        /// the Transaction. Valid values are defined in TxnSourceEnum:
        /// QBMobile.
        /// 
        /// </summary>
        public string TxnSource {
            get {
                return txnSourceField;
            }
            set {
                txnSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Description: refer TaxFormTypeEnum. Tax Form Type holds data related to Tax
        /// Information, values based on
        /// regional compliance laws. Applicable for IN Region and can be extended
        /// for other Regions.
        /// 
        /// </summary>
        public string TaxFormType {
            get {
                return taxFormTypeField;
            }
            set {
                taxFormTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Description: Tax Form Num holds data related to Tax Information based on
        /// Regional compliance laws.This is applicable for IN region and
        /// can be extended to other regions in future.
        /// 
        /// </summary>
        public string TaxFormNum {
            get {
                return taxFormNumField;
            }
            set {
                taxFormNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Location of the purchase or sale transaction. The applicable
        /// values are those exposed through the
        /// TransactionLocationTypeEnum. This is currently applicable only
        /// for the FR region.
        /// 
        /// </summary>
        public string TransactionLocationType {
            get {
                return transactionLocationTypeField;
            }
            set {
                transactionLocationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Descripton: List of tags used to identify the transaction.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Tag")]
        public Tag[] Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Details of the Approval Status for current transaction in QBO workflows.
        /// 
        /// </summary>
        public TxnApprovalInfo TxnApprovalInfo {
            get {
                return txnApprovalInfoField;
            }
            set {
                txnApprovalInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Reference to the
        /// RecurTemplate which was used to create the Transaction
        /// InputType: Read
        /// 
        /// </summary>
        public ReferenceType RecurDataRef {
            get {
                return recurDataRefField;
            }
            set {
                recurDataRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Recurring Schedule information for the Transaction
        /// 
        /// </summary>
        public RecurringInfo RecurringInfo {
            get {
                return recurringInfoField;
            }
            set {
                recurringInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A line item of a
    /// transaction.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Line {
        
        private string idField;
        
        private string lineNumField;
        
        private string descriptionField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private decimal receivedField;
        
        private bool receivedFieldSpecified;
        
        private LinkedTxn[] linkedTxnField;
        
        private LineDetailTypeEnum detailTypeField;
        
        private bool detailTypeFieldSpecified;
        
        private object itemField;
        
        private CustomField[] customFieldField;
        
        private IntuitAnyType lineExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: ID of the Line Item.
        /// Product: QBO
        /// Description: ID of the Line Item.[br /]QBO considers a
        /// request as an update operation for a line item, if you provide an
        /// ID that is greater than zero and the ID exists in QBO.[br /]QBO
        /// considers a request as an create operation for a line item in any
        /// of the following conditions: No ID provided, ID provided is less
        /// than or equal to zero, ID provided is greater than zero and does
        /// not exist in QuickBooks.[br /]Required for updating existing
        /// lines.[br /]Not supported for BillPayment, Estimate, Invoice, or
        /// Payment.
        /// Required: QBO
        /// 
        /// </summary>
        public string Id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Specifies the position
        /// of the line in the collection of transaction lines. Supported only
        /// for QuickBooks Windows desktop.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string LineNum {
            get {
                return lineNumField;
            }
            set {
                lineNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Free form text
        /// description of the line item that appears in the printed
        /// record.[br /]Max. length: 4000 characters.[br /]Not supported for
        /// BillPayment or Payment.
        /// Product: QBW
        /// Description: Free form text
        /// description of the line item that appears in the printed record.
        /// Max. length: 4000 characters.
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The amount of the line,
        /// which depends on the type of the line. It can represent the
        /// discount amount, charge amount, tax amount, or subtotal amount
        /// based on the line type detail.
        /// Product: QBO
        /// Description: The amount
        /// of the line depending on the type of the line. It can represent
        /// the discount amount, charge amount, tax amount, or subtotal amount
        /// based on the line type detail.[br /]Required for BillPayment,
        /// Check, Estimate, Invoice, JournalEntry, Payment, SalesReceipt.
        /// Required: QBO
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: The amount/quantity received of the line,
        /// which depends on the type of the line. It can represent the
        /// received amount or received quantity
        /// based on the line type detail. ReadOnly field for Purchase Order.
        /// Applies to existing and new entities.
        /// 
        /// </summary>
        public decimal Received {
            get {
                return receivedField;
            }
            set {
                receivedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReceivedSpecified {
            get {
                return receivedFieldSpecified;
            }
            set {
                receivedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: A link between this line
        /// and a specific transaction. For example, an invoice line may link
        /// to an estimate.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LinkedTxn")]
        public LinkedTxn[] LinkedTxn {
            get {
                return linkedTxnField;
            }
            set {
                linkedTxnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The type of line in the
        /// transaction.[br /]
        /// Required: ALL
        /// 
        /// </summary>
        public LineDetailTypeEnum DetailType {
            get {
                return detailTypeField;
            }
            set {
                detailTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DetailTypeSpecified {
            get {
                return detailTypeFieldSpecified;
            }
            set {
                detailTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AccountBasedExpenseLineDetail", typeof(AccountBasedExpenseLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("DepositLineDetail", typeof(DepositLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("DescriptionLineDetail", typeof(DescriptionLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("DiscountLineDetail", typeof(DiscountLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("GroupLineDetail", typeof(GroupLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("ItemBasedExpenseLineDetail", typeof(ItemBasedExpenseLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("ItemReceiptLineDetail", typeof(ItemReceiptLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntryLineDetail", typeof(JournalEntryLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentLineDetail", typeof(PaymentLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrderItemLineDetail", typeof(PurchaseOrderItemLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("SalesItemLineDetail", typeof(SalesItemLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrderItemLineDetail", typeof(SalesOrderItemLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("SubTotalLineDetail", typeof(SubTotalLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("TDSLineDetail", typeof(TDSLineDetail))]
        [System.Xml.Serialization.XmlElementAttribute("TaxLineDetail", typeof(TaxLineDetail))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Custom field (or data
        /// extension). Supported only for QuickBooks Windows desktop.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CustomField")]
        public CustomField[] CustomField {
            get {
                return customFieldField;
            }
            set {
                customFieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for LineBase
        /// 
        /// </summary>
        public IntuitAnyType LineEx {
            get {
                return lineExField;
            }
            set {
                lineExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Account based expense
    /// detail for a transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class AccountBasedExpenseLineDetail {
        
        private ReferenceType customerRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType accountRefField;
        
        private BillableStatusEnum billableStatusField;
        
        private bool billableStatusFieldSpecified;
        
        private MarkupInfo markupInfoField;
        
        private decimal taxAmountField;
        
        private bool taxAmountFieldSpecified;
        
        private ReferenceType taxCodeRefField;
        
        private decimal taxInclusiveAmtField;
        
        private bool taxInclusiveAmtFieldSpecified;
        
        private IntuitAnyType expenseDetailLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// Customer associated with the expense.
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// associated with the expense.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Expense
        /// account associated with the service/non-sellable-item billing.
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The billable status of
        /// the expense.[br /]
        /// 
        /// </summary>
        public BillableStatusEnum BillableStatus {
            get {
                return billableStatusField;
            }
            set {
                billableStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableStatusSpecified {
            get {
                return billableStatusFieldSpecified;
            }
            set {
                billableStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Markup information for
        /// the expense.
        /// 
        /// </summary>
        public MarkupInfo MarkupInfo {
            get {
                return markupInfoField;
            }
            set {
                markupInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Sales tax associated
        /// with the expense.
        /// 
        /// </summary>
        public decimal TaxAmount {
            get {
                return taxAmountField;
            }
            set {
                taxAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxAmountSpecified {
            get {
                return taxAmountFieldSpecified;
            }
            set {
                taxAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Sales tax code
        /// associated with the sales tax for the expense.
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the total
        /// amount of line item including tax.
        /// 
        /// </summary>
        public decimal TaxInclusiveAmt {
            get {
                return taxInclusiveAmtField;
            }
            set {
                taxInclusiveAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxInclusiveAmtSpecified {
            get {
                return taxInclusiveAmtFieldSpecified;
            }
            set {
                taxInclusiveAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for ExpenseDetail
        /// 
        /// </summary>
        public IntuitAnyType ExpenseDetailLineDetailEx {
            get {
                return expenseDetailLineDetailExField;
            }
            set {
                expenseDetailLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Markup information.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class MarkupInfo {
        
        private bool percentBasedField;
        
        private bool percentBasedFieldSpecified;
        
        private decimal valueField;
        
        private bool valueFieldSpecified;
        
        private decimal percentField;
        
        private bool percentFieldSpecified;
        
        private ReferenceType priceLevelRefField;
        
        private ReferenceType markUpIncomeAccountRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the markup is
        /// expressed as a percentage.
        /// 
        /// </summary>
        public bool PercentBased {
            get {
                return percentBasedField;
            }
            set {
                percentBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PercentBasedSpecified {
            get {
                return percentBasedFieldSpecified;
            }
            set {
                percentBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Markup value.
        /// 
        /// </summary>
        public decimal Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ValueSpecified {
            get {
                return valueFieldSpecified;
            }
            set {
                valueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Markup amount expressed
        /// as a percent of charges already entered in the current
        /// transaction. To enter a rate of 10% use 10.0, not 0.01.
        /// 
        /// </summary>
        public decimal Percent {
            get {
                return percentField;
            }
            set {
                percentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PercentSpecified {
            get {
                return percentFieldSpecified;
            }
            set {
                percentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a
        /// PriceLevel for the markup.
        /// 
        /// </summary>
        public ReferenceType PriceLevelRef {
            get {
                return priceLevelRefField;
            }
            set {
                priceLevelRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: An account associated with markup info.
        /// Cannot be updated or modified.
        /// 
        /// </summary>
        public ReferenceType MarkUpIncomeAccountRef {
            get {
                return markUpIncomeAccountRefField;
            }
            set {
                markUpIncomeAccountRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Deposit detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class DepositLineDetail {
        
        private ReferenceType entityField;
        
        private ReferenceType classRefField;
        
        private ReferenceType accountRefField;
        
        private ReferenceType paymentMethodRefField;
        
        private string checkNumField;
        
        private TxnTypeEnum txnTypeField;
        
        private bool txnTypeFieldSpecified;
        
        private ReferenceType taxCodeRefField;
        
        private TaxApplicableOnEnum taxApplicableOnField;
        
        private bool taxApplicableOnFieldSpecified;
        
        private IntuitAnyType depositLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Information about the
        /// Customer or Job associated with the deposit.
        /// 
        /// </summary>
        public ReferenceType Entity {
            get {
                return entityField;
            }
            set {
                entityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// for the deposit.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to an Expense
        /// account associated with the service/non-sellable item billing.
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// PaymentMethod for the deposit.
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Check number for the
        /// desposit.
        /// 
        /// </summary>
        public string CheckNum {
            get {
                return checkNumField;
            }
            set {
                checkNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type of the payment
        /// transaction. For information purposes only.[br /]
        /// 
        /// </summary>
        public TxnTypeEnum TxnType {
            get {
                return txnTypeField;
            }
            set {
                txnTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnTypeSpecified {
            get {
                return txnTypeFieldSpecified;
            }
            set {
                txnTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Sales/Purchase tax code.
        /// For Non US/CA Companies
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates whether the
        /// tax applicable on the line is sales or purchase
        /// 
        /// </summary>
        public TaxApplicableOnEnum TaxApplicableOn {
            get {
                return taxApplicableOnField;
            }
            set {
                taxApplicableOnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxApplicableOnSpecified {
            get {
                return taxApplicableOnFieldSpecified;
            }
            set {
                taxApplicableOnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for DepositDetail
        /// 
        /// </summary>
        public IntuitAnyType DepositLineDetailEx {
            get {
                return depositLineDetailExField;
            }
            set {
                depositLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Information about
    /// Description.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class DescriptionLineDetail {
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private ReferenceType taxCodeRefField;
        
        private IntuitAnyType descriptionLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service is
        /// performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Reference to the TaxCode
        /// for description only line.
        /// Though it appears that TaxCode is not
        /// applicable to DescriptionOnlyLine as there is no amount associated
        /// with it, UK and Canada model
        /// seems to associate the notion of
        /// TaxCode even for just a description line
        /// Marking this as QBO only
        /// at this time but it looks like applicable for QB in general
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for DescriptionLineDetail
        /// 
        /// </summary>
        public IntuitAnyType DescriptionLineDetailEx {
            get {
                return descriptionLineDetailExField;
            }
            set {
                descriptionLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Discount detail for a
    /// transaction line.
    /// Product: QBO
    /// Description: Discount detail
    /// representing the total discount on a transaction.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class DiscountLineDetail : DiscountOverride {
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private ReferenceType classRefField;
        
        private ReferenceType taxCodeRefField;
        
        private IntuitAnyType discountLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service
        /// is performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// for the discount.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// TaxCode for the discount.
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for DiscountDetail
        /// 
        /// </summary>
        public IntuitAnyType DiscountLineDetailEx {
            get {
                return discountLineDetailExField;
            }
            set {
                discountLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscountLineDetail))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class DiscountOverride {
        
        private ReferenceType discountRefField;
        
        private bool percentBasedField;
        
        private bool percentBasedFieldSpecified;
        
        private decimal discountPercentField;
        
        private bool discountPercentFieldSpecified;
        
        private ReferenceType discountAccountRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Discount used in
        /// calculating and applying the discount on the sales transaction
        /// paid.
        /// 
        /// </summary>
        public ReferenceType DiscountRef {
            get {
                return discountRefField;
            }
            set {
                discountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the discount is
        /// a percentage; null or false if discount based on amount.
        /// 
        /// </summary>
        public bool PercentBased {
            get {
                return percentBasedField;
            }
            set {
                percentBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PercentBasedSpecified {
            get {
                return percentBasedFieldSpecified;
            }
            set {
                percentBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Percentage by which the
        /// amount due is reduced, from 0% to 100%. To enter a discount of
        /// 8.5% use 8.5, not 0.085.
        /// 
        /// </summary>
        public decimal DiscountPercent {
            get {
                return discountPercentField;
            }
            set {
                discountPercentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountPercentSpecified {
            get {
                return discountPercentFieldSpecified;
            }
            set {
                discountPercentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Income account used to
        /// track discounts received from vendors on purchases.
        /// 
        /// </summary>
        public ReferenceType DiscountAccountRef {
            get {
                return discountAccountRefField;
            }
            set {
                discountAccountRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Detail for a group item
    /// line, including the lines expanded from the group item.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class GroupLineDetail {
        
        private ReferenceType groupItemRefField;
        
        private decimal quantityField;
        
        private bool quantityFieldSpecified;
        
        private UOMRef uOMRefField;
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private Line[] lineField;
        
        private IntuitAnyType groupLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a group
        /// item for all the lines that belong to the group.
        /// 
        /// </summary>
        public ReferenceType GroupItemRef {
            get {
                return groupItemRefField;
            }
            set {
                groupItemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Quantity of the group
        /// item.
        /// 
        /// </summary>
        public decimal Quantity {
            get {
                return quantityField;
            }
            set {
                quantityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QuantitySpecified {
            get {
                return quantityFieldSpecified;
            }
            set {
                quantityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unit of Measure
        /// reference.
        /// 
        /// </summary>
        public UOMRef UOMRef {
            get {
                return uOMRefField;
            }
            set {
                uOMRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service is
        /// performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The list of lines
        /// expanded from the group item. Note that a group line cannot itself
        /// contain group lines.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Line")]
        public Line[] Line {
            get {
                return lineField;
            }
            set {
                lineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for GroupLineDetail
        /// 
        /// </summary>
        public IntuitAnyType GroupLineDetailEx {
            get {
                return groupLineDetailExField;
            }
            set {
                groupLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// When a unit of measure is referenced, it must
    /// include the name of the specific unit used as well as the unit of
    /// measure set in which that unit is defined. This entity captures that
    /// concept.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class UOMRef {
        
        private string unitField;
        
        private ReferenceType uOMSetRefField;
        
        /// <remarks/>
        /// <summary>
        /// The name of the unit selected. Examples: inch,
        /// foot, yard.
        /// </summary>
        public string Unit {
            get {
                return unitField;
            }
            set {
                unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// A reference to the UOM entity that defines the
        /// set of related units from which the specified Unit is used.
        /// 
        /// </summary>
        public ReferenceType UOMSetRef {
            get {
                return uOMSetRefField;
            }
            set {
                uOMSetRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Item based expense detail
    /// for a transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ItemBasedExpenseLineDetail : ItemLineDetail {
        
        private ReferenceType customerRefField;
        
        private BillableStatusEnum billableStatusField;
        
        private bool billableStatusFieldSpecified;
        
        private decimal taxInclusiveAmtField;
        
        private bool taxInclusiveAmtFieldSpecified;
        
        private IntuitAnyType itemBasedExpenseLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// Customer associated with the expense.
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The billable status of
        /// the expense.[br /]
        /// 
        /// </summary>
        public BillableStatusEnum BillableStatus {
            get {
                return billableStatusField;
            }
            set {
                billableStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableStatusSpecified {
            get {
                return billableStatusFieldSpecified;
            }
            set {
                billableStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the total
        /// amount of line item including tax.
        /// 
        /// </summary>
        public decimal TaxInclusiveAmt {
            get {
                return taxInclusiveAmtField;
            }
            set {
                taxInclusiveAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxInclusiveAmtSpecified {
            get {
                return taxInclusiveAmtFieldSpecified;
            }
            set {
                taxInclusiveAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for ExpenseItemDetail
        /// 
        /// </summary>
        public IntuitAnyType ItemBasedExpenseLineDetailEx {
            get {
                return itemBasedExpenseLineDetailExField;
            }
            set {
                itemBasedExpenseLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Information about the
    /// goods sold: what is sold, how much/many and for what price.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemBasedExpenseLineDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesItemLineDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesOrderItemLineDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseOrderItemLineDetail))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public abstract partial class ItemLineDetail {
        
        private ReferenceType itemRefField;
        
        private ReferenceType classRefField;
        
        private object itemField;
        
        private ItemChoiceType itemElementNameField;
        
        private MarkupInfo markupInfoField;
        
        private decimal qtyField;
        
        private bool qtyFieldSpecified;
        
        private UOMRef uOMRefField;
        
        private ReferenceType itemAccountRefField;
        
        private ReferenceType inventorySiteRefField;
        
        private ReferenceType taxCodeRefField;
        
        private ReferenceType taxClassificationRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Item.
        /// When a line lacks an ItemRef it will be treated as "documentation"
        /// and the Amount will be ignored.
        /// 
        /// </summary>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// for the line item.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PriceLevelRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("RatePercent", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("UnitPrice", typeof(decimal))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Markup information for
        /// the Item wherever applicable.
        /// 
        /// </summary>
        public MarkupInfo MarkupInfo {
            get {
                return markupInfoField;
            }
            set {
                markupInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Number of items for the
        /// line.
        /// 
        /// </summary>
        public decimal Qty {
            get {
                return qtyField;
            }
            set {
                qtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QtySpecified {
            get {
                return qtyFieldSpecified;
            }
            set {
                qtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// UOMSetREf (unit of mesasure set) that applies to this item.
        /// 
        /// </summary>
        public UOMRef UOMRef {
            get {
                return uOMRefField;
            }
            set {
                uOMRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: An account different
        /// than the account associated with the Item in the current
        /// transaction line. Cannot be updated or modified.
        /// 
        /// </summary>
        public ReferenceType ItemAccountRef {
            get {
                return itemAccountRefField;
            }
            set {
                itemAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// InventorySite where this item is located.
        /// 
        /// </summary>
        public ReferenceType InventorySiteRef {
            get {
                return inventorySiteRefField;
            }
            set {
                inventorySiteRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// SalesTaxCode for this item.
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// SalesTaxCode for this item.
        /// 
        /// </summary>
        public ReferenceType TaxClassificationRef {
            get {
                return taxClassificationRefField;
            }
            set {
                taxClassificationRefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        PriceLevelRef,
        
        /// <remarks/>
        RatePercent,
        
        /// <remarks/>
        UnitPrice,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: ItemReceipt detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ItemReceiptLineDetail {
        
        private IntuitAnyType itemReceiptLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for ItemReceiptDetail
        /// 
        /// </summary>
        public IntuitAnyType ItemReceiptLineDetailEx {
            get {
                return itemReceiptLineDetailExField;
            }
            set {
                itemReceiptLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: JournalEntry detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class JournalEntryLineDetail {
        
        private PostingTypeEnum postingTypeField;
        
        private bool postingTypeFieldSpecified;
        
        private EntityTypeRef entityField;
        
        private ReferenceType accountRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType departmentRefField;
        
        private ReferenceType taxCodeRefField;
        
        private ReferenceType taxRateRefField;
        
        private TaxApplicableOnEnum taxApplicableOnField;
        
        private bool taxApplicableOnFieldSpecified;
        
        private decimal taxAmountField;
        
        private bool taxAmountFieldSpecified;
        
        private decimal taxInclusiveAmtField;
        
        private bool taxInclusiveAmtFieldSpecified;
        
        private BillableStatusEnum billableStatusField;
        
        private bool billableStatusFieldSpecified;
        
        private ReferenceType journalCodeRefField;
        
        private IntuitAnyType journalEntryLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates whether the
        /// JournalEntry line is a Debit or Credit.[br /]
        /// 
        /// </summary>
        public PostingTypeEnum PostingType {
            get {
                return postingTypeField;
            }
            set {
                postingTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PostingTypeSpecified {
            get {
                return postingTypeFieldSpecified;
            }
            set {
                postingTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference information
        /// for the Entity (Customer/Vendor/Employee) associated with the
        /// JournalEntry line.
        /// 
        /// </summary>
        public EntityTypeRef Entity {
            get {
                return entityField;
            }
            set {
                entityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Account
        /// associated with the JournalEntry line.
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// associated with the JournalEntry line.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents Department
        /// Reference associated with the JournalEntry line.
        /// 
        /// </summary>
        public ReferenceType DepartmentRef {
            get {
                return departmentRefField;
            }
            set {
                departmentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Sales/Purchase tax code
        /// associated with the JournalEntry Line. For Non US/CA Companies
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Sales/Purchase tax rate Id
        /// associated with the JournalEntry Line. For CA Companies.
        /// 
        /// </summary>
        public ReferenceType TaxRateRef {
            get {
                return taxRateRefField;
            }
            set {
                taxRateRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates whether the
        /// tax applicable on the line is sales or purchase
        /// 
        /// </summary>
        public TaxApplicableOnEnum TaxApplicableOn {
            get {
                return taxApplicableOnField;
            }
            set {
                taxApplicableOnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxApplicableOnSpecified {
            get {
                return taxApplicableOnFieldSpecified;
            }
            set {
                taxApplicableOnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Tax applicable for this
        /// line transaction line
        /// 
        /// </summary>
        public decimal TaxAmount {
            get {
                return taxAmountField;
            }
            set {
                taxAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxAmountSpecified {
            get {
                return taxAmountFieldSpecified;
            }
            set {
                taxAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the total
        /// amount of line item including tax.
        /// 
        /// </summary>
        public decimal TaxInclusiveAmt {
            get {
                return taxInclusiveAmtField;
            }
            set {
                taxInclusiveAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxInclusiveAmtSpecified {
            get {
                return taxInclusiveAmtFieldSpecified;
            }
            set {
                taxInclusiveAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The billable status of
        /// the journal entry line. The line is to be billed to a customer if
        /// the account is an expense account and the Entity Reference
        /// specifies a Customer or a Job.[br /]
        /// 
        /// </summary>
        public BillableStatusEnum BillableStatus {
            get {
                return billableStatusField;
            }
            set {
                billableStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableStatusSpecified {
            get {
                return billableStatusFieldSpecified;
            }
            set {
                billableStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Journal Code that should be associated for every journal
        /// entry line. This is applicable only for FR.
        /// 
        /// </summary>
        public ReferenceType JournalCodeRef {
            get {
                return journalCodeRefField;
            }
            set {
                journalCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for JournalEntryDetail
        /// 
        /// </summary>
        public IntuitAnyType JournalEntryLineDetailEx {
            get {
                return journalEntryLineDetailExField;
            }
            set {
                journalEntryLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Reference information for
    /// an entity.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EntityTypeRef {
        
        private EntityTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        private ReferenceType entityRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Entity type.[br /]
        /// 
        /// </summary>
        public EntityTypeEnum Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TypeSpecified {
            get {
                return typeFieldSpecified;
            }
            set {
                typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the entity.
        /// 
        /// </summary>
        public ReferenceType EntityRef {
            get {
                return entityRefField;
            }
            set {
                entityRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Payment detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PaymentLineDetail {
        
        private ReferenceType itemRefField;
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private ReferenceType classRefField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private decimal homeBalanceField;
        
        private bool homeBalanceFieldSpecified;
        
        private DiscountOverride discountField;
        
        private IntuitAnyType paymentLineExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Item.
        /// When a line lacks an ItemRef it will be treated as "documentation"
        /// and the Amount will be ignored.
        /// 
        /// </summary>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service is
        /// performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Class
        /// for the line item.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the unpaid
        /// amount of the transaction after this payment is applied.[br
        /// /]Cannot be written to QuickBooks.
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the unpaid
        /// amount of the transaction after this payment is applied in home
        /// currency. It is visible only for companies which have
        /// multicurrency enabled[br /] Cannot be written to Quickbooks.
        /// 
        /// </summary>
        public decimal HomeBalance {
            get {
                return homeBalanceField;
            }
            set {
                homeBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeBalanceSpecified {
            get {
                return homeBalanceFieldSpecified;
            }
            set {
                homeBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a Discount
        /// item and its properties that this line can overwrite.
        /// 
        /// </summary>
        public DiscountOverride Discount {
            get {
                return discountField;
            }
            set {
                discountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for PaymentDetail
        /// 
        /// </summary>
        public IntuitAnyType PaymentLineEx {
            get {
                return paymentLineExField;
            }
            set {
                paymentLineExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: PurchaseOrder item detail
    /// for a transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PurchaseOrderItemLineDetail : SalesItemLineDetail {
        
        private string manPartNumField;
        
        private bool manuallyClosedField;
        
        private bool manuallyClosedFieldSpecified;
        
        private decimal openQtyField;
        
        private bool openQtyFieldSpecified;
        
        private IntuitAnyType purchaseOrderItemLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The identifier
        /// provided by manufacturer for the Item. For example, the model
        /// number.
        /// 
        /// </summary>
        public string ManPartNum {
            get {
                return manPartNumField;
            }
            set {
                manPartNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The item on the line
        /// is marked as if fully receiveded, but it is closed as no longer
        /// available.
        /// 
        /// </summary>
        public bool ManuallyClosed {
            get {
                return manuallyClosedField;
            }
            set {
                manuallyClosedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ManuallyClosedSpecified {
            get {
                return manuallyClosedFieldSpecified;
            }
            set {
                manuallyClosedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Represents the
        /// difference between the quantity ordered and actually
        /// received.[br /]Cannot be written to QuickBooks.
        /// 
        /// </summary>
        public decimal OpenQty {
            get {
                return openQtyField;
            }
            set {
                openQtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OpenQtySpecified {
            get {
                return openQtyFieldSpecified;
            }
            set {
                openQtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for PurchaseOrderItemDetail
        /// 
        /// </summary>
        public IntuitAnyType PurchaseOrderItemLineDetailEx {
            get {
                return purchaseOrderItemLineDetailExField;
            }
            set {
                purchaseOrderItemLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: SalesItem detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesOrderItemLineDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseOrderItemLineDetail))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesItemLineDetail : ItemLineDetail {
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private decimal taxInclusiveAmtField;
        
        private bool taxInclusiveAmtFieldSpecified;
        
        private decimal discountRateField;
        
        private bool discountRateFieldSpecified;
        
        private decimal discountAmtField;
        
        private bool discountAmtFieldSpecified;
        
        private IntuitAnyType salesItemLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service
        /// is performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the total
        /// amount of line item including tax.
        /// 
        /// </summary>
        public decimal TaxInclusiveAmt {
            get {
                return taxInclusiveAmtField;
            }
            set {
                taxInclusiveAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxInclusiveAmtSpecified {
            get {
                return taxInclusiveAmtFieldSpecified;
            }
            set {
                taxInclusiveAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the discount rate that is applied on this line.
        /// 
        /// </summary>
        public decimal DiscountRate {
            get {
                return discountRateField;
            }
            set {
                discountRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountRateSpecified {
            get {
                return discountRateFieldSpecified;
            }
            set {
                discountRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the discount amount that is applied on this line.
        /// 
        /// </summary>
        public decimal DiscountAmt {
            get {
                return discountAmtField;
            }
            set {
                discountAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountAmtSpecified {
            get {
                return discountAmtFieldSpecified;
            }
            set {
                discountAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for SalesItemDetail
        /// 
        /// </summary>
        public IntuitAnyType SalesItemLineDetailEx {
            get {
                return salesItemLineDetailExField;
            }
            set {
                salesItemLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: SalesOrder item detail for
    /// a transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesOrderItemLineDetail : SalesItemLineDetail {
        
        private bool manuallyClosedField;
        
        private bool manuallyClosedFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The item on the line
        /// is marked as if fully received, but it is closed as no longer
        /// available.
        /// 
        /// </summary>
        public bool ManuallyClosed {
            get {
                return manuallyClosedField;
            }
            set {
                manuallyClosedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ManuallyClosedSpecified {
            get {
                return manuallyClosedFieldSpecified;
            }
            set {
                manuallyClosedFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: SubTotalLine detail for a transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SubTotalLineDetail {
        
        private ReferenceType itemRefField;
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Item.
        /// When a line lacks an ItemRef it will be treated as "documentation"
        /// and the Amount will be ignored.
        /// 
        /// </summary>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service is
        /// performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: TDS line detail for the
    /// transaction.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TDSLineDetail {
        
        private ReferenceType tDSAccountRefField;
        
        private int tDSSectionTypeIdField;
        
        private bool tDSSectionTypeIdFieldSpecified;
        
        private IntuitAnyType tDSLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Reference to TDS account
        /// associated with this transaction
        /// 
        /// </summary>
        public ReferenceType TDSAccountRef {
            get {
                return tDSAccountRefField;
            }
            set {
                tDSAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TDS section type of the
        /// transaction.
        /// 
        /// </summary>
        public int TDSSectionTypeId {
            get {
                return tDSSectionTypeIdField;
            }
            set {
                tDSSectionTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSSectionTypeIdSpecified {
            get {
                return tDSSectionTypeIdFieldSpecified;
            }
            set {
                tDSSectionTypeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Extension place holder
        /// for TDSLineDetail
        /// 
        /// </summary>
        public IntuitAnyType TDSLineDetailEx {
            get {
                return tDSLineDetailExField;
            }
            set {
                tDSLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Tax detail for a
    /// transaction line.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxLineDetail {
        
        private ReferenceType taxRateRefField;
        
        private bool percentBasedField;
        
        private bool percentBasedFieldSpecified;
        
        private decimal taxPercentField;
        
        private bool taxPercentFieldSpecified;
        
        private decimal netAmountTaxableField;
        
        private bool netAmountTaxableFieldSpecified;
        
        private decimal taxInclusiveAmountField;
        
        private bool taxInclusiveAmountFieldSpecified;
        
        private decimal overrideDeltaAmountField;
        
        private bool overrideDeltaAmountFieldSpecified;
        
        private System.DateTime serviceDateField;
        
        private bool serviceDateFieldSpecified;
        
        private IntuitAnyType taxLineDetailExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to a TaxRate.
        /// For all editions of QuickBooks, for TaxLineDetail line types that
        /// apply a specific TaxRate to the preceding line of the transaction,
        /// this
        /// is a reference to that TaxRate. For a TaxLineDetail in a
        /// TxnTaxDetail, where the TxnTaxCodeRef is set, the TaxRate
        /// referenced here MUST also be
        /// one of the rates in the referenced tax code's rate list (either the
        /// SalesTaxRateList or the PurchaseTaxRateList) that applies to the
        /// transaction type.[br /]
        /// For international editions of QuickBooks,
        /// for a TaxLineDetail in a TxnTaxDetail, the rate referenced here
        /// must be referenced by a TaxCode used on a transaction
        /// line. Any given rate may only be listed once.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
        /// Tax Model[/a].
        /// Product: QBO
        /// Description: For US editions of
        /// QuickBooks Online, and in TxnTaxDetail only, this references the
        /// TaxRate applied to the entire transaction.[br /]
        /// For international
        /// editions of QuickBooks Online, for a TaxLineDetail in a
        /// TxnTaxDetail, where the TxnTaxCodeRef is set, the TaxRate
        /// referenced
        /// here MUST also be one of the rates in the referenced tax code's rate
        /// list (either the SalesTaxRateList or the PurchaseTaxRateList) that
        /// applies to the
        /// transaction type. Any given rate may only be listed once.[br /]Does not apply
        /// to a TaxLineDetail apart from a TxnTaxDetail.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
        /// Tax Model[/a].
        /// 
        /// </summary>
        public ReferenceType TaxRateRef {
            get {
                return taxRateRefField;
            }
            set {
                taxRateRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the sales tax is
        /// expressed as a percentage; false if expressed as a number amount.
        /// 
        /// </summary>
        public bool PercentBased {
            get {
                return percentBasedField;
            }
            set {
                percentBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PercentBasedSpecified {
            get {
                return percentBasedFieldSpecified;
            }
            set {
                percentBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Numerical expression of
        /// the sales tax percent. For example, use "8.5" not "0.085".
        /// 
        /// </summary>
        public decimal TaxPercent {
            get {
                return taxPercentField;
            }
            set {
                taxPercentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxPercentSpecified {
            get {
                return taxPercentFieldSpecified;
            }
            set {
                taxPercentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: This is taxable amount
        /// on the total of the applicable tax rates
        /// If TaxRate is applicable
        /// on two lines, the taxableamount represents total of the two lines
        /// for which this rate is applied
        /// This is different from the
        /// Line.Amount which represent the final tax amount after the tax has
        /// been applied
        /// 
        /// </summary>
        public decimal NetAmountTaxable {
            get {
                return netAmountTaxableField;
            }
            set {
                netAmountTaxableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NetAmountTaxableSpecified {
            get {
                return netAmountTaxableFieldSpecified;
            }
            set {
                netAmountTaxableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: This is the amount which
        /// also includes tax.
        /// 
        /// </summary>
        public decimal TaxInclusiveAmount {
            get {
                return taxInclusiveAmountField;
            }
            set {
                taxInclusiveAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxInclusiveAmountSpecified {
            get {
                return taxInclusiveAmountFieldSpecified;
            }
            set {
                taxInclusiveAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: This holds the
        /// difference between the actual tax and overridden amount supplied
        /// by the user.
        /// 
        /// </summary>
        public decimal OverrideDeltaAmount {
            get {
                return overrideDeltaAmountField;
            }
            set {
                overrideDeltaAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OverrideDeltaAmountSpecified {
            get {
                return overrideDeltaAmountFieldSpecified;
            }
            set {
                overrideDeltaAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date when the service is
        /// performed.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ServiceDate {
            get {
                return serviceDateField;
            }
            set {
                serviceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ServiceDateSpecified {
            get {
                return serviceDateFieldSpecified;
            }
            set {
                serviceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for TaxLine.
        /// 
        /// </summary>
        public IntuitAnyType TaxLineDetailEx {
            get {
                return taxLineDetailExField;
            }
            set {
                taxLineDetailExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Details of taxes charged
    /// on the transaction as a whole. For US versions of QuickBooks, tax
    /// rates used in the detail section must not be used in any tax line
    /// appearing in the main transaction body. For international versions
    /// of QuickBooks, the TxnTaxDetail should provide the details of all
    /// taxes (sales or purchase) calculated for the transaction based on
    /// the tax codes referenced by the transaction. This can be calculated
    /// by QuickBooks business logic or you may supply it when adding a
    /// transaction. For US versions of QuickBooks you need only supply the
    /// tax code for the customer and the tax code (in the case of multiple
    /// rates) or tax rate (for a single rate) to apply for the transaction
    /// as a whole.[br]See [a
    /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
    /// Tax Model[/a].
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TxnTaxDetail {
        
        private ReferenceType defaultTaxCodeRefField;
        
        private ReferenceType txnTaxCodeRefField;
        
        private decimal totalTaxField;
        
        private bool totalTaxFieldSpecified;
        
        private TaxReviewStatusEnum taxReviewStatusField;
        
        private bool taxReviewStatusFieldSpecified;
        
        private Line[] taxLineField;
        
        private bool useAutomatedSalesTaxField;
        
        private bool useAutomatedSalesTaxFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the default tax code that applies to the transaction
        /// as a whole.
        /// In Quickbooks desktop, this maps to CustomerTaxCode in Invoice and
        /// VendorTaxCode in Bill.
        /// [span style="display: none"] I18n: US [/span]
        /// 
        /// </summary>
        public ReferenceType DefaultTaxCodeRef {
            get {
                return defaultTaxCodeRefField;
            }
            set {
                defaultTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: Reference to the
        /// transaction tax code. For US editions only.
        /// Note that the US tax model can have just a single tax code for the
        /// entire transaction.
        /// 
        /// </summary>
        public ReferenceType TxnTaxCodeRef {
            get {
                return txnTaxCodeRefField;
            }
            set {
                txnTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Total tax calculated for the transaction, excluding any embedded
        /// tax lines.
        /// 
        /// </summary>
        public decimal TotalTax {
            get {
                return totalTaxField;
            }
            set {
                totalTaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalTaxSpecified {
            get {
                return totalTaxFieldSpecified;
            }
            set {
                totalTaxFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Enumerated reasons to review Taxes on the Transaction.
        /// 
        /// </summary>
        public TaxReviewStatusEnum TaxReviewStatus {
            get {
                return taxReviewStatusField;
            }
            set {
                taxReviewStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxReviewStatusSpecified {
            get {
                return taxReviewStatusFieldSpecified;
            }
            set {
                taxReviewStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: This must be a Line whose LineDetailType is TaxLineDetail.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TaxLine")]
        public Line[] TaxLine {
            get {
                return taxLineField;
            }
            set {
                taxLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: This is a boolean which defines if developer intends to use
        /// Automated Sales Tax or tax code that they have provided in the payload.
        /// If the v3 developer sets this to true, then txn going in QBO will always
        /// have AST rates. In case this flag is set to false, then it will depend on the
        /// QBO user pref - AllowPartnerTaxOverride, which tells if QBO user wants to allow
        /// v3 app to override AST rates or not. If user allows v3 apps to override AST,
        /// then the txn will get saved with v3 app specified rates.
        /// [span style="display: none"] I18n: US [/span]
        /// 
        /// </summary>
        public bool UseAutomatedSalesTax {
            get {
                return useAutomatedSalesTaxField;
            }
            set {
                useAutomatedSalesTaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UseAutomatedSalesTaxSpecified {
            get {
                return useAutomatedSalesTaxFieldSpecified;
            }
            set {
                useAutomatedSalesTaxFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A Tag applied to a transaction
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Tag : IntuitEntity, IEntity {
        
        private string nameField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The name of the tag.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Description: Describes the Recurring Schedules for Transactions
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class RecurringInfo {
        
        private string nameField;
        
        private string recurTypeField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private RecurringScheduleInfo scheduleInfoField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The name of the Recurring Schedule Template.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Recur Type which can be Automated, Reminded, UnScheduled or Manual.
        /// 
        /// </summary>
        public string RecurType {
            get {
                return recurTypeField;
            }
            set {
                recurTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates whether the Recurring Schedule is enabled.
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Scheduling Information.
        /// 
        /// </summary>
        public RecurringScheduleInfo ScheduleInfo {
            get {
                return scheduleInfoField;
            }
            set {
                scheduleInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Scheduling Information for the Transaction
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class RecurringScheduleInfo {
        
        private string intervalTypeField;
        
        private int numIntervalField;
        
        private bool numIntervalFieldSpecified;
        
        private int dayOfMonthField;
        
        private bool dayOfMonthFieldSpecified;
        
        private WeekEnum dayOfWeekField;
        
        private bool dayOfWeekFieldSpecified;
        
        private int weekOfMonthField;
        
        private bool weekOfMonthFieldSpecified;
        
        private MonthEnum monthOfYearField;
        
        private bool monthOfYearFieldSpecified;
        
        private int remindDaysField;
        
        private bool remindDaysFieldSpecified;
        
        private int daysBeforeField;
        
        private bool daysBeforeFieldSpecified;
        
        private int maxOccurrencesField;
        
        private bool maxOccurrencesFieldSpecified;
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private System.DateTime nextDateField;
        
        private bool nextDateFieldSpecified;
        
        private System.DateTime previousDateField;
        
        private bool previousDateFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Interval Type which can be Yearly, Monthly, Daily or Weekly
        /// 
        /// </summary>
        public string IntervalType {
            get {
                return intervalTypeField;
            }
            set {
                intervalTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Interval based on the Interval Type
        /// 
        /// </summary>
        public int NumInterval {
            get {
                return numIntervalField;
            }
            set {
                numIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NumIntervalSpecified {
            get {
                return numIntervalFieldSpecified;
            }
            set {
                numIntervalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Day of the Month
        /// 
        /// </summary>
        public int DayOfMonth {
            get {
                return dayOfMonthField;
            }
            set {
                dayOfMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DayOfMonthSpecified {
            get {
                return dayOfMonthFieldSpecified;
            }
            set {
                dayOfMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Day of the Week
        /// 
        /// </summary>
        public WeekEnum DayOfWeek {
            get {
                return dayOfWeekField;
            }
            set {
                dayOfWeekField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DayOfWeekSpecified {
            get {
                return dayOfWeekFieldSpecified;
            }
            set {
                dayOfWeekFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Week of the Month
        /// 
        /// </summary>
        public int WeekOfMonth {
            get {
                return weekOfMonthField;
            }
            set {
                weekOfMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool WeekOfMonthSpecified {
            get {
                return weekOfMonthFieldSpecified;
            }
            set {
                weekOfMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Month of the Year
        /// 
        /// </summary>
        public MonthEnum MonthOfYear {
            get {
                return monthOfYearField;
            }
            set {
                monthOfYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MonthOfYearSpecified {
            get {
                return monthOfYearFieldSpecified;
            }
            set {
                monthOfYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The days before StartDate for a Reminded RecurType
        /// 
        /// </summary>
        public int RemindDays {
            get {
                return remindDaysField;
            }
            set {
                remindDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RemindDaysSpecified {
            get {
                return remindDaysFieldSpecified;
            }
            set {
                remindDaysFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Days before the Scheduled Date
        /// 
        /// </summary>
        public int DaysBefore {
            get {
                return daysBeforeField;
            }
            set {
                daysBeforeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DaysBeforeSpecified {
            get {
                return daysBeforeFieldSpecified;
            }
            set {
                daysBeforeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Max number of Recurring Occurrences
        /// 
        /// </summary>
        public int MaxOccurrences {
            get {
                return maxOccurrencesField;
            }
            set {
                maxOccurrencesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MaxOccurrencesSpecified {
            get {
                return maxOccurrencesFieldSpecified;
            }
            set {
                maxOccurrencesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Start Date for the Recurring Schedule
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return startDateField;
            }
            set {
                startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartDateSpecified {
            get {
                return startDateFieldSpecified;
            }
            set {
                startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The End Date for the Recurring Schedule
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return endDateField;
            }
            set {
                endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndDateSpecified {
            get {
                return endDateFieldSpecified;
            }
            set {
                endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Date when the next Transaction will created. (Read Only)
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime NextDate {
            get {
                return nextDateField;
            }
            set {
                nextDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NextDateSpecified {
            get {
                return nextDateFieldSpecified;
            }
            set {
                nextDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Date when the last Transaction was created.(Read Only)
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime PreviousDate {
            get {
                return previousDateField;
            }
            set {
                previousDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PreviousDateSpecified {
            get {
                return previousDateFieldSpecified;
            }
            set {
                previousDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Base class of all Sales
    /// transaction entities.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RefundReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditMemo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Estimate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SalesReceipt))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Invoice))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesTransaction : Transaction {
        
        private bool autoDocNumberField;
        
        private bool autoDocNumberFieldSpecified;
        
        private ReferenceType customerRefField;
        
        private MemoRef customerMemoField;
        
        private PhysicalAddress billAddrField;
        
        private PhysicalAddress shipAddrField;
        
        private bool freeFormAddressField;
        
        private bool freeFormAddressFieldSpecified;
        
        private PhysicalAddress shipFromAddrField;
        
        private ReferenceType remitToRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType salesTermRefField;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private ReferenceType salesRepRefField;
        
        private string pONumberField;
        
        private string fOBField;
        
        private ReferenceType shipMethodRefField;
        
        private System.DateTime shipDateField;
        
        private bool shipDateFieldSpecified;
        
        private string trackingNumField;
        
        private GlobalTaxCalculationEnum globalTaxCalculationField;
        
        private bool globalTaxCalculationFieldSpecified;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private decimal homeTotalAmtField;
        
        private bool homeTotalAmtFieldSpecified;
        
        private bool applyTaxAfterDiscountField;
        
        private bool applyTaxAfterDiscountFieldSpecified;
        
        private ReferenceType templateRefField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        private EmailStatusEnum emailStatusField;
        
        private bool emailStatusFieldSpecified;
        
        private EmailAddress billEmailField;
        
        private EmailAddress billEmailCcField;
        
        private EmailAddress billEmailBccField;
        
        private ReferenceType aRAccountRefField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private decimal homeBalanceField;
        
        private bool homeBalanceFieldSpecified;
        
        private bool financeChargeField;
        
        private bool financeChargeFieldSpecified;
        
        private ReferenceType paymentMethodRefField;
        
        private string paymentRefNumField;
        
        private PaymentTypeEnum paymentTypeField;
        
        private bool paymentTypeFieldSpecified;
        
        private object itemField;
        
        private ReferenceType depositToAccountRefField;
        
        private TransactionDeliveryInfo deliveryInfoField;
        
        private decimal discountRateField;
        
        private bool discountRateFieldSpecified;
        
        private decimal discountAmtField;
        
        private bool discountAmtFieldSpecified;
        
        private string govtTxnRefIdentifierField;
        
        private ReferenceType taxExemptionRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: If AutoDocNumber is true, DocNumber is generated automatically.
        /// If false or null, the DocNumber is generated based on preference
        /// of the user.
        /// 
        /// </summary>
        public bool AutoDocNumber {
            get {
                return autoDocNumberField;
            }
            set {
                autoDocNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AutoDocNumberSpecified {
            get {
                return autoDocNumberFieldSpecified;
            }
            set {
                autoDocNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a Customer or job.
        /// Filterable: QBW
        /// InputType: ReadWrite
        /// BusinessRules: QBW: CustomerRef is mandatory for some SalesTransactions like
        /// Invoice
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: For an Invoice, this is the user-entered message to the
        /// customer that does appear in the invoice, and does appear in the
        /// printed invoice. The maximum length for Invoice Msg is 1000
        /// characters.[br /]For a Bill, this is the memo of the transaction
        /// to provide more detail, and does not appear in the printed
        /// message of the bill. The maximum length for Bill Msg is 4000
        /// characters.[br /]For a CreditCardCharge, this message appears in
        /// the printed record; maximum length is 4000 characters.[br /]Not
        /// supported for BillPayment, JournalEntry or Payment.
        /// Description: QBW: User-entered message to the customer; this message will be
        /// visible to end user on their transactions.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public MemoRef CustomerMemo {
            get {
                return customerMemoField;
            }
            set {
                customerMemoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: Bill-to address
        /// of the Invoice.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01000_Using_Data_Service_Entities#Addresses"]Addresses[/a]
        /// Description: QBW: The physical (postal) address where the bill
        /// or invoice is sent.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01000_Using_Data_Service_Entities#Addresses"]Addresses[/a]
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public PhysicalAddress BillAddr {
            get {
                return billAddrField;
            }
            set {
                billAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: Shipping address
        /// of the Invoice.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01000_Using_Data_Service_Entities#Addresses"]Addresses[/a]
        /// Description: QBW: Identifies the address where the goods must be
        /// shipped. [br /]QuickBooks Note: If ShipAddr is not specified,
        /// and a default ship-to address is specified in QuickBooks for
        /// this customer, the default ship-to address will be used by
        /// QuickBooks.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01000_Using_Data_Service_Entities#Addresses"]Addresses[/a]
        /// 
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// shipping address is in free-form or structured-form (city/state etc.)
        /// 
        /// </summary>
        public bool FreeFormAddress {
            get {
                return freeFormAddressField;
            }
            set {
                freeFormAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FreeFormAddressSpecified {
            get {
                return freeFormAddressFieldSpecified;
            }
            set {
                freeFormAddressFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBO: Shipping from address
        /// of the Invoice.[br]See [a
        /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01000_Using_Data_Service_Entities#Addresses"]Addresses[/a]
        /// Description: QBW: Identifies the address where the goods are shipped
        /// from. For transactions without shipping, it represents the address where the sale took place.
        /// 
        /// </summary>
        public PhysicalAddress ShipFromAddr {
            get {
                return shipFromAddrField;
            }
            set {
                shipFromAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the party
        /// receiving payment.
        /// InputType: ReadOnly
        /// 
        /// </summary>
        public ReferenceType RemitToRef {
            get {
                return remitToRefField;
            }
            set {
                remitToRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the Class
        /// associated with the transaction.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the
        /// SalesTerm associated with the transaction.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType SalesTermRef {
            get {
                return salesTermRefField;
            }
            set {
                salesTermRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBW: Date when the payment of the
        /// transaction is due.
        /// Description: QBO: Date when the invoice is to
        /// be paid, not including any early-payment discount incentives, or
        /// late payment penalties. If the date is not supplied, the current
        /// date on the server is used.
        /// Filterable: QBW
        /// InputType: ReadWrite
        /// BusinessRules: QBW: Following are the BusinessRules regarding DueDate of
        /// transaction
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the
        /// SalesRep associated with the transaction.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType SalesRepRef {
            get {
                return salesRepRefField;
            }
            set {
                salesRepRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Purchase Order number.
        /// ValidRange: QBW: max=25
        /// ValidRange: QBO: max=15
        /// 
        /// </summary>
        public string PONumber {
            get {
                return pONumberField;
            }
            set {
                pONumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: "Free On Board", the
        /// terms between buyer and seller regarding transportation costs;
        /// does not have any bookkeeping implications.
        /// Description: "Free On
        /// Board", the terms between buyer and seller regarding
        /// transportation costs; does not have any bookkeeping
        /// implications.
        /// ValidRange: QBW: max=13
        /// ValidRange: QBO: max=15
        /// 
        /// </summary>
        public string FOB {
            get {
                return fOBField;
            }
            set {
                fOBField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the ShipMethod associated with the transaction.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType ShipMethodRef {
            get {
                return shipMethodRefField;
            }
            set {
                shipMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Date for delivery of
        /// goods or services.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ShipDate {
            get {
                return shipDateField;
            }
            set {
                shipDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ShipDateSpecified {
            get {
                return shipDateFieldSpecified;
            }
            set {
                shipDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Shipping provider's
        /// tracking number for the delivery of the goods associated with
        /// the transaction.
        /// 
        /// </summary>
        public string TrackingNum {
            get {
                return trackingNumField;
            }
            set {
                trackingNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the
        /// GlobalTax model if the model inclusive of tax, exclusive of
        /// taxes or not applicable
        /// 
        /// </summary>
        public GlobalTaxCalculationEnum GlobalTaxCalculation {
            get {
                return globalTaxCalculationField;
            }
            set {
                globalTaxCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GlobalTaxCalculationSpecified {
            get {
                return globalTaxCalculationFieldSpecified;
            }
            set {
                globalTaxCalculationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO: Indicates the
        /// total amount of the transaction. This includes the total of all
        /// the charges, allowances and taxes. By default, this is
        /// recalculated based on sub items total and overridden.
        /// Description: QBW: Indicates the total amount of the transaction.
        /// This includes the total of all the charges, allowances and
        /// taxes.[br /]Calculated by QuickBooks business logic; cannot be
        /// written to QuickBooks.
        /// Filterable: QBW
        /// Sortable: QBW
        /// InputType: QBW: OverrideOnSync
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBW: Total amount of
        /// the transaction in the home currency for multi-currency enabled
        /// companies. Single currency companies will not have this field.
        /// Includes the total of all the charges, allowances and taxes.
        /// Calculated by QuickBooks business logic. Cannot be written to
        /// QuickBooks.
        /// InputType: QBW: ReadOnly
        /// 
        /// </summary>
        public decimal HomeTotalAmt {
            get {
                return homeTotalAmtField;
            }
            set {
                homeTotalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeTotalAmtSpecified {
            get {
                return homeTotalAmtFieldSpecified;
            }
            set {
                homeTotalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: If false or null,
        /// calculate the sales tax first, and then apply the discount. If
        /// true, subtract the discount first and then calculate the sales
        /// tax.
        /// 
        /// </summary>
        public bool ApplyTaxAfterDiscount {
            get {
                return applyTaxAfterDiscountField;
            }
            set {
                applyTaxAfterDiscountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ApplyTaxAfterDiscountSpecified {
            get {
                return applyTaxAfterDiscountFieldSpecified;
            }
            set {
                applyTaxAfterDiscountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the
        /// Template for the invoice form.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType TemplateRef {
            get {
                return templateRefField;
            }
            set {
                templateRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Printing status of the
        /// invoice.[br /]
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Email status of the
        /// invoice.[br /]
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public EmailStatusEnum EmailStatus {
            get {
                return emailStatusField;
            }
            set {
                emailStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EmailStatusSpecified {
            get {
                return emailStatusFieldSpecified;
            }
            set {
                emailStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Identifies the e-mail
        /// address where the invoice is sent. At present, you can provide
        /// only one e-mail address.[br /]If the ToBeEmailed attribute is
        /// true and the BillEmail attribute contains an e-mail address, the
        /// user can send an e-mail message to the e-mail address that is
        /// specified in the BillEmail attribute.[br /]If the BillEmail
        /// attribute contains an invalid e-mail address, QBO does not send
        /// the e-mail message to the invalid e-mail address. QBO also does
        /// not return any error message to indicate that the e-mail address
        /// is invalid.[br /]The maximum length for BillEmail is 100
        /// characters.
        /// Product: QBW
        /// Description: Identifies the email address
        /// where the bill or invoice is sent. [br /]UNSUPPORTED FIELD.
        /// 
        /// </summary>
        public EmailAddress BillEmail {
            get {
                return billEmailField;
            }
            set {
                billEmailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Identifies the cc
        /// e-mail address where the invoice is sent. If the ToBeEmailed
        /// attribute is true and the BillEmailCc attribute contains an
        /// e-mail address, the user can send an e-mail message to the
        /// e-mail address that is specified in the BillEmailCc
        /// attribute.[br /] If the BillEmailCc attribute contains an
        /// invalid e-mail address, QBO does not send the e-mail message to
        /// the invalid cc e-mail address. [br /]The maximum length for
        /// BillEmailCc is 200 characters.
        /// Product: QBW
        /// Description:
        /// Identifies the cc email address where the bill or invoice is
        /// sent. [br /]
        /// 
        /// </summary>
        public EmailAddress BillEmailCc {
            get {
                return billEmailCcField;
            }
            set {
                billEmailCcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Identifies the bcc
        /// e-mail address where the invoice is sent. If the ToBeEmailed
        /// attribute is true and the BillEmailBcc attribute contains an
        /// e-mail address, the user can send an e-mail message to the
        /// e-mail address that is specified in the BillEmailBcc
        /// attribute.[br /] If the BillEmailCc attribute contains an
        /// invalid bcc e-mail address, QBO does not send the e-mail message
        /// to the invalid bcc e-mail address. [br /]The maximum length for
        /// BillEmailBcc is 200 characters.
        /// Product: QBW
        /// Description:
        /// Identifies the bcc email address where the bill or invoice is
        /// sent as bcc. [br /]
        /// 
        /// </summary>
        public EmailAddress BillEmailBcc {
            get {
                return billEmailBccField;
            }
            set {
                billEmailBccField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the
        /// ARAccount (accounts receivable account) associated with the
        /// transaction.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType ARAccountRef {
            get {
                return aRAccountRefField;
            }
            set {
                aRAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The balance reflecting
        /// any payments made against the transaction. Initially this will
        /// be equal to the TotalAmt.
        /// Product: QBW
        /// Description: Indicates the
        /// unpaid amount of the transaction.
        /// Filterable: ALL
        /// Sortable: QBW
        /// InputType: ReadOnly
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The balance reflecting
        /// any payments made against the transaction in home currency.
        /// Initially this will be equal to the HomeTotalAmt.[br /]Read-only
        /// field.
        /// Product: QBW
        /// Description: Indicates the unpaid amount of
        /// the transaction in home currency.[br /]Cannot be written to
        /// QuickBooks.
        /// Filterable: ALL
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal HomeBalance {
            get {
                return homeBalanceField;
            }
            set {
                homeBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeBalanceSpecified {
            get {
                return homeBalanceFieldSpecified;
            }
            set {
                homeBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates whether the
        /// transaction is a finance charge.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public bool FinanceCharge {
            get {
                return financeChargeField;
            }
            set {
                financeChargeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FinanceChargeSpecified {
            get {
                return financeChargeFieldSpecified;
            }
            set {
                financeChargeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// PaymentMethod.
        /// InputType: ReadWrite
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The reference number
        /// for the payment received (I.e. Check # for a check, envelope #
        /// for a cash donation, CreditCardTransactionID for a credit card
        /// payment)
        /// 
        /// </summary>
        public string PaymentRefNum {
            get {
                return paymentRefNumField;
            }
            set {
                paymentRefNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Valid values are Cash, Check, CreditCard, or
        /// Other. No defaults. Cash based expense is not supported by
        /// QuickBooks Windows.
        /// NotApplicableTo: Estimate, SalesOrder
        /// 
        /// </summary>
        public PaymentTypeEnum PaymentType {
            get {
                return paymentTypeField;
            }
            set {
                paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentTypeSpecified {
            get {
                return paymentTypeFieldSpecified;
            }
            set {
                paymentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CheckPayment", typeof(CheckPayment))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPayment", typeof(CreditCardPayment))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBW: Reference to the
        /// DepositToAccount entity. If not specified, the Undeposited Funds
        /// account will be used.
        /// Description: QBO: Asset account where the payment money is deposited. If you
        /// do not specify this account, QBO uses the Undeposited Funds
        /// account. Supported for Payment and SalesReceipt only.
        /// NotApplicableTo: QBW: Estimate, SalesOrder
        /// 
        /// </summary>
        public ReferenceType DepositToAccountRef {
            get {
                return depositToAccountRefField;
            }
            set {
                depositToAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Last delivery info of this transaction.
        /// 
        /// </summary>
        public TransactionDeliveryInfo DeliveryInfo {
            get {
                return deliveryInfoField;
            }
            set {
                deliveryInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the discount
        /// rate that is applied on the transaction as a whole. This will be
        /// pro-rated through item lines for tax calculation.
        /// 
        /// </summary>
        public decimal DiscountRate {
            get {
                return discountRateField;
            }
            set {
                discountRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountRateSpecified {
            get {
                return discountRateFieldSpecified;
            }
            set {
                discountRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the discount
        /// amount that is applied on the transaction as a whole. This will
        /// be pro-rated through item lines for tax calculation.
        /// 
        /// </summary>
        public decimal DiscountAmt {
            get {
                return discountAmtField;
            }
            set {
                discountAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountAmtSpecified {
            get {
                return discountAmtFieldSpecified;
            }
            set {
                discountAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: this is the reference
        /// to the NotaFiscal created for the salesTransaction.
        /// ValidRange:
        /// QBO: max=30
        /// 
        /// </summary>
        public string GovtTxnRefIdentifier {
            get {
                return govtTxnRefIdentifierField;
            }
            set {
                govtTxnRefIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// TaxExemptionId and TaxExemptionReason for this customer.
        /// 
        /// </summary>
        public ReferenceType TaxExemptionRef {
            get {
                return taxExemptionRefField;
            }
            set {
                taxExemptionRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Captures a memo on a
    /// transaction that may (QBW) reference a company pre-defined message
    /// (See CustomerMsg)
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class MemoRef {
        
        private string idField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Check payment details for
    /// both payments to vendors and payments from customers.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CheckPayment {
        
        private string checkNumField;
        
        private string statusField;
        
        private string nameOnAcctField;
        
        private string acctNumField;
        
        private string bankNameField;
        
        private IntuitAnyType checkPaymentExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The check number printed
        /// on the check.
        /// 
        /// </summary>
        public string CheckNum {
            get {
                return checkNumField;
            }
            set {
                checkNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Status of the check.
        /// Values provided by service/business logic.
        /// 
        /// </summary>
        public string Status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of persons or
        /// entities holding the account, as printed on the check.
        /// 
        /// </summary>
        public string NameOnAcct {
            get {
                return nameOnAcctField;
            }
            set {
                nameOnAcctField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Checking account number,
        /// as printed on the check.
        /// 
        /// </summary>
        public string AcctNum {
            get {
                return acctNumField;
            }
            set {
                acctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The name of the bank on
        /// which the check was drawn.
        /// 
        /// </summary>
        public string BankName {
            get {
                return bankNameField;
            }
            set {
                bankNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for CheckPayment
        /// 
        /// </summary>
        public IntuitAnyType CheckPaymentEx {
            get {
                return checkPaymentExField;
            }
            set {
                checkPaymentExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Information about a
    /// payment received by credit card.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditCardPayment {
        
        private CreditChargeInfo creditChargeInfoField;
        
        private CreditChargeResponse creditChargeResponseField;
        
        /// <remarks/>
        public CreditChargeInfo CreditChargeInfo {
            get {
                return creditChargeInfoField;
            }
            set {
                creditChargeInfoField = value;
            }
        }
        
        /// <remarks/>
        public CreditChargeResponse CreditChargeResponse {
            get {
                return creditChargeResponseField;
            }
            set {
                creditChargeResponseField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Holds credit-card information to request a credit card payment from a merchant account service, but NOT any response or authorization information from the merchant account service provider -- see CreditChargeResponse
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditChargeInfo {
        
        private string numberField;
        
        private string typeField;
        
        private string nameOnAcctField;
        
        private int ccExpiryMonthField;
        
        private bool ccExpiryMonthFieldSpecified;
        
        private int ccExpiryYearField;
        
        private bool ccExpiryYearFieldSpecified;
        
        private string billAddrStreetField;
        
        private string postalCodeField;
        
        private string commercialCardCodeField;
        
        private CCTxnModeEnum cCTxnModeField;
        
        private bool cCTxnModeFieldSpecified;
        
        private CCTxnTypeEnum cCTxnTypeField;
        
        private bool cCTxnTypeFieldSpecified;
        
        private string prevCCTransIdField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private bool processPaymentField;
        
        private bool processPaymentFieldSpecified;
        
        private IntuitAnyType creditCardChargeInfoExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Credit Card account number, as printed on the card. Must not have whitespace or formatting characters.
        /// 
        /// </summary>
        public string Number {
            get {
                return numberField;
            }
            set {
                numberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type of credit card.[br /]
        /// 
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Account holder name, as printed on the card.
        /// 
        /// </summary>
        public string NameOnAcct {
            get {
                return nameOnAcctField;
            }
            set {
                nameOnAcctField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Expiration Month on card, expressed as a number: 1 = January, 2 = February, etc.
        /// 
        /// </summary>
        public int CcExpiryMonth {
            get {
                return ccExpiryMonthField;
            }
            set {
                ccExpiryMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CcExpiryMonthSpecified {
            get {
                return ccExpiryMonthFieldSpecified;
            }
            set {
                ccExpiryMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Expiration Year on card, expressed as a 4 digit number 1999, 2003, etc.
        /// 
        /// </summary>
        public int CcExpiryYear {
            get {
                return ccExpiryYearField;
            }
            set {
                ccExpiryYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CcExpiryYearSpecified {
            get {
                return ccExpiryYearFieldSpecified;
            }
            set {
                ccExpiryYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Credit card holder billing address of record: the street address to which credit card statements are sent.
        /// 
        /// </summary>
        public string BillAddrStreet {
            get {
                return billAddrStreetField;
            }
            set {
                billAddrStreetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Credit card holder billing postal code. Five digits in the USA.
        /// 
        /// </summary>
        public string PostalCode {
            get {
                return postalCodeField;
            }
            set {
                postalCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Code associated with commercial cards: purchase, corporate, and business cards. Lower transaction fee rates apply when these cards are used and this field is provided.
        /// 
        /// </summary>
        public string CommercialCardCode {
            get {
                return commercialCardCodeField;
            }
            set {
                commercialCardCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Credit card transaction mode used in Credit Card payment transactions. Valid values: CardNotPresent (default) or CardPresent.[br /]
        /// 
        /// </summary>
        public CCTxnModeEnum CCTxnMode {
            get {
                return cCTxnModeField;
            }
            set {
                cCTxnModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CCTxnModeSpecified {
            get {
                return cCTxnModeFieldSpecified;
            }
            set {
                cCTxnModeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type of credit card transaction. Valid values: Authorization, Capture, Charge, Refund, VoiceAuthorization.[br /]
        /// 
        /// </summary>
        public CCTxnTypeEnum CCTxnType {
            get {
                return cCTxnTypeField;
            }
            set {
                cCTxnTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CCTxnTypeSpecified {
            get {
                return cCTxnTypeFieldSpecified;
            }
            set {
                cCTxnTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier of the previous payment transaction. It can be used as an input to the Capture transaction type.
        /// 
        /// </summary>
        public string PrevCCTransId {
            get {
                return prevCCTransIdField;
            }
            set {
                prevCCTransIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Amount processed using the credit card.
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: If false or no value, QBO will not process the payment but just store Credit Card Information. If true, QBO will process the Credit Card Payment (Not supported currently).
        /// 
        /// </summary>
        public bool ProcessPayment {
            get {
                return processPaymentField;
            }
            set {
                processPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ProcessPaymentSpecified {
            get {
                return processPaymentFieldSpecified;
            }
            set {
                processPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only: extension place holder for CreditCardChargeInfo
        /// 
        /// </summary>
        public IntuitAnyType CreditCardChargeInfoEx {
            get {
                return creditCardChargeInfoExField;
            }
            set {
                creditCardChargeInfoExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Credit Card transaction modes used in Credit Card payment transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CCTxnModeEnum {
        
        /// <remarks/>
        CardNotPresent,
        
        /// <remarks/>
        CardPresent,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Credit Card transaction types used in Credit Card payment transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CCTxnTypeEnum {
        
        /// <remarks/>
        Authorization,
        
        /// <remarks/>
        Capture,
        
        /// <remarks/>
        Charge,
        
        /// <remarks/>
        Refund,
        
        /// <remarks/>
        VoiceAuthorization,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Holds credit-card transaction response information from a merchant account service, but not any credit card or payment request information - see CreditChargeInfo.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditChargeResponse {
        
        private string cCProcessorField;
        
        private string cCTransIdField;
        
        private CCPaymentStatusEnum statusField;
        
        private bool statusFieldSpecified;
        
        private int resultCodeField;
        
        private bool resultCodeFieldSpecified;
        
        private string resultMsgField;
        
        private string merchantAcctNumField;
        
        private CCSecurityCodeMatchEnum cardSecurityCodeMatchField;
        
        private bool cardSecurityCodeMatchFieldSpecified;
        
        private string authCodeField;
        
        private CCAVSMatchEnum avsStreetField;
        
        private bool avsStreetFieldSpecified;
        
        private CCAVSMatchEnum avsZipField;
        
        private bool avsZipFieldSpecified;
        
        private string securityCodeField;
        
        private string reconBatchIdField;
        
        private int paymentGroupingCodeField;
        
        private bool paymentGroupingCodeFieldSpecified;
        
        private System.DateTime txnAuthorizationTimeField;
        
        private bool txnAuthorizationTimeFieldSpecified;
        
        private int txnAuthorizationStampField;
        
        private bool txnAuthorizationStampFieldSpecified;
        
        private string clientTransIDField;
        
        private IntuitAnyType creditChargeResponseExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: Not used now
        /// Description: Credit Card Processor Name for recording the payment processor
        /// 
        /// </summary>
        public string CCProcessor {
            get {
                return cCProcessorField;
            }
            set {
                cCProcessorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unique identifier of the payment transaction. It can be used to track the status of transactions, or to search transactions.
        /// 
        /// </summary>
        public string CCTransId {
            get {
                return cCTransIdField;
            }
            set {
                cCTransIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the status of the payment transaction. Possible values include Completed, Unknown.[br /]
        /// 
        /// </summary>
        public CCPaymentStatusEnum Status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StatusSpecified {
            get {
                return statusFieldSpecified;
            }
            set {
                statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Numeric code specifying the result of the transaction.
        /// 
        /// </summary>
        public int ResultCode {
            get {
                return resultCodeField;
            }
            set {
                resultCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ResultCodeSpecified {
            get {
                return resultCodeFieldSpecified;
            }
            set {
                resultCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Text specifying the result of the transaction.
        /// 
        /// </summary>
        public string ResultMsg {
            get {
                return resultMsgField;
            }
            set {
                resultMsgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Merchant account number associated with the credit card transaction.
        /// 
        /// </summary>
        public string MerchantAcctNum {
            get {
                return merchantAcctNumField;
            }
            set {
                merchantAcctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Result of comparing the security code supplied in the credit card transaction request with the code on file with the card issuer. Possible values are Pass, Fail, and NotAvailable.[br /]
        /// 
        /// </summary>
        public CCSecurityCodeMatchEnum CardSecurityCodeMatch {
            get {
                return cardSecurityCodeMatchField;
            }
            set {
                cardSecurityCodeMatchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CardSecurityCodeMatchSpecified {
            get {
                return cardSecurityCodeMatchFieldSpecified;
            }
            set {
                cardSecurityCodeMatchFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Code returned from the credit card processor to indicate that the charge will be paid by the card issuer.
        /// 
        /// </summary>
        public string AuthCode {
            get {
                return authCodeField;
            }
            set {
                authCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The AVS (Address Verification Service) result for the street address supplied in the transaction. Possible values are Pass, if the information matches the information on file with the cardholder's account, Fail, or NotAvailable.[br /]
        /// 
        /// </summary>
        public CCAVSMatchEnum AvsStreet {
            get {
                return avsStreetField;
            }
            set {
                avsStreetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AvsStreetSpecified {
            get {
                return avsStreetFieldSpecified;
            }
            set {
                avsStreetFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The AVS (Address Verification Service) result for the zip code supplied in the transaction.  Possible values are Pass, if the information matches the information on file with the cardholder's account, Fail, or NotAvailable.
        /// </summary>
        public CCAVSMatchEnum AvsZip {
            get {
                return avsZipField;
            }
            set {
                avsZipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AvsZipSpecified {
            get {
                return avsZipFieldSpecified;
            }
            set {
                avsZipFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: CardCode or Card Id field that can be optionally provided to use additional security features of credit card authorization. It is typically a 3 digit number located on the back of most credit cards. For American Express, it is a 4 digit number on the front.
        /// 
        /// </summary>
        public string SecurityCode {
            get {
                return securityCodeField;
            }
            set {
                securityCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates which deposit batch the transaction belongs to. Allows for integration with Intuit MAS Service and QBFS: enables reconciliation between what is charged on credit card and what is already deposited into bank.
        /// 
        /// </summary>
        public string ReconBatchId {
            get {
                return reconBatchIdField;
            }
            set {
                reconBatchIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Code that indicates membership in a group of card types that are normally deposited together.
        /// 
        /// </summary>
        public int PaymentGroupingCode {
            get {
                return paymentGroupingCodeField;
            }
            set {
                paymentGroupingCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentGroupingCodeSpecified {
            get {
                return paymentGroupingCodeFieldSpecified;
            }
            set {
                paymentGroupingCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Timestamp indicating the time in which the card processor authorized the transaction.
        /// 
        /// </summary>
        public System.DateTime TxnAuthorizationTime {
            get {
                return txnAuthorizationTimeField;
            }
            set {
                txnAuthorizationTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnAuthorizationTimeSpecified {
            get {
                return txnAuthorizationTimeFieldSpecified;
            }
            set {
                txnAuthorizationTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: This value is used to support the credit card transaction reconciliation.
        /// 
        /// </summary>
        public int TxnAuthorizationStamp {
            get {
                return txnAuthorizationStampField;
            }
            set {
                txnAuthorizationStampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnAuthorizationStampSpecified {
            get {
                return txnAuthorizationStampFieldSpecified;
            }
            set {
                txnAuthorizationStampFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: An identifier returned in settlement data used to support the credit card transaction reconciliation.
        /// 
        /// </summary>
        public string ClientTransID {
            get {
                return clientTransIDField;
            }
            set {
                clientTransIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only: extension place holder for CreditChargeResponse
        /// 
        /// </summary>
        public IntuitAnyType CreditChargeResponseEx {
            get {
                return creditChargeResponseExField;
            }
            set {
                creditChargeResponseExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of the status of the Credit Card payment transaction.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CCPaymentStatusEnum {
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Voided,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Credit Card security code match used in Credit Card payment transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CCSecurityCodeMatchEnum {
        
        /// <remarks/>
        Fail,
        
        /// <remarks/>
        NotAvailable,
        
        /// <remarks/>
        Pass,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of AVSStreet and AVSZip match used in Credit Card payment transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CCAVSMatchEnum {
        
        /// <remarks/>
        Fail,
        
        /// <remarks/>
        NotAvailable,
        
        /// <remarks/>
        Pass,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Transaction delivery info like DeliveryType, DeliveryTime, DeliveryErrorType (if any)
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TransactionDeliveryInfo {
        
        private DeliveryTypeEnum deliveryTypeField;
        
        private bool deliveryTypeFieldSpecified;
        
        private System.DateTime deliveryTimeField;
        
        private bool deliveryTimeFieldSpecified;
        
        private DeliveryErrorTypeEnum deliveryErrorTypeField;
        
        private bool deliveryErrorTypeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Type of the delivery. Ex: Email, Tradeshift
        /// 
        /// </summary>
        public DeliveryTypeEnum DeliveryType {
            get {
                return deliveryTypeField;
            }
            set {
                deliveryTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DeliveryTypeSpecified {
            get {
                return deliveryTypeFieldSpecified;
            }
            set {
                deliveryTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Time of Delivery
        /// 
        /// </summary>
        public System.DateTime DeliveryTime {
            get {
                return deliveryTimeField;
            }
            set {
                deliveryTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DeliveryTimeSpecified {
            get {
                return deliveryTimeFieldSpecified;
            }
            set {
                deliveryTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: If delivery failed, this would indicate the type of the failure.
        /// 
        /// </summary>
        public DeliveryErrorTypeEnum DeliveryErrorType {
            get {
                return deliveryErrorTypeField;
            }
            set {
                deliveryErrorTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DeliveryErrorTypeSpecified {
            get {
                return deliveryErrorTypeFieldSpecified;
            }
            set {
                deliveryErrorTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enum of different delivery types. Supports Email and Tradeshift delivery.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DeliveryTypeEnum {
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        Tradeshift,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enum of different delivery error types.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DeliveryErrorTypeEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Missing Info")]
        MissingInfo,
        
        /// <remarks/>
        Undeliverable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Delivery Server Down")]
        DeliveryServerDown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bounced Email")]
        BouncedEmail,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: The Invoice entity
    /// represents an invoice to a customer. Invoice could be based on
    /// salesterm with invoice and due dates for payment. Invoice supports
    /// sales tax, and shipping charges as a special line item. Invoice can
    /// be printed and emailed to a customer.
    /// Business Rules: [li] An invoice
    /// must have at least one line that describes the item and an
    /// amount.[/li][li] An invoice must have a reference to a customer in
    /// the header.[/li]
    /// Product: QBW
    /// Description: An Invoice is a financial transaction representing
    /// a request for payment for goods or services that have been sold. An
    /// invoice is a form that records the details of a customer's purchase,
    /// such as quantity and price of the goods or services. An invoice
    /// records the amount owed by a customer who does not pay in full at
    /// the time of purchase. If full payment is received at the time of
    /// purchase, the sale may be recorded as a sales receipt, not an
    /// invoice. An invoice must contain a valid customer reference in the
    /// CustomerId field and at least one line item. The referenced customer
    /// must already exist in the QuickBooks company at the desktop and any
    /// line items must also already exists in the QuickBooks company, or
    /// the attempt to sync will fail.[br /]In general, it is a good
    /// practice to specify all the header fields if you have the data. You
    /// should always specify the ARAccountId; otherwise a default AR
    /// account will be used and this may give you unexpected results.[/br]
    /// If you want to apply one tax to all the transaction line items, use
    /// the TaxId or TaxGroupId field. If you want to use more than one tax,
    /// you need to use Tax Line items instead.
    /// Business Rules: [li] An
    /// invoice must have at least one line that describes the item.
    /// [/li][li] If an account is specified in the header, the account must
    /// be of the Accounts Receivable (AR) type. [/li][li] An invoice must
    /// have a reference to a customer in the header.[/li]
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Invoice : SalesTransaction {
        
        private decimal depositField;
        
        private bool depositFieldSpecified;
        
        private bool allowIPNPaymentField;
        
        private bool allowIPNPaymentFieldSpecified;
        
        private bool allowOnlinePaymentField;
        
        private bool allowOnlinePaymentFieldSpecified;
        
        private bool allowOnlineCreditCardPaymentField;
        
        private bool allowOnlineCreditCardPaymentFieldSpecified;
        
        private bool allowOnlineACHPaymentField;
        
        private bool allowOnlineACHPaymentFieldSpecified;
        
        private ETransactionStatusEnum eInvoiceStatusField;
        
        private bool eInvoiceStatusFieldSpecified;
        
        private System.DateTime eCloudStatusTimeStampField;
        
        private bool eCloudStatusTimeStampFieldSpecified;
        
        private string invoiceStatusField;
        
        private string callToActionField;
        
        private StatusInfo[] invoiceStatusLogField;
        
        private IntuitAnyType invoiceExField;
        
        private decimal lessCISField;
        
        private bool lessCISFieldSpecified;
        
        private string invoiceLinkField;
        
        private string paymentDetailsMessageField;
        
        private ConvenienceFeeDetail convenienceFeeDetailField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Amount in deposit
        /// against the Invoice. Supported for Invoice only.
        /// 
        /// </summary>
        public decimal Deposit {
            get {
                return depositField;
            }
            set {
                depositField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DepositSpecified {
            get {
                return depositFieldSpecified;
            }
            set {
                depositFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use IPN to pay the Invoice
        /// 
        /// </summary>
        public bool AllowIPNPayment {
            get {
                return allowIPNPaymentField;
            }
            set {
                allowIPNPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowIPNPaymentSpecified {
            get {
                return allowIPNPaymentFieldSpecified;
            }
            set {
                allowIPNPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use eInvoicing(online payment) to pay the
        /// Invoice
        /// 
        /// </summary>
        public bool AllowOnlinePayment {
            get {
                return allowOnlinePaymentField;
            }
            set {
                allowOnlinePaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlinePaymentSpecified {
            get {
                return allowOnlinePaymentFieldSpecified;
            }
            set {
                allowOnlinePaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use eInvoicing(online payment -credit
        /// card) to pay the Invoice
        /// 
        /// </summary>
        public bool AllowOnlineCreditCardPayment {
            get {
                return allowOnlineCreditCardPaymentField;
            }
            set {
                allowOnlineCreditCardPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlineCreditCardPaymentSpecified {
            get {
                return allowOnlineCreditCardPaymentFieldSpecified;
            }
            set {
                allowOnlineCreditCardPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use eInvoicing(online payment -bank or
        /// ach) to pay the Invoice
        /// 
        /// </summary>
        public bool AllowOnlineACHPayment {
            get {
                return allowOnlineACHPaymentField;
            }
            set {
                allowOnlineACHPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlineACHPaymentSpecified {
            get {
                return allowOnlineACHPaymentFieldSpecified;
            }
            set {
                allowOnlineACHPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies the eInvoice
        /// Status(SENT, VIEWED, PAID) for the invoice
        /// 
        /// </summary>
        public ETransactionStatusEnum EInvoiceStatus {
            get {
                return eInvoiceStatusField;
            }
            set {
                eInvoiceStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EInvoiceStatusSpecified {
            get {
                return eInvoiceStatusFieldSpecified;
            }
            set {
                eInvoiceStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies the
        /// eCloudStatus timeStamp(last Viewed/Sent/paid) for the invoice
        /// 
        /// </summary>
        public System.DateTime ECloudStatusTimeStamp {
            get {
                return eCloudStatusTimeStampField;
            }
            set {
                eCloudStatusTimeStampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ECloudStatusTimeStampSpecified {
            get {
                return eCloudStatusTimeStampFieldSpecified;
            }
            set {
                eCloudStatusTimeStampFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: provides invoice statuses :
        /// MULTIPLE_ERRORS, DEPOSIT_ON_HOLD, DISPUTED, DEPOSIT_FAILED, PAYMENT_FAILED,
        /// OVERDUE_VIEWED, OVERDUE_NOT_SENT, OVERDUE_SENT,
        /// DUE_VIEWED, DUE_NOT_SENT, DUE_SENT,
        /// PAID_NOT_DEPOSITED, PARTIALLY_PAID, DEPOSITED, VOIDED, REVERSED
        /// 
        /// </summary>
        public string invoiceStatus {
            get {
                return invoiceStatusField;
            }
            set {
                invoiceStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: call to action for this status
        /// 
        /// </summary>
        public string callToAction {
            get {
                return callToActionField;
            }
            set {
                callToActionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: invoice status log
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("invoiceStatusLog")]
        public StatusInfo[] invoiceStatusLog {
            get {
                return invoiceStatusLogField;
            }
            set {
                invoiceStatusLogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Extension entity for
        /// Invoice.
        /// 
        /// </summary>
        public IntuitAnyType InvoiceEx {
            get {
                return invoiceExField;
            }
            set {
                invoiceExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO: Indicates the
        /// less cis amount of the transaction, specific to UK region companies
        /// 
        /// </summary>
        public decimal LessCIS {
            get {
                return lessCISField;
            }
            set {
                lessCISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LessCISSpecified {
            get {
                return lessCISFieldSpecified;
            }
            set {
                lessCISFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO:  Sharable link of the invoice for external users
        /// 
        /// </summary>
        public string InvoiceLink {
            get {
                return invoiceLinkField;
            }
            set {
                invoiceLinkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: QBO:  Message displayed to customer about payment Instructions. eg: bank account info.
        /// 
        /// </summary>
        public string PaymentDetailsMessage {
            get {
                return paymentDetailsMessageField;
            }
            set {
                paymentDetailsMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Internal use only: Convenience Fee detail for the invoice
        /// 
        /// </summary>
        public ConvenienceFeeDetail ConvenienceFeeDetail {
            get {
                return convenienceFeeDetailField;
            }
            set {
                convenienceFeeDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Log of Statuses for Transactions. Currently is used for Invoice. Can be extended to others.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class StatusInfo {
        
        private string statusField;
        
        private System.DateTime statusDateField;
        
        private bool statusDateFieldSpecified;
        
        private string callToActionField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Holds status information
        /// 
        /// </summary>
        public string status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Holds the status update date.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime statusDate {
            get {
                return statusDateField;
            }
            set {
                statusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool statusDateSpecified {
            get {
                return statusDateFieldSpecified;
            }
            set {
                statusDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: call to action for this status
        /// 
        /// </summary>
        public string callToAction {
            get {
                return callToActionField;
            }
            set {
                callToActionField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Internal use only: Convenience Fee detail for the invoice
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ConvenienceFeeDetail : IntuitEntity, IEntity {
        
        private ConvenienceFeeTypeEnum convenienceFeeTypeField;
        
        private bool convenienceFeeTypeFieldSpecified;
        
        private decimal convenienceFeePercentField;
        
        private bool convenienceFeePercentFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Internal use only: Convenience fee type
        /// 
        /// </summary>
        public ConvenienceFeeTypeEnum ConvenienceFeeType {
            get {
                return convenienceFeeTypeField;
            }
            set {
                convenienceFeeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ConvenienceFeeTypeSpecified {
            get {
                return convenienceFeeTypeFieldSpecified;
            }
            set {
                convenienceFeeTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Internal use only: Convenience fee rate percentage
        /// 
        /// </summary>
        public decimal ConvenienceFeePercent {
            get {
                return convenienceFeePercentField;
            }
            set {
                convenienceFeePercentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ConvenienceFeePercentSpecified {
            get {
                return convenienceFeePercentFieldSpecified;
            }
            set {
                convenienceFeePercentFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// SalesReceipt Transaction entity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesReceipt : SalesTransaction {
        
        private IntuitAnyType salesReceiptExField;
        
        private decimal lessCISField;
        
        private bool lessCISFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// Extension entity for SalesReceipt
        /// 
        /// </summary>
        public IntuitAnyType SalesReceiptEx {
            get {
                return salesReceiptExField;
            }
            set {
                salesReceiptExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO: Indicates the
        /// less cis amount of the transaction, specific to UK region companies
        /// 
        /// </summary>
        public decimal LessCIS {
            get {
                return lessCISField;
            }
            set {
                lessCISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LessCISSpecified {
            get {
                return lessCISFieldSpecified;
            }
            set {
                lessCISFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Transaction entity is the base class of all
    /// transactions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Estimate : SalesTransaction {
        
        private System.DateTime expirationDateField;
        
        private bool expirationDateFieldSpecified;
        
        private string acceptedByField;
        
        private System.DateTime acceptedDateField;
        
        private bool acceptedDateFieldSpecified;
        
        private IntuitAnyType estimateExField;
        
        /// <remarks/>
        /// <summary>
        /// Date by which estimate must be accepted before
        /// invalidation.
        /// QBO only field.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ExpirationDate {
            get {
                return expirationDateField;
            }
            set {
                expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ExpirationDateSpecified {
            get {
                return expirationDateFieldSpecified;
            }
            set {
                expirationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Name of customer who accepted the estimate.
        /// QBO
        /// only field.
        /// 
        /// </summary>
        public string AcceptedBy {
            get {
                return acceptedByField;
            }
            set {
                acceptedByField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date estimate was accepted.
        /// QBO only field.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime AcceptedDate {
            get {
                return acceptedDateField;
            }
            set {
                acceptedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AcceptedDateSpecified {
            get {
                return acceptedDateFieldSpecified;
            }
            set {
                acceptedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Extension entity for Estimate
        /// 
        /// </summary>
        public IntuitAnyType EstimateEx {
            get {
                return estimateExField;
            }
            set {
                estimateExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Specifies various fields
    /// required for emailing different transaction
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EmailDeliveryInfo : IntuitEntity, IEntity {
        
        private EmailAddress deliveryAddressField;
        
        private EmailAddress deliveryAddressCcField;
        
        private EmailAddress deliveryAddressBccField;
        
        private EmailMessage emailMessageField;
        
        private bool allowOnlinePaymentField;
        
        private bool allowOnlinePaymentFieldSpecified;
        
        private bool allowOnlineCreditCardPaymentField;
        
        private bool allowOnlineCreditCardPaymentFieldSpecified;
        
        private bool allowOnlineACHPaymentField;
        
        private bool allowOnlineACHPaymentFieldSpecified;
        
        private TransactionDeliveryInfo deliveryInfoField;
        
        private ETransactionStatusEnum eTransactionStatusField;
        
        private bool eTransactionStatusFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Email address of
        /// recipients. Multiple email address seperated with comma.
        /// 
        /// </summary>
        public EmailAddress DeliveryAddress {
            get {
                return deliveryAddressField;
            }
            set {
                deliveryAddressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Cc email address of
        /// recipients. Multiple email address seperated with comma.
        /// 
        /// </summary>
        public EmailAddress DeliveryAddressCc {
            get {
                return deliveryAddressCcField;
            }
            set {
                deliveryAddressCcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Bcc email address of
        /// recipients. Multiple email address seperated with comma.
        /// 
        /// </summary>
        public EmailAddress DeliveryAddressBcc {
            get {
                return deliveryAddressBccField;
            }
            set {
                deliveryAddressBccField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Custom Email subject
        /// and message to be used for this email.
        /// 
        /// </summary>
        public EmailMessage EmailMessage {
            get {
                return emailMessageField;
            }
            set {
                emailMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// online payment should be enabled for this transaction
        /// 
        /// </summary>
        public bool AllowOnlinePayment {
            get {
                return allowOnlinePaymentField;
            }
            set {
                allowOnlinePaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlinePaymentSpecified {
            get {
                return allowOnlinePaymentFieldSpecified;
            }
            set {
                allowOnlinePaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use eInvoicing(online payment -credit
        /// card) to pay the Invoice
        /// 
        /// </summary>
        public bool AllowOnlineCreditCardPayment {
            get {
                return allowOnlineCreditCardPaymentField;
            }
            set {
                allowOnlineCreditCardPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlineCreditCardPaymentSpecified {
            get {
                return allowOnlineCreditCardPaymentFieldSpecified;
            }
            set {
                allowOnlineCreditCardPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether
        /// customer is allowed to use eInvoicing(online payment -bank or
        /// ach) to pay the Invoice
        /// 
        /// </summary>
        public bool AllowOnlineACHPayment {
            get {
                return allowOnlineACHPaymentField;
            }
            set {
                allowOnlineACHPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowOnlineACHPaymentSpecified {
            get {
                return allowOnlineACHPaymentFieldSpecified;
            }
            set {
                allowOnlineACHPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Delivery information
        /// like DeliveryTime, DeliveryType and DeliveryErrorType (if
        /// applicable)
        /// 
        /// </summary>
        public TransactionDeliveryInfo DeliveryInfo {
            get {
                return deliveryInfoField;
            }
            set {
                deliveryInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies ETransaction
        /// status of this transaction. Applicable if ETransaction is
        /// enabled and this transaction is a ETransaction.
        /// 
        /// </summary>
        public ETransactionStatusEnum ETransactionStatus {
            get {
                return eTransactionStatusField;
            }
            set {
                eTransactionStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ETransactionStatusSpecified {
            get {
                return eTransactionStatusFieldSpecified;
            }
            set {
                eTransactionStatusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Base type holding default subject and message for transaction emails.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EmailMessage {
        
        private string subjectField;
        
        private string messageField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Subject for the email
        /// 
        /// </summary>
        public string Subject {
            get {
                return subjectField;
            }
            set {
                subjectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Message body for the email
        /// 
        /// </summary>
        public string Message {
            get {
                return messageField;
            }
            set {
                messageField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// An asset you do not expect to convert to cash
    /// during one year of normal operations.
    /// A fixed asset is usually
    /// something that is necessary for the operation of your business, such
    /// as a truck, cash register, or computer.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class FixedAsset : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private AcquiredAsEnum acquiredAsField;
        
        private bool acquiredAsFieldSpecified;
        
        private string purchaseDescField;
        
        private System.DateTime purchaseDateField;
        
        private bool purchaseDateFieldSpecified;
        
        private decimal purchaseCostField;
        
        private bool purchaseCostFieldSpecified;
        
        private string vendorField;
        
        private ReferenceType assetAccountRefField;
        
        private string salesDescField;
        
        private System.DateTime salesDateField;
        
        private bool salesDateFieldSpecified;
        
        private decimal salesPriceField;
        
        private bool salesPriceFieldSpecified;
        
        private decimal salesExpenseField;
        
        private bool salesExpenseFieldSpecified;
        
        private string locationField;
        
        private string pONumberField;
        
        private string serialNumberField;
        
        private System.DateTime warrantyExpDateField;
        
        private bool warrantyExpDateFieldSpecified;
        
        private string descriptionField;
        
        private string notesField;
        
        private int assetNumField;
        
        private bool assetNumFieldSpecified;
        
        private decimal costBasisField;
        
        private bool costBasisFieldSpecified;
        
        private decimal depreciationField;
        
        private bool depreciationFieldSpecified;
        
        private decimal bookValueField;
        
        private bool bookValueFieldSpecified;
        
        private IntuitAnyType fixedAssetExField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Fixed Asset
        /// Item.[br /]
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive fixed assets may
        /// be hidden from most display purposes and may not be used on
        /// financial transactions.
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies whether the asset is new or used.
        /// This will aid in calculating depreciation.[br /]
        /// Length
        /// Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        public AcquiredAsEnum AcquiredAs {
            get {
                return acquiredAsField;
            }
            set {
                acquiredAsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AcquiredAsSpecified {
            get {
                return acquiredAsFieldSpecified;
            }
            set {
                acquiredAsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// User entered purchase description for the fixed
        /// asset which may include user entered information to further
        /// describe the details of the purchase.
        /// </summary>
        public string PurchaseDesc {
            get {
                return purchaseDescField;
            }
            set {
                purchaseDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the date the asset was purchased or
        /// acquired.[br /]
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime PurchaseDate {
            get {
                return purchaseDateField;
            }
            set {
                purchaseDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PurchaseDateSpecified {
            get {
                return purchaseDateFieldSpecified;
            }
            set {
                purchaseDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the asset's purchase price.
        /// 
        /// </summary>
        public decimal PurchaseCost {
            get {
                return purchaseCostField;
            }
            set {
                purchaseCostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PurchaseCostSpecified {
            get {
                return purchaseCostFieldSpecified;
            }
            set {
                purchaseCostFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the name of the vendor or payee from
        /// whom the asset was purchased.
        /// </summary>
        public string Vendor {
            get {
                return vendorField;
            }
            set {
                vendorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Indicates the Fixed Asset account that tracks
        /// the current value of the asset. If the same account is used for
        /// all fixed assets, the current balance of this account will
        /// represent the current total value of the fixed assets.[br /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// 
        /// </summary>
        public ReferenceType AssetAccountRef {
            get {
                return assetAccountRefField;
            }
            set {
                assetAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// User entered sales description for the fixed
        /// asset which may include user entered information to further
        /// describe the details of the sales.
        /// </summary>
        public string SalesDesc {
            get {
                return salesDescField;
            }
            set {
                salesDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the date the asset was sold.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime SalesDate {
            get {
                return salesDateField;
            }
            set {
                salesDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SalesDateSpecified {
            get {
                return salesDateFieldSpecified;
            }
            set {
                salesDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the amount for which the asset was
        /// sold.
        /// </summary>
        public decimal SalesPrice {
            get {
                return salesPriceField;
            }
            set {
                salesPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SalesPriceSpecified {
            get {
                return salesPriceFieldSpecified;
            }
            set {
                salesPriceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Additional expenses incurred during the sale of
        /// the asset.
        /// </summary>
        public decimal SalesExpense {
            get {
                return salesExpenseField;
            }
            set {
                salesExpenseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SalesExpenseSpecified {
            get {
                return salesExpenseFieldSpecified;
            }
            set {
                salesExpenseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Information about where the asset is located or
        /// has been placed into service.
        /// </summary>
        public string Location {
            get {
                return locationField;
            }
            set {
                locationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The purchase order number if a purchase order
        /// was used to buy the asset.
        /// </summary>
        public string PONumber {
            get {
                return pONumberField;
            }
            set {
                pONumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The serial number of the asset. For a vehicle,
        /// it can be the VIN.
        /// </summary>
        public string SerialNumber {
            get {
                return serialNumberField;
            }
            set {
                serialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The date the warranty for the asset expires.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime WarrantyExpDate {
            get {
                return warrantyExpDateField;
            }
            set {
                warrantyExpDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool WarrantyExpDateSpecified {
            get {
                return warrantyExpDateFieldSpecified;
            }
            set {
                warrantyExpDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Any description of the asset, like maker,
        /// brand, and so on.
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Notes about the asset that might help to track
        /// it properly, such as notes about repairs or upkeep.
        /// 
        /// </summary>
        public string Notes {
            get {
                return notesField;
            }
            set {
                notesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW only: asset number. Maintained by the QB
        /// Fixed Asset Manager.
        /// </summary>
        public int AssetNum {
            get {
                return assetNumField;
            }
            set {
                assetNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AssetNumSpecified {
            get {
                return assetNumFieldSpecified;
            }
            set {
                assetNumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW only: The total cost of the fixed asset.
        /// This can include the cost of improvements or repairs. This
        /// amount is used to calculate depreciation. Maintained by the QB
        /// Fixed Asset Manager.
        /// </summary>
        public decimal CostBasis {
            get {
                return costBasisField;
            }
            set {
                costBasisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CostBasisSpecified {
            get {
                return costBasisFieldSpecified;
            }
            set {
                costBasisFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW only: the total amount of depreciation
        /// expense since the fixed asset was acquired as of the end of the
        /// year. Maintained by the QB Fixed Asset Manager.
        /// 
        /// </summary>
        public decimal Depreciation {
            get {
                return depreciationField;
            }
            set {
                depreciationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DepreciationSpecified {
            get {
                return depreciationFieldSpecified;
            }
            set {
                depreciationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW only: the asset's cost or basis less
        /// accumulated depreciation as of the end of the year. Maintained
        /// by the QB Fixed Asset Manager.
        /// </summary>
        public decimal BookValue {
            get {
                return bookValueField;
            }
            set {
                bookValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BookValueSpecified {
            get {
                return bookValueFieldSpecified;
            }
            set {
                bookValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// FixedAsset
        /// </summary>
        public IntuitAnyType FixedAssetEx {
            get {
                return fixedAssetExField;
            }
            set {
                fixedAssetExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A tax code is used to
    /// track the taxable or non-taxable status of products, services, and
    /// customers. You can assign a sales tax code to each of your products,
    /// services, and customers based on their taxable or non-taxable
    /// status. You can then use these codes to generate reports that
    /// provide information to the tax agencies about the taxable or
    /// non-taxable status of certain sales. [br]See [a
    /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
    /// Tax Model[/a].
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxCode : IntuitEntity, IEntity {
        
        private string nameField;
        
        private string descriptionField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool hiddenField;
        
        private bool hiddenFieldSpecified;
        
        private bool taxableField;
        
        private bool taxableFieldSpecified;
        
        private bool taxGroupField;
        
        private bool taxGroupFieldSpecified;
        
        private TaxRateList salesTaxRateListField;
        
        private TaxRateList purchaseTaxRateListField;
        
        private TaxRateList adjustmentTaxRateListField;
        
        private IntuitAnyType taxCodeExField;
        
        private GTMConfigTypeEnum taxCodeConfigTypeField;
        
        private bool taxCodeConfigTypeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable name
        /// for the tax sales code.[br/]Max. Length: 3 characters.[br
        /// /]Required for the Create request.
        /// Product: QBO
        /// Description: User
        /// recognizable name for the tax sales code.[br/]Max. Length: 10
        /// characters.
        /// Required: ALL
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User entered
        /// description for the sales tax code.[br/]Max Length: 31
        /// characters.
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: False if inactive.
        /// Inactive sales tax codes may be hidden from display and may not
        /// be used on financial transactions.
        /// Filterable: ALL
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if Taxcode needs to be hidden. Active tax codes can be hidden from the display using this.
        /// Filterable: ALL
        /// 
        /// </summary>
        public bool Hidden {
            get {
                return hiddenField;
            }
            set {
                hiddenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HiddenSpecified {
            get {
                return hiddenFieldSpecified;
            }
            set {
                hiddenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: False or null means
        /// meaning non-taxable (default). True means taxable.
        /// 
        /// </summary>
        public bool Taxable {
            get {
                return taxableField;
            }
            set {
                taxableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxableSpecified {
            get {
                return taxableFieldSpecified;
            }
            set {
                taxableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Description: True if this tax code
        /// represents a group of tax rates (a desktop TaxGroupItem), false
        /// if it represents a QuickBooks US TaxCode.
        /// 
        /// </summary>
        public bool TaxGroup {
            get {
                return taxGroupField;
            }
            set {
                taxGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxGroupSpecified {
            get {
                return taxGroupFieldSpecified;
            }
            set {
                taxGroupFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: List of references to
        /// tax rates that apply for sales transactions when this tax code
        /// is used.
        /// 
        /// </summary>
        public TaxRateList SalesTaxRateList {
            get {
                return salesTaxRateListField;
            }
            set {
                salesTaxRateListField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: List of references to
        /// tax rates that apply for purchase transactions when this tax
        /// code is used.
        /// 
        /// </summary>
        public TaxRateList PurchaseTaxRateList {
            get {
                return purchaseTaxRateListField;
            }
            set {
                purchaseTaxRateListField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: List of references to
        /// adjustment tax rates that apply to the transaction.
        /// 
        /// </summary>
        public TaxRateList AdjustmentTaxRateList {
            get {
                return adjustmentTaxRateListField;
            }
            set {
                adjustmentTaxRateListField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for TaxCode
        /// 
        /// </summary>
        public IntuitAnyType TaxCodeEx {
            get {
                return taxCodeExField;
            }
            set {
                taxCodeExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Tax code configuration type tracks
        /// whether the user created the TaxCode or it was System Generated.
        /// 
        /// </summary>
        public GTMConfigTypeEnum TaxCodeConfigType {
            get {
                return taxCodeConfigTypeField;
            }
            set {
                taxCodeConfigTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxCodeConfigTypeSpecified {
            get {
                return taxCodeConfigTypeFieldSpecified;
            }
            set {
                taxCodeConfigTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxRateList {
        
        private TaxRateDetail[] taxRateDetailField;
        
        private string originatingGroupIdField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: TaxRateDetail that
        /// specifies qualified detail of TaxRate
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TaxRateDetail")]
        public TaxRateDetail[] TaxRateDetail {
            get {
                return taxRateDetailField;
            }
            set {
                taxRateDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: opaque internal string
        /// used to correlate the rate list with a QBW TaxGroup item to support
        /// mod of TaxCodes in global tax
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string originatingGroupId {
            get {
                return originatingGroupIdField;
            }
            set {
                originatingGroupIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxRateDetail {
        
        private ReferenceType taxRateRefField;
        
        private TaxTypeApplicablityEnum taxTypeApplicableField;
        
        private bool taxTypeApplicableFieldSpecified;
        
        private int taxOrderField;
        
        private bool taxOrderFieldSpecified;
        
        private int taxOnTaxOrderField;
        
        private bool taxOnTaxOrderFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: TaxRateRef
        /// 
        /// </summary>
        public ReferenceType TaxRateRef {
            get {
                return taxRateRefField;
            }
            set {
                taxRateRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Applicable TaxType enum
        /// 
        /// </summary>
        public TaxTypeApplicablityEnum TaxTypeApplicable {
            get {
                return taxTypeApplicableField;
            }
            set {
                taxTypeApplicableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxTypeApplicableSpecified {
            get {
                return taxTypeApplicableFieldSpecified;
            }
            set {
                taxTypeApplicableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Applicable Tax Order
        /// 
        /// </summary>
        public int TaxOrder {
            get {
                return taxOrderField;
            }
            set {
                taxOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxOrderSpecified {
            get {
                return taxOrderFieldSpecified;
            }
            set {
                taxOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Applicable TaxOnTaxOrder
        /// 
        /// </summary>
        public int TaxOnTaxOrder {
            get {
                return taxOnTaxOrderField;
            }
            set {
                taxOnTaxOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxOnTaxOrderSpecified {
            get {
                return taxOnTaxOrderFieldSpecified;
            }
            set {
                taxOnTaxOrderFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of
    /// ConfigType taxCode taxRate taxAgency
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum GTMConfigTypeEnum {
        
        /// <remarks/>
        SYSTEM_GENERATED,
        
        /// <remarks/>
        USER_DEFINED,
        
        /// <remarks/>
        SCRA_DEFINED,
        
        /// <remarks/>
        HIDDEN_AGENCY,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of
    /// SpecialTaxType
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SpecialTaxTypeEnum {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        ZERO_RATE,
        
        /// <remarks/>
        FOREIGN_TAX,
        
        /// <remarks/>
        REVERSE_CHARGE,
        
        /// <remarks/>
        ADJUSTMENT_RATE,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A sales tax rate specifies
    /// the tax rate for the specific TaxCode.[br]See [a
    /// href="http://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0060_Financial_Management_Services_(v3)/01100_Global_Tax_Model"]Global
    /// Tax Model[/a].
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxRate : IntuitEntity, IEntity {
        
        private string nameField;
        
        private string descriptionField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private decimal rateValueField;
        
        private bool rateValueFieldSpecified;
        
        private ReferenceType agencyRefField;
        
        private ReferenceType taxReturnLineRefField;
        
        private EffectiveTaxRate[] effectiveTaxRateField;
        
        private SpecialTaxTypeEnum specialTaxTypeField;
        
        private bool specialTaxTypeFieldSpecified;
        
        private TaxRateDisplayTypeEnum displayTypeField;
        
        private bool displayTypeFieldSpecified;
        
        private IntuitAnyType taxRateExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable name
        /// for the tax rate.[br /]Max. Length: 31 characters.[br /]Required
        /// for the Create request.
        /// Required: QBW
        /// ValidRange: QBW: Max=31
        /// Filterable: QBW
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User entered
        /// description for the tax rate.[br /]Max Length: 4000 characters.
        /// ValidRange: QBW: Max=4000
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: False or null if
        /// inactive. Inactive sales rate codes may be hidden from display
        /// and may not be used on financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Represents rate value.
        /// Filterable: QBW
        /// 
        /// </summary>
        public decimal RateValue {
            get {
                return rateValueField;
            }
            set {
                rateValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RateValueSpecified {
            get {
                return rateValueFieldSpecified;
            }
            set {
                rateValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Represents Agency
        /// Reference, Vendor Reference in case of QBW, Agency in case of
        /// QBO.
        /// 
        /// </summary>
        public ReferenceType AgencyRef {
            get {
                return agencyRefField;
            }
            set {
                agencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: TaxReturnLine is
        /// representative of SalesTaxReturnLine reference
        /// 
        /// </summary>
        public ReferenceType TaxReturnLineRef {
            get {
                return taxReturnLineRefField;
            }
            set {
                taxReturnLineRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Effective list rates
        /// for different date ranges
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("EffectiveTaxRate")]
        public EffectiveTaxRate[] EffectiveTaxRate {
            get {
                return effectiveTaxRateField;
            }
            set {
                effectiveTaxRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Used for Zero rates
        /// for EC VAT.
        /// How it is used: VAT registered Businesses who receive
        /// goods/services (acquisitions) from other EU countries,
        /// will need to calculate the VAT due, but not paid, on these
        /// acquisitions. The rate of VAT payable is the same that would
        /// have been paid if the goods had been supplied by a UK supplier.
        /// 
        /// </summary>
        public SpecialTaxTypeEnum SpecialTaxType {
            get {
                return specialTaxTypeField;
            }
            set {
                specialTaxTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SpecialTaxTypeSpecified {
            get {
                return specialTaxTypeFieldSpecified;
            }
            set {
                specialTaxTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: DisplayType of a tax
        /// rate, configuration of editability and display on forms
        /// 
        /// </summary>
        public TaxRateDisplayTypeEnum DisplayType {
            get {
                return displayTypeField;
            }
            set {
                displayTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DisplayTypeSpecified {
            get {
                return displayTypeFieldSpecified;
            }
            set {
                displayTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for TaxRate
        /// 
        /// </summary>
        public IntuitAnyType TaxRateEx {
            get {
                return taxRateExField;
            }
            set {
                taxRateExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: EffectiveTaxRate detail
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EffectiveTaxRate {
        
        private decimal rateValueField;
        
        private bool rateValueFieldSpecified;
        
        private System.DateTime effectiveDateField;
        
        private bool effectiveDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private IntuitAnyType effectiveTaxRateExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Represents rate value.
        /// 
        /// </summary>
        public decimal RateValue {
            get {
                return rateValueField;
            }
            set {
                rateValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RateValueSpecified {
            get {
                return rateValueFieldSpecified;
            }
            set {
                rateValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Effective starting date
        /// for which this taxrate is applicable
        /// 
        /// </summary>
        public System.DateTime EffectiveDate {
            get {
                return effectiveDateField;
            }
            set {
                effectiveDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EffectiveDateSpecified {
            get {
                return effectiveDateFieldSpecified;
            }
            set {
                effectiveDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: End date of this taxrate
        /// applicability
        /// 
        /// </summary>
        public System.DateTime EndDate {
            get {
                return endDateField;
            }
            set {
                endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndDateSpecified {
            get {
                return endDateFieldSpecified;
            }
            set {
                endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only:
        /// extension place holder for TaxLine.
        /// 
        /// </summary>
        public IntuitAnyType EffectiveTaxRateEx {
            get {
                return effectiveTaxRateExField;
            }
            set {
                effectiveTaxRateExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Account is a component of a Chart Of Accounts, and
    /// is part of a Ledger. Used to record a total monetary amount
    /// allocated against a specific use.
    /// Accounts are one of five basic types: asset, liability, revenue (income),
    /// expenses, or equity.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MasterAccount))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Account : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool subAccountField;
        
        private bool subAccountFieldSpecified;
        
        private ReferenceType parentRefField;
        
        private string descriptionField;
        
        private string fullyQualifiedNameField;
        
        private string accountAliasField;
        
        private string txnLocationTypeField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private AccountClassificationEnum classificationField;
        
        private bool classificationFieldSpecified;
        
        private AccountTypeEnum accountTypeField;
        
        private bool accountTypeFieldSpecified;
        
        private string accountSubTypeField;
        
        private ReferenceType[] accountPurposesField;
        
        private string acctNumField;
        
        private string acctNumExtnField;
        
        private string bankNumField;
        
        private decimal openingBalanceField;
        
        private bool openingBalanceFieldSpecified;
        
        private System.DateTime openingBalanceDateField;
        
        private bool openingBalanceDateFieldSpecified;
        
        private decimal currentBalanceField;
        
        private bool currentBalanceFieldSpecified;
        
        private decimal currentBalanceWithSubAccountsField;
        
        private bool currentBalanceWithSubAccountsFieldSpecified;
        
        private ReferenceType currencyRefField;
        
        private bool taxAccountField;
        
        private bool taxAccountFieldSpecified;
        
        private ReferenceType taxCodeRefField;
        
        private bool onlineBankingEnabledField;
        
        private bool onlineBankingEnabledFieldSpecified;
        
        private string fINameField;
        
        private ReferenceType journalCodeRefField;
        
        private IntuitAnyType accountExField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Account.[br /]
        /// Product: ALL
        /// Required: ALL
        /// Filterable: QBW
        /// ValidRange: QBW: Max=31
        /// ValidRange: QBO: Max=100
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the Account is a SubAccount or Not. True if
        /// subaccount, false or null if it is top-level account
        /// 
        /// </summary>
        public bool SubAccount {
            get {
                return subAccountField;
            }
            set {
                subAccountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SubAccountSpecified {
            get {
                return subAccountFieldSpecified;
            }
            set {
                subAccountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the Parent AccountId if this
        /// represents a SubAccount. Else null or empty
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User entered
        /// description for the account, which may include user entered
        /// information to guide bookkeepers/accountants in deciding what
        /// journal entries to post to the account.
        /// ValidRange: QBW: Max=200
        /// ValidRange: QBO: Max=100
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name
        /// of the entity. The fully qualified name prepends the topmost
        /// parent, followed by each sub element separated by colons. Takes
        /// the form of: [br /] Parent:Account1:SubAccount1:SubAccount2
        /// InputType: ReadOnly
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Display Name of the
        /// account that will be shown in Transaction Forms based on Account
        /// Category
        /// ValidRange: QBO: Max=100
        /// 
        /// </summary>
        public string AccountAlias {
            get {
                return accountAliasField;
            }
            set {
                accountAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Location Type for the
        /// Transaction.
        /// ValidRange: QBO: Max=50
        /// 
        /// </summary>
        public string TxnLocationType {
            get {
                return txnLocationTypeField;
            }
            set {
                txnLocationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Whether or not active
        /// inactive accounts may be hidden from most display purposes and
        /// may not be posted to.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: 5 types of
        /// classification an account classified. Suggested examples of
        /// account type are Asset, Equity, Expense, Liability, Revenue
        /// Filterable: QBW
        /// 
        /// </summary>
        public AccountClassificationEnum Classification {
            get {
                return classificationField;
            }
            set {
                classificationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ClassificationSpecified {
            get {
                return classificationFieldSpecified;
            }
            set {
                classificationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type is a detailed
        /// account classification that specifies the use of this account.
        /// 16 type of account subtypes available in AccountTypeEnum
        /// Filterable: QBW
        /// Required: ALL
        /// 
        /// </summary>
        public AccountTypeEnum AccountType {
            get {
                return accountTypeField;
            }
            set {
                accountTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AccountTypeSpecified {
            get {
                return accountTypeFieldSpecified;
            }
            set {
                accountTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: AccountSubTypeEnum
        /// specificies QBO on detail type. If not specified default value
        /// are listed for each SubType
        /// 
        /// </summary>
        public string AccountSubType {
            get {
                return accountSubTypeField;
            }
            set {
                accountSubTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Internal use only: Account purpose indicates the mapping of the
        /// chart-of-account to a purpose (eg: DEFAULT_QB_CASH_CHECKING_ACCOUNT). A chart-of-account
        /// can have multiple account purpose mapping.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AccountPurposes")]
        public ReferenceType[] AccountPurposes {
            get {
                return accountPurposesField;
            }
            set {
                accountPurposesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User entered/specified account number
        /// to help the user in identifying the account within the
        /// chart-of-accounts and in deciding what should be posted to the
        /// account.
        /// 
        /// </summary>
        public string AcctNum {
            get {
                return acctNumField;
            }
            set {
                acctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: An extension to the base account number that can be added to
        /// Customer A/R or Supplier A/P accounts.
        /// 
        /// </summary>
        public string AcctNumExtn {
            get {
                return acctNumExtnField;
            }
            set {
                acctNumExtnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Bank Account Number,
        /// should include routing number whatever else depending upon the
        /// context, this may be the credit card number or the checking
        /// account number, etc.
        /// ValidRange: QBW: max=25
        /// 
        /// </summary>
        public string BankNum {
            get {
                return bankNumField;
            }
            set {
                bankNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the Opening
        /// Balance amount when creating a new Balance Sheet account.
        /// 
        /// </summary>
        public decimal OpeningBalance {
            get {
                return openingBalanceField;
            }
            set {
                openingBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OpeningBalanceSpecified {
            get {
                return openingBalanceFieldSpecified;
            }
            set {
                openingBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the Date of
        /// the Opening Balance amount when creating a new Balance Sheet
        /// account.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime OpeningBalanceDate {
            get {
                return openingBalanceDateField;
            }
            set {
                openingBalanceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OpeningBalanceDateSpecified {
            get {
                return openingBalanceDateFieldSpecified;
            }
            set {
                openingBalanceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the balance
        /// amount for the current Account. Valid for Balance Sheet
        /// accounts.
        /// InputType: QBW: ReadOnly
        /// 
        /// </summary>
        public decimal CurrentBalance {
            get {
                return currentBalanceField;
            }
            set {
                currentBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CurrentBalanceSpecified {
            get {
                return currentBalanceFieldSpecified;
            }
            set {
                currentBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the
        /// cumulative balance amount for the current Account and all its
        /// sub-accounts.
        /// InputType: QBW: ReadOnly
        /// 
        /// </summary>
        public decimal CurrentBalanceWithSubAccounts {
            get {
                return currentBalanceWithSubAccountsField;
            }
            set {
                currentBalanceWithSubAccountsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CurrentBalanceWithSubAccountsSpecified {
            get {
                return currentBalanceWithSubAccountsFieldSpecified;
            }
            set {
                currentBalanceWithSubAccountsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// Currency that this account will hold the amounts in.
        /// 
        /// </summary>
        public ReferenceType CurrencyRef {
            get {
                return currencyRefField;
            }
            set {
                currencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Describes if the
        /// account is taxable
        /// 
        /// </summary>
        public bool TaxAccount {
            get {
                return taxAccountField;
            }
            set {
                taxAccountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxAccountSpecified {
            get {
                return taxAccountFieldSpecified;
            }
            set {
                taxAccountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: If the account is
        /// taxable, refers to taxcode reference if applicable
        /// I18n: QBW:
        /// GlobalOnly
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates if the
        /// Account is linked with Online Banking feature (automatically
        /// download transactions) of QuickBooks Online or QuickBooks
        /// Desktop. Null or false indicates not linked with online banking.
        /// True if Online banking based download is enabled for this
        /// account.
        /// InputType: ALL: ReadOnly
        /// 
        /// </summary>
        public bool OnlineBankingEnabled {
            get {
                return onlineBankingEnabledField;
            }
            set {
                onlineBankingEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OnlineBankingEnabledSpecified {
            get {
                return onlineBankingEnabledFieldSpecified;
            }
            set {
                onlineBankingEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the name of
        /// financial institution name if Account is linked with Online
        /// banking. Valid only if account is online banking enabled. This
        /// is optional and read-only.
        /// InputType: ALL: ReadOnly
        /// 
        /// </summary>
        public string FIName {
            get {
                return fINameField;
            }
            set {
                fINameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The Journal Code that is associated with the account. This is
        /// required only for Bank accounts. This is applicable only in FR.
        /// InputType: ALL: ReadOnly
        /// 
        /// </summary>
        public ReferenceType JournalCodeRef {
            get {
                return journalCodeRefField;
            }
            set {
                journalCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: extension place holder
        /// for Account.
        /// 
        /// </summary>
        public IntuitAnyType AccountEx {
            get {
                return accountExField;
            }
            set {
                accountExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Master Account is the list of accounts in the
    /// master list. The master list is the complete list of accounts
    /// prescribed by the French Government. These accounts can be created
    /// in the company on a need basis. The account create API needs to be
    /// used to create an account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class MasterAccount : Account {
        
        private bool accountExistsInCompanyField;
        
        private bool accountExistsInCompanyFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies whether the account has been created in the company.
        /// 
        /// </summary>
        public bool AccountExistsInCompany {
            get {
                return accountExistsInCompanyField;
            }
            set {
                accountExistsInCompanyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AccountExistsInCompanySpecified {
            get {
                return accountExistsInCompanyFieldSpecified;
            }
            set {
                accountExistsInCompanyFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Cash based expense type definition
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CashPurchase {
        
        private ReferenceType accountRefField;
        
        /// <remarks/>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial Transaction information that pertains to
    /// the entire Check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditCardPurchase {
        
        private ReferenceType accountRefField;
        
        private bool creditField;
        
        private bool creditFieldSpecified;
        
        /// <remarks/>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// If false or null it represents a CreditCard
        /// charge expense, true represent Credit (money-in or returned)
        /// 
        /// </summary>
        public bool Credit {
            get {
                return creditField;
            }
            set {
                creditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditSpecified {
            get {
                return creditFieldSpecified;
            }
            set {
                creditFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial Transaction information that pertains to
    /// the entire Check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CheckPurchase {
        
        private ReferenceType accountRefField;
        
        private PhysicalAddress payeeAddrField;
        
        private string memoOnCheckField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        /// <remarks/>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the payment should be sent.
        /// 
        /// </summary>
        public PhysicalAddress PayeeAddr {
            get {
                return payeeAddrField;
            }
            set {
                payeeAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// In case of check expense, MemoOnCheck represent
        /// the data written on the check as message written to the Payee to
        /// physically read on the check
        /// 
        /// </summary>
        public string MemoOnCheck {
            get {
                return memoOnCheckField;
            }
            set {
                memoOnCheckField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// ReadToPrint is a flag indicating if the Check is
        /// ready for printing
        /// 
        /// </summary>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial Transaction information that pertains to
    /// the entire Check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Purchase : Transaction {
        
        private ReferenceType accountRefField;
        
        private ReferenceType paymentMethodRefField;
        
        private string paymentRefNumField;
        
        private PaymentTypeEnum paymentTypeField;
        
        private bool paymentTypeFieldSpecified;
        
        private object itemField;
        
        private ReferenceType entityRefField;
        
        private bool creditField;
        
        private bool creditFieldSpecified;
        
        private PhysicalAddress remitToAddrField;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private string txnIdField;
        
        private string txnNumField;
        
        private string memoField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        private GlobalTaxCalculationEnum globalTaxCalculationField;
        
        private bool globalTaxCalculationFieldSpecified;
        
        private IntuitAnyType purchaseExField;
        
        private decimal lessCISField;
        
        private bool lessCISFieldSpecified;
        
        private bool includeInAnnualTPARField;
        
        private bool includeInAnnualTPARFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// Specifies the account reference. Check should
        /// have bank account, CreditCard should specify credit card account
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// PaymentMethod.
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The reference number
        /// for the payment received (I.e. Check # for a check, envelope #
        /// for a cash donation, CreditCardTransactionID for a credit card
        /// payment)
        /// 
        /// </summary>
        public string PaymentRefNum {
            get {
                return paymentRefNumField;
            }
            set {
                paymentRefNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Required element. No defaults. Expense Type
        /// can be Cash, Check or CreditCard
        /// Cash based expense is not
        /// supported by QBW.
        /// Filterable: QBW
        /// 
        /// </summary>
        public PaymentTypeEnum PaymentType {
            get {
                return paymentTypeField;
            }
            set {
                paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentTypeSpecified {
            get {
                return paymentTypeFieldSpecified;
            }
            set {
                paymentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CheckPayment", typeof(CheckPayment))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPayment", typeof(CreditCardPayment))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the party to whom a expense is
        /// associated with. Can be Customer, Vendor, Employee (or OtherName
        /// in case of QBW)
        /// 
        /// </summary>
        public ReferenceType EntityRef {
            get {
                return entityRefField;
            }
            set {
                entityRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// If Credit is Null or False, it is considered as
        /// Charge. If true, the CreditCard represents a Refund. Valid only
        /// for CreditCard transaction
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Credit {
            get {
                return creditField;
            }
            set {
                creditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditSpecified {
            get {
                return creditFieldSpecified;
            }
            set {
                creditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the payment should be
        /// sent.Output only.
        /// 
        /// </summary>
        public PhysicalAddress RemitToAddr {
            get {
                return remitToAddrField;
            }
            set {
                remitToAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The total amount due, determined by taking the
        /// sum of all lines associated. This includes all charges,
        /// allowances, taxes, discounts, etc...
        /// [b]QuickBooks Notes[/b][br
        /// /]
        /// Non QB-writable.
        /// Output only field in case of QBO
        /// Filterable:
        /// QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string TxnId {
            get {
                return txnIdField;
            }
            set {
                txnIdField = value;
            }
        }
        
        /// <remarks/>
        public string TxnNum {
            get {
                return txnNumField;
            }
            set {
                txnNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Memo that will be printed in check in case of
        /// Check purchase, Memo appears on the expense report for
        /// CreditCard, Memo for CashPurchase
        /// 
        /// </summary>
        public string Memo {
            get {
                return memoField;
            }
            set {
                memoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// PrintStatus if to be printed or already printed
        /// information
        /// 
        /// </summary>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the
        /// GlobalTax model if the model inclusive of tax, exclusive of
        /// taxes or not applicable
        /// 
        /// </summary>
        public GlobalTaxCalculationEnum GlobalTaxCalculation {
            get {
                return globalTaxCalculationField;
            }
            set {
                globalTaxCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GlobalTaxCalculationSpecified {
            get {
                return globalTaxCalculationFieldSpecified;
            }
            set {
                globalTaxCalculationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Purchase.
        /// </summary>
        public IntuitAnyType PurchaseEx {
            get {
                return purchaseExField;
            }
            set {
                purchaseExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO: Indicates the
        /// less cis amount of the transaction, specific to UK region companies
        /// 
        /// </summary>
        public decimal LessCIS {
            get {
                return lessCISField;
            }
            set {
                lessCISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LessCISSpecified {
            get {
                return lessCISFieldSpecified;
            }
            set {
                lessCISFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO Only
        /// Description: True if the Purchase should be included in annual TPAR, specific to AU region.
        /// 
        /// </summary>
        public bool IncludeInAnnualTPAR {
            get {
                return includeInAnnualTPARField;
            }
            set {
                includeInAnnualTPARField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IncludeInAnnualTPARSpecified {
            get {
                return includeInAnnualTPARFieldSpecified;
            }
            set {
                includeInAnnualTPARFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial Transaction information that pertains to
    /// the entire Bill.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PurchaseOrder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VendorCredit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bill))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PurchaseByVendor : Transaction {
        
        private ReferenceType vendorRefField;
        
        private ReferenceType aPAccountRefField;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private EmailAddress billEmailField;
        
        private EmailAddress replyEmailField;
        
        private string memoField;
        
        private GlobalTaxCalculationEnum globalTaxCalculationField;
        
        private bool globalTaxCalculationFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the vendor reference for this transaction
        /// Filterable: QBW
        /// 
        /// </summary>
        public ReferenceType VendorRef {
            get {
                return vendorRefField;
            }
            set {
                vendorRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies which AP account the bill will be
        /// credited to. Many/most small businesses have a single AP
        /// account, so the account is implied. When specified, the account
        /// must be a Liability account, and further, the sub-type must be
        /// of type "Payables"
        /// [b]QuickBooks Notes[/b][br /]
        /// The AP Account
        /// should always be specified or a default will be used.
        /// 
        /// </summary>
        public ReferenceType APAccountRef {
            get {
                return aPAccountRefField;
            }
            set {
                aPAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The total amount due, determined by taking the sum of all lines
        /// associated. This includes all charges, allowances, taxes,
        /// discounts, etc...
        /// [b]QuickBooks Notes[/b][br /]
        /// Non QB-writable.
        /// Output only field in case of QBO
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The email address to
        /// which this bill is/was sent. [br/] Non QB-writable.
        /// 
        /// </summary>
        public EmailAddress BillEmail {
            get {
                return billEmailField;
            }
            set {
                billEmailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The email address to
        /// which inquiries about the bill may be directed. (Also
        /// appropriate for paypal payments). [br/] Non QB-writable.
        /// 
        /// </summary>
        public EmailAddress ReplyEmail {
            get {
                return replyEmailField;
            }
            set {
                replyEmailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW only. Memo to be visible to Payee
        /// 
        /// </summary>
        public string Memo {
            get {
                return memoField;
            }
            set {
                memoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the
        /// GlobalTax model if the model inclusive of tax, exclusive of
        /// taxes or not applicable
        /// 
        /// </summary>
        public GlobalTaxCalculationEnum GlobalTaxCalculation {
            get {
                return globalTaxCalculationField;
            }
            set {
                globalTaxCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GlobalTaxCalculationSpecified {
            get {
                return globalTaxCalculationFieldSpecified;
            }
            set {
                globalTaxCalculationFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Bill is an AP transaction representing a
    /// request-for-payment from a third party for goods/services rendered
    /// and/or received
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Bill : PurchaseByVendor {
        
        private ReferenceType payerRefField;
        
        private ReferenceType salesTermRefField;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private PhysicalAddress remitToAddrField;
        
        private PhysicalAddress shipAddrField;
        
        private PhysicalAddress vendorAddrField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private decimal homeBalanceField;
        
        private bool homeBalanceFieldSpecified;
        
        private IntuitAnyType billExField;
        
        private decimal lessCISField;
        
        private bool lessCISFieldSpecified;
        
        private bool includeInAnnualTPARField;
        
        private bool includeInAnnualTPARFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Payer information
        /// 
        /// </summary>
        public ReferenceType PayerRef {
            get {
                return payerRefField;
            }
            set {
                payerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// SalesTerm Reference for the bill
        /// 
        /// </summary>
        public ReferenceType SalesTermRef {
            get {
                return salesTermRefField;
            }
            set {
                salesTermRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The nominal date by which the bill must be
        /// paid, not including any early-payment discount incentives, or
        /// late payment penalties.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the payment should be sent.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public PhysicalAddress RemitToAddr {
            get {
                return remitToAddrField;
            }
            set {
                remitToAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the vendor shipped or will
        /// ship any goods associated with the purchase.
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Vendor Mailing Address
        /// 
        /// </summary>
        public PhysicalAddress VendorAddr {
            get {
                return vendorAddrField;
            }
            set {
                vendorAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The unpaid amount of the bill. When paid-in-full, balance will
        /// be zero.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non QB-writable.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The unpaid amount of the bill in home currency. Available only
        /// for companies where multicurrency is enabled. When paid-in-full,
        /// home balance will be zero.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non
        /// QB-writable.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal HomeBalance {
            get {
                return homeBalanceField;
            }
            set {
                homeBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeBalanceSpecified {
            get {
                return homeBalanceFieldSpecified;
            }
            set {
                homeBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Bill.
        /// </summary>
        public IntuitAnyType BillEx {
            get {
                return billExField;
            }
            set {
                billExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: QBO: Indicates the
        /// less cis amount of the transaction, specific to UK region companies
        /// 
        /// </summary>
        public decimal LessCIS {
            get {
                return lessCISField;
            }
            set {
                lessCISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LessCISSpecified {
            get {
                return lessCISFieldSpecified;
            }
            set {
                lessCISFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO Only
        /// Description: True if the Bill should be included in annual TPAR, specific to AU region.
        /// 
        /// </summary>
        public bool IncludeInAnnualTPAR {
            get {
                return includeInAnnualTPARField;
            }
            set {
                includeInAnnualTPARField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IncludeInAnnualTPARSpecified {
            get {
                return includeInAnnualTPARFieldSpecified;
            }
            set {
                includeInAnnualTPARFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Bill is an AP transaction representing a
    /// request-for-payment from a third party for goods/services rendered
    /// and/or received
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class VendorCredit : PurchaseByVendor {
        
        private PhysicalAddress vendorAddrField;
        
        private IntuitAnyType vendorCreditExField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private bool includeInAnnualTPARField;
        
        private bool includeInAnnualTPARFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Vendor Mailing Address
        /// 
        /// </summary>
        public PhysicalAddress VendorAddr {
            get {
                return vendorAddrField;
            }
            set {
                vendorAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Bill extensible element to qualify account.
        /// </summary>
        public IntuitAnyType VendorCreditEx {
            get {
                return vendorCreditExField;
            }
            set {
                vendorCreditExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The unpaid amount of the bill. When paid-in-full, balance will
        /// be zero.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non QB-writable.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO Only
        /// Description: True if the VendorCredit should be included in annual TPAR, specific to AU region.
        /// 
        /// </summary>
        public bool IncludeInAnnualTPAR {
            get {
                return includeInAnnualTPARField;
            }
            set {
                includeInAnnualTPARField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IncludeInAnnualTPARSpecified {
            get {
                return includeInAnnualTPARFieldSpecified;
            }
            set {
                includeInAnnualTPARFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a request for
    /// payment for goods or services that have been sold.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class StatementCharge : Transaction {
        
        private bool creditField;
        
        private bool creditFieldSpecified;
        
        private ReferenceType customerRefField;
        
        private ReferenceType remitToRefField;
        
        private ReferenceType aRAccountRefField;
        
        private ReferenceType classRefField;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private System.DateTime billedDateField;
        
        private bool billedDateFieldSpecified;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private IntuitAnyType statementChargeExField;
        
        /// <remarks/>
        /// <summary>
        /// If Credit is Null or False, it is considered as
        /// Charge. If true, the StatementCharge represents a Refund
        /// 
        /// </summary>
        public bool Credit {
            get {
                return creditField;
            }
            set {
                creditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditSpecified {
            get {
                return creditFieldSpecified;
            }
            set {
                creditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents Customer (or Job)Reference
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Identifies the party or location that the
        /// payment is to be remitted to or sent to.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public ReferenceType RemitToRef {
            get {
                return remitToRefField;
            }
            set {
                remitToRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// ARAccountReferenceGroup Identifies the AR
        /// Account to be used for this Credit Memo.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// The AR Account should always be specified or a
        /// default will be used.
        /// 
        /// </summary>
        public ReferenceType ARAccountRef {
            get {
                return aRAccountRefField;
            }
            set {
                aRAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date when the Charge is to be paid.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date when the customer Statement was created
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime BilledDate {
            get {
                return billedDateField;
            }
            set {
                billedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BilledDateSpecified {
            get {
                return billedDateFieldSpecified;
            }
            set {
                billedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Indicates the total amount of the entity
        /// associated. This includes the total of all the charges,
        /// allowances and taxes.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non
        /// QB-writable.
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// StatementCharge
        /// </summary>
        public IntuitAnyType StatementChargeEx {
            get {
                return statementChargeExField;
            }
            set {
                statementChargeExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Classes provide a way to track different segments
    /// of the business, and to break down the income and expenses for each
    /// segment. Classes can apply to all transactions, so they're not tied
    /// to a particular client or project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Class : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool subClassField;
        
        private bool subClassFieldSpecified;
        
        private ReferenceType parentRefField;
        
        private string fullyQualifiedNameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private IntuitAnyType classExField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Class.[br /]
        /// Length Restriction:
        /// QBO: 100 characters
        /// QBW: 31 characters
        /// Sortable: ALL
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Class is a SubClass or Not. True
        /// if subclass, false or null if it is top-level class
        /// 
        /// </summary>
        public bool SubClass {
            get {
                return subClassField;
            }
            set {
                subClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SubClassSpecified {
            get {
                return subClassFieldSpecified;
            }
            set {
                subClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Reference to parent class entity
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Output Only. Fully
        /// qualified name of the entity. The fully qualified name prepends
        /// the topmost parent, followed by each sub element separated by
        /// colons. Takes the form of: [br
        /// /]Parent:class1:Subclass1:Subclass2
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive classes may be
        /// hidden from most display purposes and may not be used on
        /// financial transactions
        /// Filterable: ALL
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Class extensible element
        /// </summary>
        public IntuitAnyType ClassEx {
            get {
                return classExField;
            }
            set {
                classExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Journal Code is a compliance requirement in FR. A
    /// journal code is assigned to each transaction and it depends on
    /// whether it is a income or a expense.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class JournalCode : IntuitEntity, IEntity {
        
        private string nameField;
        
        private string typeField;
        
        private string descriptionField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private IntuitAnyType journalCodeExField;
        
        /// <remarks/>
        /// <summary>
        /// The two letter name for the journal code
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The type of the Journal Code. The applicable
        /// values are those exposed through the JournalCodeTypeEnum.
        /// 
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The description of the Journal Code
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not Journal codes may be hidden for
        /// display purposes
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Journal Code extensible element
        /// </summary>
        public IntuitAnyType JournalCodeEx {
            get {
                return journalCodeExField;
            }
            set {
                journalCodeExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a payment from a
    /// customer applied to one or more sales transactions
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Payment : Transaction {
        
        private ReferenceType customerRefField;
        
        private ReferenceType remitToRefField;
        
        private ReferenceType aRAccountRefField;
        
        private ReferenceType depositToAccountRefField;
        
        private ReferenceType paymentMethodRefField;
        
        private string paymentRefNumField;
        
        private PaymentTypeEnum paymentTypeField;
        
        private bool paymentTypeFieldSpecified;
        
        private object itemField;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private decimal unappliedAmtField;
        
        private bool unappliedAmtFieldSpecified;
        
        private bool processPaymentField;
        
        private bool processPaymentFieldSpecified;
        
        private IntuitAnyType paymentExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Represents Customer
        /// (or Job)Reference
        /// Filterable: QBW
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Identifies the party or location that the
        /// payment is to be remitted to or sent to.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public ReferenceType RemitToRef {
            get {
                return remitToRefField;
            }
            set {
                remitToRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// ARAccountReferenceGroup Identifies the AR
        /// Account to be used for this Payment.
        /// [b]QuickBooks Notes[/b][br
        /// /]
        /// The AR Account should always be specified or a default will be
        /// used.
        /// 
        /// </summary>
        public ReferenceType ARAccountRef {
            get {
                return aRAccountRefField;
            }
            set {
                aRAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Optional asset account specification to
        /// designate the account the payment money needs to be deposited
        /// to.
        /// [b]QuickBooks Notes[/b][br /]
        /// If not specified, the
        /// Undeposited Funds account will be used.
        /// 
        /// </summary>
        public ReferenceType DepositToAccountRef {
            get {
                return depositToAccountRefField;
            }
            set {
                depositToAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// PaymentMethod.
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The reference number
        /// for the payment received (I.e. Check # for a check, envelope #
        /// for a cash donation, CreditCardTransactionID for a credit card
        /// payment)
        /// 
        /// </summary>
        public string PaymentRefNum {
            get {
                return paymentRefNumField;
            }
            set {
                paymentRefNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Valid values are Cash, Check, CreditCard, or
        /// Other. No defaults. Cash based expense is not supported by
        /// QuickBooks Windows. Not applicable to Estimate and
        /// SalesOrder.[br /]
        /// 
        /// </summary>
        public PaymentTypeEnum PaymentType {
            get {
                return paymentTypeField;
            }
            set {
                paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentTypeSpecified {
            get {
                return paymentTypeFieldSpecified;
            }
            set {
                paymentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CheckPayment", typeof(CheckPayment))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPayment", typeof(CreditCardPayment))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the total
        /// amount of the entity associated. This includes the total of all
        /// the payments from the Payment Details.
        /// [b]QuickBooks Notes[/b][br
        /// /]
        /// Non QB-writable.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Indicates the amount that has not been applied
        /// to pay amounts owed for sales transactions.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public decimal UnappliedAmt {
            get {
                return unappliedAmtField;
            }
            set {
                unappliedAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UnappliedAmtSpecified {
            get {
                return unappliedAmtFieldSpecified;
            }
            set {
                unappliedAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Indicates that the payment should be processed
        /// by merchant account service. Valid for QBO companies with credit
        /// card processing.
        /// QBO only field.
        /// 
        /// </summary>
        public bool ProcessPayment {
            get {
                return processPaymentField;
            }
            set {
                processPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ProcessPaymentSpecified {
            get {
                return processPaymentFieldSpecified;
            }
            set {
                processPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Payment
        /// </summary>
        public IntuitAnyType PaymentEx {
            get {
                return paymentExField;
            }
            set {
                paymentExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Method of payment for received goods.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PaymentMethod : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private string typeField;
        
        private IntuitAnyType paymentMethodExField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the payment
        /// method.[br /]
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 31
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive payment methods
        /// may be hidden from most display purposes and may not be used on
        /// financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Defines the type, or the ways the payment was
        /// made. For QBW, the acceptable values are defined in
        /// PaymentMethodEnum. For QBO, this field is restricted to
        /// CREDIT_CARD or NON_CREDIT_CARD.
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// PaymentMethod
        /// </summary>
        public IntuitAnyType PaymentMethodEx {
            get {
                return paymentMethodExField;
            }
            set {
                paymentMethodExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Constituent line of a
    /// group item.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ItemComponentLine {
        
        private ReferenceType itemRefField;
        
        private decimal qtyField;
        
        private bool qtyFieldSpecified;
        
        private UOMRef uOMRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to an Item. For an Assembly item, this must be a
        /// reference to an Inventory Item needed in the assembly.
        /// 
        /// </summary>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Quantity of items.
        /// 
        /// </summary>
        public decimal Qty {
            get {
                return qtyField;
            }
            set {
                qtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QtySpecified {
            get {
                return qtyFieldSpecified;
            }
            set {
                qtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the unit of measure (within UOMSetRef) for this line
        /// item. Examples: "each" or "box".
        /// 
        /// </summary>
        public UOMRef UOMRef {
            get {
                return uOMRefField;
            }
            set {
                uOMRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Contains the details of a
    /// group item.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ItemGroupDetail {
        
        private ItemComponentLine[] itemGroupLineField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Contains the line details of a group item.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ItemGroupLine")]
        public ItemComponentLine[] ItemGroupLine {
            get {
                return itemGroupLineField;
            }
            set {
                itemGroupLineField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Department provide a way to track different
    /// segments of the business, and to break down the income and expenses
    /// for each segment. Department can apply to all transactions, so
    /// they're not tied to a particular client or project.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Department : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool subDepartmentField;
        
        private bool subDepartmentFieldSpecified;
        
        private ReferenceType parentRefField;
        
        private string fullyQualifiedNameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private IntuitAnyType departmentExField;
        
        private PhysicalAddress addressField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Class.[br /]
        /// Length Restriction:
        /// QBO: 100 characters
        /// QBW: 1024
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Department is a SubDepartment or
        /// Not. True if subdepartment, false or null if it is top-level
        /// department
        /// 
        /// </summary>
        public bool SubDepartment {
            get {
                return subDepartmentField;
            }
            set {
                subDepartmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SubDepartmentSpecified {
            get {
                return subDepartmentFieldSpecified;
            }
            set {
                subDepartmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Reference to parent class entity
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Output Only. Fully
        /// qualified name of the entity. The fully qualified name prepends
        /// the topmost parent, followed by each sub element separated by
        /// colons. Takes the form of: [br /]
        /// Parent:Location1:SubLocation1:SubLocation2
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive classes may be
        /// hidden from most display purposes and may not be used on
        /// financial transactions
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// DepartmentEx extensible element
        /// </summary>
        public IntuitAnyType DepartmentEx {
            get {
                return departmentExField;
            }
            set {
                departmentExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address of the Department
        /// </summary>
        public PhysicalAddress Address {
            get {
                return addressField;
            }
            set {
                addressField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Contains the details of an
    /// inventory assembly item.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ItemAssemblyDetail {
        
        private ItemComponentLine[] itemAssemblyLineField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Contains the line details of an inventory assembly item.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ItemAssemblyLine")]
        public ItemComponentLine[] ItemAssemblyLine {
            get {
                return itemAssemblyLineField;
            }
            set {
                itemAssemblyLineField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: The Item resource
    /// represents any product or service that is sold or purchased.
    /// Inventory items are not currently supported.
    /// Product: QBW
    /// Description: An item is a thing that your company buys, sells,
    /// or re-sells, such as products, shipping and handling charges,
    /// discounts, and sales tax (if applicable). An item is shown as a line
    /// on an invoice or other sales form. The Item.Type property, which
    /// specifies how the item is used, may have one of the following
    /// values: [li]Assembly: The Assembly item allows you combine inventory
    /// part items and other assembly items (subassemblies) into a single
    /// item by defining a Bill of Materials, that lists the component parts
    /// of the assembly item. You can also include the cost of building the
    /// assembly item by adding the non-inventory part items, service items,
    /// and other charge items to the Bill of Materials. [/li][li] Fixed
    /// Asset: The Fixed Asset item represents those business assets that
    /// you do not convert to cash one year of normal operation. A fixed
    /// asset is usually something that is integral to your business
    /// operations. For example, a truck or computer. [/li][li]Group: The
    /// Group item helps you to quickly enter a group of individual items
    /// that you often purchase or sell together. [li]Inventory: The
    /// Inventory item is used to track merchandise which your business
    /// purchases, stocks as inventory, and re-sells. QuickBooks tracks the
    /// current number of inventory items in stock and the average value of
    /// the inventory after the purchase and sale of every item.
    /// [/li][li]Other Charge: The Other Charge item is used to charge
    /// customers for the mileage expense.[/li] [li]Product The Product item
    /// is used to record the sales information of a product.
    /// [/li][li]Payment: The Payment item subtracts the amount of a
    /// customer payment from the total amount of an invoice or statement.
    /// You must create a payment item if you receive payment for an invoice
    /// or statement in parts. If you receive full payment at the time of
    /// sale, use a sales receipt form instead of an invoice with a payment
    /// item.[/li] [li]Service: The Service item is used for the services
    /// that you charge on the purchase. For example, including specialized
    /// labor, consulting hours, and professional fees. [/li][li]Subtotal:
    /// The Subtotal item is used when you want the total of all the items.
    /// You can use this item to apply a percentage discount or
    /// surcharge.[/li]
    /// Business Rules: [li]The item name must be unique.
    /// [/li][li]The item type must not be NULL. [/li][li]The item cannot
    /// define both unit price and unit price percent simultaneously.
    /// [/li][li]For the Service, Product, and Other Charge items, you must
    /// specify the ID or name of the expense account or both. [/li][li]If
    /// the purchase order cost is specified for the Service, Product, and
    /// Other Charge items, you must specify the ID or name of the expense
    /// account or both.[/li] For the Inventory and Assembly items, you must
    /// specify: [li]the ID or name of the income account or both
    /// [/li][li]the ID or name of the cogs account or both [/li][li]the ID
    /// or name of the asset account or both [/li][li]For the Group item,
    /// you must specify the tax ID or tax name or both.[/li] For the Fixed
    /// Asset item, you must: [li]set the asset account type to Asset[/li]
    /// [li]specify the purchase date [/li][li]specify the ID or name of the
    /// income account or both[/li]
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Item : IntuitEntity, IEntity {
        
        private string nameField;
        
        private string skuField;
        
        private string descriptionField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool subItemField;
        
        private bool subItemFieldSpecified;
        
        private ReferenceType parentRefField;
        
        private int levelField;
        
        private bool levelFieldSpecified;
        
        private string fullyQualifiedNameField;
        
        private bool taxableField;
        
        private bool taxableFieldSpecified;
        
        private bool salesTaxIncludedField;
        
        private bool salesTaxIncludedFieldSpecified;
        
        private bool percentBasedField;
        
        private bool percentBasedFieldSpecified;
        
        private decimal unitPriceField;
        
        private bool unitPriceFieldSpecified;
        
        private decimal ratePercentField;
        
        private bool ratePercentFieldSpecified;
        
        private ItemTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        private ReferenceType paymentMethodRefField;
        
        private ReferenceType uOMSetRefField;
        
        private ReferenceType incomeAccountRefField;
        
        private string purchaseDescField;
        
        private bool purchaseTaxIncludedField;
        
        private bool purchaseTaxIncludedFieldSpecified;
        
        private decimal purchaseCostField;
        
        private bool purchaseCostFieldSpecified;
        
        private ReferenceType expenseAccountRefField;
        
        private ReferenceType cOGSAccountRefField;
        
        private ReferenceType assetAccountRefField;
        
        private ReferenceType prefVendorRefField;
        
        private decimal avgCostField;
        
        private bool avgCostFieldSpecified;
        
        private bool trackQtyOnHandField;
        
        private bool trackQtyOnHandFieldSpecified;
        
        private decimal qtyOnHandField;
        
        private bool qtyOnHandFieldSpecified;
        
        private decimal qtyOnPurchaseOrderField;
        
        private bool qtyOnPurchaseOrderFieldSpecified;
        
        private decimal qtyOnSalesOrderField;
        
        private bool qtyOnSalesOrderFieldSpecified;
        
        private decimal reorderPointField;
        
        private bool reorderPointFieldSpecified;
        
        private string manPartNumField;
        
        private ReferenceType depositToAccountRefField;
        
        private ReferenceType salesTaxCodeRefField;
        
        private ReferenceType purchaseTaxCodeRefField;
        
        private System.DateTime invStartDateField;
        
        private bool invStartDateFieldSpecified;
        
        private decimal buildPointField;
        
        private bool buildPointFieldSpecified;
        
        private bool printGroupedItemsField;
        
        private bool printGroupedItemsFieldSpecified;
        
        private bool specialItemField;
        
        private bool specialItemFieldSpecified;
        
        private SpecialItemTypeEnum specialItemTypeField;
        
        private bool specialItemTypeFieldSpecified;
        
        private ItemComponentLine[] itemGroupDetailField;
        
        private ItemComponentLine[] itemAssemblyDetailField;
        
        private decimal abatementRateField;
        
        private bool abatementRateFieldSpecified;
        
        private decimal reverseChargeRateField;
        
        private bool reverseChargeRateFieldSpecified;
        
        private string serviceTypeField;
        
        private string itemCategoryTypeField;
        
        private IntuitAnyType itemExField;
        
        private ReferenceType taxClassificationRefField;
        
        private string uQCDisplayTextField;
        
        private string uQCIdField;
        
        private ReferenceType classRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable name
        /// for the Item.[br /]Max. length: 31 characters.
        /// Product: QBO
        /// Description: User recognizable name for the Item.[br /]Max.
        /// length: 100 characters.
        /// Filterable: ALL
        /// Sortable: ALL
        /// Required: QBW
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Stock Keeping Unit -
        /// User entered item identifier that identifies an item uniquely
        /// [br /]Max. length: 100 characters.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public string Sku {
            get {
                return skuField;
            }
            set {
                skuField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User entered
        /// description for the item that describes the details of the
        /// service or product.[br /]Max. length: 4000 characters.
        /// Product:
        /// QBO
        /// Description: User entered description for the item that
        /// describes the details of the service or product.[br /]Max.
        /// length: 4000 characters.
        /// Filterable: QBO
        /// Sortable: QBO
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if active.
        /// Inactive items may be hidden from display and may not be used in
        /// financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the item is a
        /// subitem; false or null indicates a top-level item.
        /// 
        /// </summary>
        public bool SubItem {
            get {
                return subItemField;
            }
            set {
                subItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SubItemSpecified {
            get {
                return subItemFieldSpecified;
            }
            set {
                subItemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// item's parent entity.
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the level of
        /// the item, 0 if top level parent, otherwise specifies the depth
        /// from the top parent.
        /// 
        /// </summary>
        public int Level {
            get {
                return levelField;
            }
            set {
                levelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LevelSpecified {
            get {
                return levelFieldSpecified;
            }
            set {
                levelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name
        /// of the entity. The fully qualified name prepends the topmost
        /// parent, followed by each sub element separated by colons. Takes
        /// the form of: [br /] Parent:Customer:Job:Sub-job [br /] Limited
        /// to 5 levels. Max. length: 41 characters (single name) or 209
        /// characters (fully qualified name).
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the item is
        /// subject to tax.
        /// 
        /// </summary>
        public bool Taxable {
            get {
                return taxableField;
            }
            set {
                taxableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxableSpecified {
            get {
                return taxableFieldSpecified;
            }
            set {
                taxableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the sales tax
        /// is included in the item amount, and therefore is not calculated
        /// for the transaction.
        /// 
        /// </summary>
        public bool SalesTaxIncluded {
            get {
                return salesTaxIncludedField;
            }
            set {
                salesTaxIncludedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SalesTaxIncludedSpecified {
            get {
                return salesTaxIncludedFieldSpecified;
            }
            set {
                salesTaxIncludedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the tax amount
        /// is percentage based.
        /// 
        /// </summary>
        public bool PercentBased {
            get {
                return percentBasedField;
            }
            set {
                percentBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PercentBasedSpecified {
            get {
                return percentBasedFieldSpecified;
            }
            set {
                percentBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Monetary value of the
        /// service or product, as expressed in the home currency.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal UnitPrice {
            get {
                return unitPriceField;
            }
            set {
                unitPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UnitPriceSpecified {
            get {
                return unitPriceFieldSpecified;
            }
            set {
                unitPriceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The tax amount
        /// expressed as a percent of charges entered in the current
        /// transaction. To enter a rate of 10% use 10.0, not 0.01.[br
        /// /]Applicable to the Service, OtherCharge or Part (Non-Inventory)
        /// item types only, and only if the Purchase part of the item does
        /// not exist, that is, the item is not used as a reimbursable item,
        /// or as a part in assemblies.
        /// 
        /// </summary>
        public decimal RatePercent {
            get {
                return ratePercentField;
            }
            set {
                ratePercentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RatePercentSpecified {
            get {
                return ratePercentFieldSpecified;
            }
            set {
                ratePercentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Classification that
        /// specifies the use of this item. See the description at the top
        /// of the Item entity page for details. [br /]
        /// Filterable: ALL
        /// 
        /// </summary>
        public ItemTypeEnum Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TypeSpecified {
            get {
                return typeFieldSpecified;
            }
            set {
                typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a
        /// PaymentMethod for an item of type Payment.
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the unit
        /// of measure set (UOM) entity used by this item.
        /// 
        /// </summary>
        public ReferenceType UOMSetRef {
            get {
                return uOMSetRefField;
            }
            set {
                uOMSetRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// posting account, that is, the account that records the proceeds
        /// from the sale of this item.[br /]Required for the the following
        /// types: Assembly, Inventory, Other Charge, Product, Service.
        /// Required: ALL
        /// 
        /// </summary>
        public ReferenceType IncomeAccountRef {
            get {
                return incomeAccountRefField;
            }
            set {
                incomeAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User entered purchase
        /// description for the item.
        /// 
        /// </summary>
        public string PurchaseDesc {
            get {
                return purchaseDescField;
            }
            set {
                purchaseDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the purchase
        /// tax is included in the item amount, and therefore is not
        /// calculated for the transaction.
        /// 
        /// </summary>
        public bool PurchaseTaxIncluded {
            get {
                return purchaseTaxIncludedField;
            }
            set {
                purchaseTaxIncludedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PurchaseTaxIncludedSpecified {
            get {
                return purchaseTaxIncludedFieldSpecified;
            }
            set {
                purchaseTaxIncludedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Amount paid when
        /// buying or ordering the item, as expressed in the home currency.
        /// 
        /// </summary>
        public decimal PurchaseCost {
            get {
                return purchaseCostField;
            }
            set {
                purchaseCostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PurchaseCostSpecified {
            get {
                return purchaseCostFieldSpecified;
            }
            set {
                purchaseCostFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// expense account used to pay the vendor for this item.[br /]Note:
        /// for a service item, this may also be an equity account to record
        /// a draw against the company equity to pay for the service.[br
        /// /]If the Purchase information (PurchaseDesc,
        /// PurchaseTaxIncluded, PurchaseCost, etc.) is provided, this
        /// account is required for the the following item types: Other
        /// Charge, Product, Service.
        /// Required: ALL
        /// 
        /// </summary>
        public ReferenceType ExpenseAccountRef {
            get {
                return expenseAccountRefField;
            }
            set {
                expenseAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Cost
        /// of Goods Sold account for the inventory item.[br /]Required for
        /// the the following item types: Assembly, Inventory.
        /// Required: ALL
        /// 
        /// </summary>
        public ReferenceType COGSAccountRef {
            get {
                return cOGSAccountRefField;
            }
            set {
                cOGSAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// Inventory Asset account that tracks the current value of the
        /// inventory. If the same account is used for all inventory items,
        /// the current balance of this account will represent the current
        /// total value of the inventory.[br /]Required for the the
        /// following item types: Assembly, Inventory.
        /// Required: ALL
        /// 
        /// </summary>
        public ReferenceType AssetAccountRef {
            get {
                return assetAccountRefField;
            }
            set {
                assetAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// preferred vendor of this item.
        /// 
        /// </summary>
        public ReferenceType PrefVendorRef {
            get {
                return prefVendorRefField;
            }
            set {
                prefVendorRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Average cost of the
        /// item, expressed in the home currency.
        /// 
        /// </summary>
        public decimal AvgCost {
            get {
                return avgCostField;
            }
            set {
                avgCostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AvgCostSpecified {
            get {
                return avgCostFieldSpecified;
            }
            set {
                avgCostFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Quantity on hand to be
        /// tracked.
        /// 
        /// </summary>
        public bool TrackQtyOnHand {
            get {
                return trackQtyOnHandField;
            }
            set {
                trackQtyOnHandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackQtyOnHandSpecified {
            get {
                return trackQtyOnHandFieldSpecified;
            }
            set {
                trackQtyOnHandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Current quantity of
        /// the inventory items available for sale.
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal QtyOnHand {
            get {
                return qtyOnHandField;
            }
            set {
                qtyOnHandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QtyOnHandSpecified {
            get {
                return qtyOnHandFieldSpecified;
            }
            set {
                qtyOnHandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Quantity of the
        /// inventory item being ordered, for which there is a purchase
        /// order issued.
        /// 
        /// </summary>
        public decimal QtyOnPurchaseOrder {
            get {
                return qtyOnPurchaseOrderField;
            }
            set {
                qtyOnPurchaseOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QtyOnPurchaseOrderSpecified {
            get {
                return qtyOnPurchaseOrderFieldSpecified;
            }
            set {
                qtyOnPurchaseOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Quantity of the
        /// inventory item that is placed on sales orders.
        /// 
        /// </summary>
        public decimal QtyOnSalesOrder {
            get {
                return qtyOnSalesOrderField;
            }
            set {
                qtyOnSalesOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QtyOnSalesOrderSpecified {
            get {
                return qtyOnSalesOrderFieldSpecified;
            }
            set {
                qtyOnSalesOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Quantity on hand
        /// threshold below which a purchase order against this inventory
        /// item should be issued. When the QtyOnHand is less than the
        /// ReorderPoint, the QuickBooks purchase order system will prompt
        /// the user to reorder.
        /// 
        /// </summary>
        public decimal ReorderPoint {
            get {
                return reorderPointField;
            }
            set {
                reorderPointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReorderPointSpecified {
            get {
                return reorderPointFieldSpecified;
            }
            set {
                reorderPointFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Identifier provided by
        /// manufacturer for the Item, for example, the model number.[br
        /// /]Applicable for the the following item types: Inventory,
        /// Product.
        /// 
        /// </summary>
        public string ManPartNum {
            get {
                return manPartNumField;
            }
            set {
                manPartNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Optional reference to
        /// the account in which the payment money is deposited.[br /]If not
        /// specified, the Undeposited Funds account will be used.
        /// Applicable to the Payment item type only.
        /// 
        /// </summary>
        public ReferenceType DepositToAccountRef {
            get {
                return depositToAccountRefField;
            }
            set {
                depositToAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the sales tax code for the item.[br /]Applicable
        /// to the Service, Other Charge, Part (Non-Inventory), Inventory
        /// and Assembly item types only.
        /// 
        /// </summary>
        public ReferenceType SalesTaxCodeRef {
            get {
                return salesTaxCodeRefField;
            }
            set {
                salesTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// purchase tax code for the item.[br /]Applicable to the Service,
        /// Other Charge, and Part (Non-Inventory) item types.
        /// 
        /// </summary>
        public ReferenceType PurchaseTaxCodeRef {
            get {
                return purchaseTaxCodeRefField;
            }
            set {
                purchaseTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date of the opening
        /// balance for the inventory transaction. QuickBooks creates the
        /// Opening Balance inventory transaction as of the given date, and
        /// calculates the total value by multiplying the cost by the
        /// quantity on hand.[br /]Applies to the Quantity On Hand and Total
        /// Value.[br /]Applicable to the Inventory and Assembly item types
        /// only.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime InvStartDate {
            get {
                return invStartDateField;
            }
            set {
                invStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool InvStartDateSpecified {
            get {
                return invStartDateFieldSpecified;
            }
            set {
                invStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Assembly item
        /// QuantityOnHand threshold below which more assemblies should be
        /// built.[br /]Applicable to the Assembly Item type only.[br /]When
        /// he quantity of the assembly item gets below the BuildPoint
        /// number, QuickBooks will remind the user to build more.
        /// 
        /// </summary>
        public decimal BuildPoint {
            get {
                return buildPointField;
            }
            set {
                buildPointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BuildPointSpecified {
            get {
                return buildPointFieldSpecified;
            }
            set {
                buildPointFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Lets us know if the user wants to display the subitems as a
        /// group. Applicable to items of Group type only.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool PrintGroupedItems {
            get {
                return printGroupedItemsField;
            }
            set {
                printGroupedItemsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintGroupedItemsSpecified {
            get {
                return printGroupedItemsFieldSpecified;
            }
            set {
                printGroupedItemsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if this is a
        /// special item used by QuickBooks in certain accounting functions,
        /// including miscellaneous charges that do not fall into the
        /// categories of service, labor, materials, or parts. Examples
        /// include delivery charges, setup fees, and service charges.
        /// 
        /// </summary>
        public bool SpecialItem {
            get {
                return specialItemField;
            }
            set {
                specialItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SpecialItemSpecified {
            get {
                return specialItemFieldSpecified;
            }
            set {
                specialItemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description Type of special item,
        /// if SpecialItem is true.[br /]
        /// 
        /// </summary>
        public SpecialItemTypeEnum SpecialItemType {
            get {
                return specialItemTypeField;
            }
            set {
                specialItemTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SpecialItemTypeSpecified {
            get {
                return specialItemTypeFieldSpecified;
            }
            set {
                specialItemTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Contains the detailed
        /// components of the group. Applicable to a group item only.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ItemGroupLine", IsNullable=false)]
        public ItemComponentLine[] ItemGroupDetail {
            get {
                return itemGroupDetailField;
            }
            set {
                itemGroupDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Contains the detailed
        /// inventory parts used when the assembly is built. Applicable to
        /// an inventory assembly item only.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ItemAssemblyLine", IsNullable=false)]
        public ItemComponentLine[] ItemAssemblyDetail {
            get {
                return itemAssemblyDetailField;
            }
            set {
                itemAssemblyDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: India sales tax
        /// abatement rate.
        /// 
        /// </summary>
        public decimal AbatementRate {
            get {
                return abatementRateField;
            }
            set {
                abatementRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AbatementRateSpecified {
            get {
                return abatementRateFieldSpecified;
            }
            set {
                abatementRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: India sales tax
        /// reverse charge rate.
        /// 
        /// </summary>
        public decimal ReverseChargeRate {
            get {
                return reverseChargeRateField;
            }
            set {
                reverseChargeRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReverseChargeRateSpecified {
            get {
                return reverseChargeRateFieldSpecified;
            }
            set {
                reverseChargeRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: India sales tax
        /// service type, see ServiceTypeEnum for values.
        /// 
        /// </summary>
        public string ServiceType {
            get {
                return serviceTypeField;
            }
            set {
                serviceTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Categorizes the given item as a product or a service. The
        /// applicable values are those exposed through the
        /// ItemCategoryTypeEnum. This is currently applicable only in FR
        /// region.
        /// 
        /// </summary>
        public string ItemCategoryType {
            get {
                return itemCategoryTypeField;
            }
            set {
                itemCategoryTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Item
        /// </summary>
        public IntuitAnyType ItemEx {
            get {
                return itemExField;
            }
            set {
                itemExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the
        /// SalesTaxCode for this item.
        /// 
        /// </summary>
        public ReferenceType TaxClassificationRef {
            get {
                return taxClassificationRefField;
            }
            set {
                taxClassificationRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unit of measure (UQC) text to be displayed for this line item in Invoice/Sales forms.
        /// Applicable for IN Region.
        /// 
        /// </summary>
        public string UQCDisplayText {
            get {
                return uQCDisplayTextField;
            }
            set {
                uQCDisplayTextField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Unit of measure for this line item as per the standard unit (UQC) defined under the GST rule. Example: KGS- kilograms, MTR- metres, SQF-  square feet. It will be shown in GSTR1 report.
        /// Applicable for IN Region.
        /// 
        /// </summary>
        public string UQCId {
            get {
                return uQCIdField;
            }
            set {
                uQCIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Reference to the Class
        /// for this item.
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: The Term entity represents
    /// the terms under which a sale is made, typically expressed in the
    /// form of days due after the goods are received. Optionally, a
    /// discount of the total amount may be applied if payment is made
    /// within a stipulated time. For example, net 30 indicates that payment
    /// is due within 30 days. A term of 2%/15 net 60 indicates that payment
    /// is due within 60 days, with a discount of 2% if payment is made
    /// within 15 days. Term also supports: an absolute due date, a number
    /// of days from a start date, a percent discount, or an absolute
    /// discount.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Term : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private string typeField;
        
        private decimal discountPercentField;
        
        private bool discountPercentFieldSpecified;
        
        private object[] itemsField;
        
        private ItemsChoiceType[] itemsElementNameField;
        
        private IntuitAnyType salesTermExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: User recognizable name
        /// for the term, for example, "Net 30".
        /// ValidRange: QBW: max=31
        /// ValidRange: QBO: Max=31
        /// Required: ALL
        /// Filterable: QBO
        /// Sortable: ALL
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: If true, this entity
        /// is currently enabled for use by QuickBooks.
        /// Filterable: ALL
        /// Default Value: true
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Type of the Sales
        /// Term. Valid values: Standard or DateDriven, as defined by
        /// SalesTermTypeEnum. [br /] If dueDays is not null, the Type is
        /// Standard else DateDriven.
        /// InputType: ALL: ReadOnly
        /// 
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Discount percentage
        /// available against an amount if paid within the days specified by
        /// DiscountDays.
        /// ValidRange: ALL: Min=0, Max=100
        /// 
        /// </summary>
        public decimal DiscountPercent {
            get {
                return discountPercentField;
            }
            set {
                discountPercentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DiscountPercentSpecified {
            get {
                return discountPercentFieldSpecified;
            }
            set {
                discountPercentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DayOfMonthDue", typeof(string), DataType="positiveInteger")]
        [System.Xml.Serialization.XmlElementAttribute("DiscountDayOfMonth", typeof(string), DataType="positiveInteger")]
        [System.Xml.Serialization.XmlElementAttribute("DiscountDays", typeof(int))]
        [System.Xml.Serialization.XmlElementAttribute("DueDays", typeof(int))]
        [System.Xml.Serialization.XmlElementAttribute("DueNextMonthDays", typeof(string), DataType="positiveInteger")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemsChoiceType[] ItemsElementName {
            get {
                return itemsElementNameField;
            }
            set {
                itemsElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description:- Internal use only:
        /// extension place holder for SalesTermEx
        /// 
        /// </summary>
        public IntuitAnyType SalesTermEx {
            get {
                return salesTermExField;
            }
            set {
                salesTermExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        DayOfMonthDue,
        
        /// <remarks/>
        DiscountDayOfMonth,
        
        /// <remarks/>
        DiscountDays,
        
        /// <remarks/>
        DueDays,
        
        /// <remarks/>
        DueNextMonthDays,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BillPaymentCheck {
        
        private ReferenceType bankAccountRefField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        private CheckPayment checkDetailField;
        
        private PhysicalAddress payeeAddrField;
        
        private IntuitAnyType billPaymentCheckExField;
        
        /// <remarks/>
        public ReferenceType BankAccountRef {
            get {
                return bankAccountRefField;
            }
            set {
                bankAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported
        /// field.[/i]
        /// 
        /// </summary>
        public CheckPayment CheckDetail {
            get {
                return checkDetailField;
            }
            set {
                checkDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the payment should be sent.
        /// 
        /// </summary>
        public PhysicalAddress PayeeAddr {
            get {
                return payeeAddrField;
            }
            set {
                payeeAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// BillPaymentCheck.
        /// </summary>
        public IntuitAnyType BillPaymentCheckEx {
            get {
                return billPaymentCheckExField;
            }
            set {
                billPaymentCheckExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BillPaymentCreditCard {
        
        private ReferenceType cCAccountRefField;
        
        private CreditCardPayment cCDetailField;
        
        private IntuitAnyType billPaymentCreditCardExField;
        
        /// <remarks/>
        public ReferenceType CCAccountRef {
            get {
                return cCAccountRefField;
            }
            set {
                cCAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public CreditCardPayment CCDetail {
            get {
                return cCDetailField;
            }
            set {
                cCDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// BillPayTypeCreditCard
        /// </summary>
        public IntuitAnyType BillPaymentCreditCardEx {
            get {
                return billPaymentCreditCardExField;
            }
            set {
                billPaymentCreditCardExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a Payment by
    /// check issued to pay one or more bills received from 3rd party
    /// (vendor) for purchased goods or services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BillPayment : Transaction {
        
        private ReferenceType vendorRefField;
        
        private PhysicalAddress vendorAddrField;
        
        private ReferenceType aPAccountRefField;
        
        private BillPaymentTypeEnum payTypeField;
        
        private bool payTypeFieldSpecified;
        
        private object itemField;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private IntuitAnyType billPaymentExField;
        
        /// <remarks/>
        /// <summary>
        /// Identifies the party or organization that
        /// originated the purchase of the goods, services or BillPayment.
        /// [b]QuickBooks Notes[/b][br /]
        /// Valid Vendor Name or Id is required
        /// for the create operation for Bill Payment transactions.[br /]
        /// Required for the create operation.
        /// 
        /// </summary>
        public ReferenceType VendorRef {
            get {
                return vendorRefField;
            }
            set {
                vendorRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Vendor Mailing Address
        /// 
        /// </summary>
        public PhysicalAddress VendorAddr {
            get {
                return vendorAddrField;
            }
            set {
                vendorAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Optional AP account specification for bill
        /// payment transactions. Most small businesses have a single AP
        /// account, so the account is implied. When specified, the account
        /// must be a liability account - and further, must be of the
        /// sub-type "Payables".
        /// [b]QuickBooks Notes[/b][br /]
        /// The AP Account
        /// should always be specified or a default will be used.
        /// 
        /// </summary>
        public ReferenceType APAccountRef {
            get {
                return aPAccountRefField;
            }
            set {
                aPAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Filterable: QBW
        /// 
        /// </summary>
        public BillPaymentTypeEnum PayType {
            get {
                return payTypeField;
            }
            set {
                payTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PayTypeSpecified {
            get {
                return payTypeFieldSpecified;
            }
            set {
                payTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CheckPayment", typeof(BillPaymentCheck))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPayment", typeof(BillPaymentCreditCard))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The total amount paid,
        /// determined by taking the sum of all lines associated.
        /// InputType:
        /// QBW: ReadOnly
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// BillPay
        /// </summary>
        public IntuitAnyType BillPaymentEx {
            get {
                return billPaymentExField;
            }
            set {
                billPaymentExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CashBackInfo {
        
        private ReferenceType accountRefField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private string memoField;
        
        /// <remarks/>
        /// <summary>
        /// AccountReferenceGroup Identifies the Asset
        /// Account (bank account) to be used for this Cash back.
        /// [b]QuickBooks Notes[/b][br /]
        /// Required for the create operation.
        /// [br /]
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Memo {
            get {
                return memoField;
            }
            set {
                memoField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Transaction recording a payment from the customer
    /// held in the Undeposited Funds account into the Bank account.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Deposit : Transaction {
        
        private ReferenceType depositToAccountRefField;
        
        private CashBackInfo cashBackField;
        
        private GlobalTaxCalculationEnum globalTaxCalculationField;
        
        private bool globalTaxCalculationFieldSpecified;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private decimal homeTotalAmtField;
        
        private bool homeTotalAmtFieldSpecified;
        
        private IntuitAnyType depositExField;
        
        /// <remarks/>
        /// <summary>
        /// DepositToAccountReferenceGroup Identifies the
        /// Asset Account (bank account) to be used for this Deposit.
        /// [b]QuickBooks Notes[/b][br /]
        /// Required for the create operation.
        /// [br /]
        /// 
        /// </summary>
        public ReferenceType DepositToAccountRef {
            get {
                return depositToAccountRefField;
            }
            set {
                depositToAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public CashBackInfo CashBack {
            get {
                return cashBackField;
            }
            set {
                cashBackField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the
        /// GlobalTax model if the model inclusive of tax, exclusive of
        /// taxes or not applicable
        /// 
        /// </summary>
        public GlobalTaxCalculationEnum GlobalTaxCalculation {
            get {
                return globalTaxCalculationField;
            }
            set {
                globalTaxCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GlobalTaxCalculationSpecified {
            get {
                return globalTaxCalculationFieldSpecified;
            }
            set {
                globalTaxCalculationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Total amount of Deposit.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Total amount of the
        /// transaction in the home currency for multi-currency enabled
        /// companies. Single currency companies will not have this field.
        /// Includes the total of all the charges, allowances and taxes.
        /// Calculated by QuickBooks business logic. Cannot be written to
        /// QuickBooks.
        /// 
        /// </summary>
        public decimal HomeTotalAmt {
            get {
                return homeTotalAmtField;
            }
            set {
                homeTotalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeTotalAmtSpecified {
            get {
                return homeTotalAmtFieldSpecified;
            }
            set {
                homeTotalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Deposit
        /// </summary>
        public IntuitAnyType DepositEx {
            get {
                return depositExField;
            }
            set {
                depositExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing transfer of
    /// funds between accounts.
    /// Non QB-writable.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Transfer : Transaction {
        
        private ReferenceType fromAccountRefField;
        
        private ReferenceType toAccountRefField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private ReferenceType classRefField;
        
        private IntuitAnyType transferExField;
        
        /// <remarks/>
        /// <summary>
        /// Must be a Balance Sheet account.
        /// 
        /// </summary>
        public ReferenceType FromAccountRef {
            get {
                return fromAccountRefField;
            }
            set {
                fromAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Must be a Balance Sheet account.
        /// 
        /// </summary>
        public ReferenceType ToAccountRef {
            get {
                return toAccountRefField;
            }
            set {
                toAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Total amount of the transfer.
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Transfer
        /// </summary>
        public IntuitAnyType TransferEx {
            get {
                return transferExField;
            }
            set {
                transferExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// PurchaseOrder is a non-posting transaction
    /// representing a request to purchase goods or services from a third
    /// party.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PurchaseOrder : PurchaseByVendor {
        
        private ReferenceType taxCodeRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType reimbursableInfoRefField;
        
        private ReferenceType salesTermRefField;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private System.DateTime expectedDateField;
        
        private bool expectedDateFieldSpecified;
        
        private PhysicalAddress vendorAddrField;
        
        private ReferenceType shipToField;
        
        private ReferenceType itemField;
        
        private ItemChoiceType2 itemElementNameField;
        
        private PhysicalAddress shipAddrField;
        
        private ReferenceType shipMethodRefField;
        
        private string fOBField;
        
        private EmailAddress pOEmailField;
        
        private ReferenceType templateRefField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        private EmailStatusEnum emailStatusField;
        
        private bool emailStatusFieldSpecified;
        
        private bool manuallyClosedField;
        
        private bool manuallyClosedFieldSpecified;
        
        private PurchaseOrderStatusEnum pOStatusField;
        
        private bool pOStatusFieldSpecified;
        
        private IntuitAnyType purchaseOrderExField;
        
        /// <remarks/>
        /// <summary>
        /// Represents the TaxCode Reference with respect
        /// to the purchase[br /]
        /// 
        /// </summary>
        public ReferenceType TaxCodeRef {
            get {
                return taxCodeRefField;
            }
            set {
                taxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Information about the Customer and actual Job
        /// or Project the expense must be reimbursed for.
        /// 
        /// </summary>
        public ReferenceType ReimbursableInfoRef {
            get {
                return reimbursableInfoRefField;
            }
            set {
                reimbursableInfoRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType SalesTermRef {
            get {
                return salesTermRefField;
            }
            set {
                salesTermRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The nominal date by which the bill must be
        /// paid, not including any early-payment discount incentives, or
        /// late payment penalties.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The date when the delivery of the product is
        /// expected.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ExpectedDate {
            get {
                return expectedDateField;
            }
            set {
                expectedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ExpectedDateSpecified {
            get {
                return expectedDateFieldSpecified;
            }
            set {
                expectedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the payment should be sent.
        /// [b]QuickBooks Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public PhysicalAddress VendorAddr {
            get {
                return vendorAddrField;
            }
            set {
                vendorAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Ship to Entity Reference.
        /// 
        /// </summary>
        public ReferenceType ShipTo {
            get {
                return shipToField;
            }
            set {
                shipToField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DropShipToEntity", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySiteRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ReferenceType AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType2 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Address to which the vendor shipped or will
        /// ship any goods associated with the purchase.
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ShipMethodRef {
            get {
                return shipMethodRefField;
            }
            set {
                shipMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// "Free On Board", specifies the terms between
        /// buyer and seller regarding transportation costs; does not have
        /// any bookkeeping implications.
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        public string FOB {
            get {
                return fOBField;
            }
            set {
                fOBField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The email address to which this purchase order
        /// is/was sent.
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        public EmailAddress POEmail {
            get {
                return pOEmailField;
            }
            set {
                pOEmailField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType TemplateRef {
            get {
                return templateRefField;
            }
            set {
                templateRefField = value;
            }
        }
        
        /// <remarks/>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public EmailStatusEnum EmailStatus {
            get {
                return emailStatusField;
            }
            set {
                emailStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EmailStatusSpecified {
            get {
                return emailStatusFieldSpecified;
            }
            set {
                emailStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The entire transaction, or individual items are
        /// manually closed, i.e. they may not be received.
        /// 
        /// </summary>
        public bool ManuallyClosed {
            get {
                return manuallyClosedField;
            }
            set {
                manuallyClosedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ManuallyClosedSpecified {
            get {
                return manuallyClosedFieldSpecified;
            }
            set {
                manuallyClosedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public PurchaseOrderStatusEnum POStatus {
            get {
                return pOStatusField;
            }
            set {
                pOStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool POStatusSpecified {
            get {
                return pOStatusFieldSpecified;
            }
            set {
                pOStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// PurchaseOrder
        /// </summary>
        public IntuitAnyType PurchaseOrderEx {
            get {
                return purchaseOrderExField;
            }
            set {
                purchaseOrderExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType2 {
        
        /// <remarks/>
        DropShipToEntity,
        
        /// <remarks/>
        InventorySiteRef,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: A sales order is a
    /// financial transaction that represents a request received from a
    /// customer to purchase products or services. Sales orders help you
    /// manage the sale of products and services your customers order. For
    /// example, a sales order tracks inventory that is on back order for a
    /// customer. Sales Orders are supported only in QuickBooks Premier
    /// (desktop) and above. However, if you are accessing a company file
    /// created in Premier and above from a lesser edition of QuickBooks
    /// (such as Pro), you can do queries against SalesOrders. Using sales
    /// orders is optional.
    /// Endpoint: services.intuit.com
    /// Business Rules:
    /// [li]A sales order must have at least one line that describes the
    /// item. [/li][li]A sales order must have a reference to a customer in
    /// the [/li][li]If you submit a query with the filter
    /// IncludeDiscountLineDetails, the system retrieves either
    /// DiscountAmount or DiscountRatePercent with associated values[/li]
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesOrder : SalesTransaction {
        
        private bool manuallyClosedField;
        
        private bool manuallyClosedFieldSpecified;
        
        private IntuitAnyType salesOrderExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The entire
        /// transaction, or individual items are maually closed, i.e. not
        /// invoiced.
        /// 
        /// </summary>
        public bool ManuallyClosed {
            get {
                return manuallyClosedField;
            }
            set {
                manuallyClosedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ManuallyClosedSpecified {
            get {
                return manuallyClosedFieldSpecified;
            }
            set {
                manuallyClosedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// SalesOrder
        /// </summary>
        public IntuitAnyType SalesOrderEx {
            get {
                return salesOrderExField;
            }
            set {
                salesOrderExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a refund (or
    /// credit) of payment or part of a payment for goods or services that
    /// have been sold.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditMemo : SalesTransaction {
        
        private decimal remainingCreditField;
        
        private bool remainingCreditFieldSpecified;
        
        private ReferenceType invoiceRefField;
        
        private IntuitAnyType creditMemoExField;
        
        /// <remarks/>
        /// <summary>
        /// Indicates the total credit amount still
        /// available to apply towards the payment.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public decimal RemainingCredit {
            get {
                return remainingCreditField;
            }
            set {
                remainingCreditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RemainingCreditSpecified {
            get {
                return remainingCreditFieldSpecified;
            }
            set {
                remainingCreditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: A credit memo needs to have an invoice number to save successfully
        /// Applicable for IN Region.
        /// 
        /// </summary>
        public ReferenceType InvoiceRef {
            get {
                return invoiceRefField;
            }
            set {
                invoiceRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// CreditMemo
        /// </summary>
        public IntuitAnyType CreditMemoEx {
            get {
                return creditMemoExField;
            }
            set {
                creditMemoExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a refund (or
    /// credit) of payment or part of a payment for goods or services that
    /// have been sold.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class RefundReceipt : SalesTransaction {
        
        private decimal remainingCreditField;
        
        private bool remainingCreditFieldSpecified;
        
        private IntuitAnyType refundReceiptExField;
        
        /// <remarks/>
        /// <summary>
        /// Indicates the total credit amount still
        /// available to apply towards the payment.
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Non QB-writable.
        /// 
        /// </summary>
        public decimal RemainingCredit {
            get {
                return remainingCreditField;
            }
            set {
                remainingCreditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RemainingCreditSpecified {
            get {
                return remainingCreditFieldSpecified;
            }
            set {
                remainingCreditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Refund
        /// </summary>
        public IntuitAnyType RefundReceiptEx {
            get {
                return refundReceiptExField;
            }
            set {
                refundReceiptExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing recording of a Credit Card balance payment.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CreditCardPaymentTxn : Transaction {
        
        private ReferenceType creditCardAccountRefField;
        
        private ReferenceType bankAccountRefField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private ReferenceType vendorRefField;
        
        private string checkNumField;
        
        private PrintStatusEnum printStatusField;
        
        private bool printStatusFieldSpecified;
        
        private string memoField;
        
        private IntuitAnyType creditCardPaymentExField;
        
        /// <remarks/>
        /// <summary>
        /// Credit Card account for which a payment is being entered.
        /// Must be a Credit Card account.
        /// 
        /// </summary>
        public ReferenceType CreditCardAccountRef {
            get {
                return creditCardAccountRefField;
            }
            set {
                creditCardAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Bank account used to pay the Credit Card balance.
        /// Must be a Bank account.
        /// 
        /// </summary>
        public ReferenceType BankAccountRef {
            get {
                return bankAccountRefField;
            }
            set {
                bankAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Total amount of the payment. Denominated in the currency of the credit card account.
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the vendor reference for this transaction.
        /// 
        /// </summary>
        public ReferenceType VendorRef {
            get {
                return vendorRefField;
            }
            set {
                vendorRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The check number printed on the check.
        /// 
        /// </summary>
        public string CheckNum {
            get {
                return checkNumField;
            }
            set {
                checkNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// PrintStatus if to be printed or already printed.
        /// 
        /// </summary>
        public PrintStatusEnum PrintStatus {
            get {
                return printStatusField;
            }
            set {
                printStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintStatusSpecified {
            get {
                return printStatusFieldSpecified;
            }
            set {
                printStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Memo associated with the Credit Card Payment transaction.
        /// 
        /// </summary>
        public string Memo {
            get {
                return memoField;
            }
            set {
                memoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for CreditCardPayment
        /// 
        /// </summary>
        public IntuitAnyType CreditCardPaymentEx {
            get {
                return creditCardPaymentExField;
            }
            set {
                creditCardPaymentExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes the properties of currencies defined in
    /// QuickBooks. QuickBooks supports the world's common currencies.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Currency : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private currencyCode codeField;
        
        private bool codeFieldSpecified;
        
        private string separatorField;
        
        private string formatField;
        
        private string decimalPlacesField;
        
        private string decimalSeparatorField;
        
        private string symbolField;
        
        private SymbolPositionEnum symbolPositionField;
        
        private bool symbolPositionFieldSpecified;
        
        private bool userDefinedField;
        
        private bool userDefinedFieldSpecified;
        
        private decimal exchangeRateField;
        
        private bool exchangeRateFieldSpecified;
        
        private System.DateTime asOfDateField;
        
        private bool asOfDateFieldSpecified;
        
        private IntuitAnyType currencyExField;
        
        /// <remarks/>
        /// <summary>
        /// Currency name.
        /// Length Restriction:
        /// QBO: 15
        /// QBW:
        /// 1024
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive Currency may be
        /// hidden from most display purposes and may not be used on
        /// financial transactions.
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// Inactive Currencies are not used when downloading the exchange
        /// rates.
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Currency universal 3-letter code, like USD,
        /// CAD, EUR, etc.
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// Required for
        /// the create operation. [br /]
        /// Max Length: 3
        /// 
        /// </summary>
        public currencyCode Code {
            get {
                return codeField;
            }
            set {
                codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CodeSpecified {
            get {
                return codeFieldSpecified;
            }
            set {
                codeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// "Thousand separator" character, used for the
        /// display purpose.
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// Max Length:
        /// 1
        /// 
        /// </summary>
        public string Separator {
            get {
                return separatorField;
            }
            set {
                separatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies how to present the value, used for
        /// the display purpose for example, ##,###,### or #,##,##,###
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// Max Length: 32
        /// 
        /// </summary>
        public string Format {
            get {
                return formatField;
            }
            set {
                formatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies how many decimal places can be shown.
        /// Usually there will be 2, or 0 for currencies without "cents".
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// Max Length: 1
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string DecimalPlaces {
            get {
                return decimalPlacesField;
            }
            set {
                decimalPlacesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Used for display purpose, can be a comma or a
        /// period.
        /// 
        /// </summary>
        public string DecimalSeparator {
            get {
                return decimalSeparatorField;
            }
            set {
                decimalSeparatorField = value;
            }
        }
        
        /// <remarks/>
        public string Symbol {
            get {
                return symbolField;
            }
            set {
                symbolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Used for display purpose to specify where to
        /// show the Currency Symbol.
        /// </summary>
        public SymbolPositionEnum SymbolPosition {
            get {
                return symbolPositionField;
            }
            set {
                symbolPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SymbolPositionSpecified {
            get {
                return symbolPositionFieldSpecified;
            }
            set {
                symbolPositionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// [b][i]QuickBooks Notes[/i][/b] [br /]
        /// QuickBooks predefines the most common world currencies, however
        /// it does allow the user to define the new one.
        /// The user-defined
        /// currency however cannot have the exchange rates downloaded.
        /// 
        /// </summary>
        public bool UserDefined {
            get {
                return userDefinedField;
            }
            set {
                userDefinedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UserDefinedSpecified {
            get {
                return userDefinedFieldSpecified;
            }
            set {
                userDefinedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal ExchangeRate {
            get {
                return exchangeRateField;
            }
            set {
                exchangeRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ExchangeRateSpecified {
            get {
                return exchangeRateFieldSpecified;
            }
            set {
                exchangeRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime AsOfDate {
            get {
                return asOfDateField;
            }
            set {
                asOfDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AsOfDateSpecified {
            get {
                return asOfDateFieldSpecified;
            }
            set {
                asOfDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Currency
        /// </summary>
        public IntuitAnyType CurrencyEx {
            get {
                return currencyExField;
            }
            set {
                currencyExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: ISO 4217 Currency Code enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum currencyCode {
        
        /// <remarks/>
        AED,
        
        /// <remarks/>
        AFA,
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        ANG,
        
        /// <remarks/>
        AOA,
        
        /// <remarks/>
        AOK,
        
        /// <remarks/>
        ARP,
        
        /// <remarks/>
        ARS,
        
        /// <remarks/>
        AMD,
        
        /// <remarks/>
        ATS,
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        AWF,
        
        /// <remarks/>
        AWG,
        
        /// <remarks/>
        AZM,
        
        /// <remarks/>
        BAM,
        
        /// <remarks/>
        BBD,
        
        /// <remarks/>
        BDT,
        
        /// <remarks/>
        BEF,
        
        /// <remarks/>
        BGL,
        
        /// <remarks/>
        BHD,
        
        /// <remarks/>
        BIF,
        
        /// <remarks/>
        BMD,
        
        /// <remarks/>
        BND,
        
        /// <remarks/>
        BOB,
        
        /// <remarks/>
        BRC,
        
        /// <remarks/>
        BRL,
        
        /// <remarks/>
        BSD,
        
        /// <remarks/>
        BTN,
        
        /// <remarks/>
        BUK,
        
        /// <remarks/>
        BWP,
        
        /// <remarks/>
        BYR,
        
        /// <remarks/>
        BYB,
        
        /// <remarks/>
        BZD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CDF,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        CLP,
        
        /// <remarks/>
        CNY,
        
        /// <remarks/>
        COP,
        
        /// <remarks/>
        CRC,
        
        /// <remarks/>
        CZK,
        
        /// <remarks/>
        CUP,
        
        /// <remarks/>
        CVE,
        
        /// <remarks/>
        DDM,
        
        /// <remarks/>
        DEM,
        
        /// <remarks/>
        DJF,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        DOP,
        
        /// <remarks/>
        DZD,
        
        /// <remarks/>
        ECS,
        
        /// <remarks/>
        EEK,
        
        /// <remarks/>
        EGP,
        
        /// <remarks/>
        ERN,
        
        /// <remarks/>
        ESP,
        
        /// <remarks/>
        ETB,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        FIM,
        
        /// <remarks/>
        FJD,
        
        /// <remarks/>
        FKP,
        
        /// <remarks/>
        FRF,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        GEL,
        
        /// <remarks/>
        GHC,
        
        /// <remarks/>
        GIP,
        
        /// <remarks/>
        GMD,
        
        /// <remarks/>
        GNF,
        
        /// <remarks/>
        GRD,
        
        /// <remarks/>
        GTQ,
        
        /// <remarks/>
        GWP,
        
        /// <remarks/>
        GYD,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        HNL,
        
        /// <remarks/>
        HRK,
        
        /// <remarks/>
        HTG,
        
        /// <remarks/>
        HUF,
        
        /// <remarks/>
        IDR,
        
        /// <remarks/>
        IEP,
        
        /// <remarks/>
        ILS,
        
        /// <remarks/>
        INR,
        
        /// <remarks/>
        IQD,
        
        /// <remarks/>
        IRR,
        
        /// <remarks/>
        ISK,
        
        /// <remarks/>
        ITL,
        
        /// <remarks/>
        JMD,
        
        /// <remarks/>
        JOD,
        
        /// <remarks/>
        KES,
        
        /// <remarks/>
        KGS,
        
        /// <remarks/>
        KHR,
        
        /// <remarks/>
        KMF,
        
        /// <remarks/>
        KPW,
        
        /// <remarks/>
        KRW,
        
        /// <remarks/>
        KWD,
        
        /// <remarks/>
        KYD,
        
        /// <remarks/>
        KZT,
        
        /// <remarks/>
        LAK,
        
        /// <remarks/>
        LBP,
        
        /// <remarks/>
        LKR,
        
        /// <remarks/>
        LRD,
        
        /// <remarks/>
        LSL,
        
        /// <remarks/>
        LTL,
        
        /// <remarks/>
        LUF,
        
        /// <remarks/>
        LVL,
        
        /// <remarks/>
        LYD,
        
        /// <remarks/>
        MAD,
        
        /// <remarks/>
        MDL,
        
        /// <remarks/>
        MGF,
        
        /// <remarks/>
        MKD,
        
        /// <remarks/>
        MMK,
        
        /// <remarks/>
        MNT,
        
        /// <remarks/>
        MOP,
        
        /// <remarks/>
        MRO,
        
        /// <remarks/>
        MUR,
        
        /// <remarks/>
        MVR,
        
        /// <remarks/>
        MWK,
        
        /// <remarks/>
        MXN,
        
        /// <remarks/>
        MXP,
        
        /// <remarks/>
        MYR,
        
        /// <remarks/>
        MZM,
        
        /// <remarks/>
        NAD,
        
        /// <remarks/>
        NGN,
        
        /// <remarks/>
        NIC,
        
        /// <remarks/>
        NIO,
        
        /// <remarks/>
        NLG,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NPR,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        OMR,
        
        /// <remarks/>
        PAB,
        
        /// <remarks/>
        PEN,
        
        /// <remarks/>
        PES,
        
        /// <remarks/>
        PGK,
        
        /// <remarks/>
        PHP,
        
        /// <remarks/>
        PKR,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        PLZ,
        
        /// <remarks/>
        PTE,
        
        /// <remarks/>
        PYG,
        
        /// <remarks/>
        QAR,
        
        /// <remarks/>
        ROL,
        
        /// <remarks/>
        RUR,
        
        /// <remarks/>
        RWF,
        
        /// <remarks/>
        SAR,
        
        /// <remarks/>
        SBD,
        
        /// <remarks/>
        SCR,
        
        /// <remarks/>
        SDD,
        
        /// <remarks/>
        SDP,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        SHP,
        
        /// <remarks/>
        SIT,
        
        /// <remarks/>
        SKK,
        
        /// <remarks/>
        SLL,
        
        /// <remarks/>
        SM,
        
        /// <remarks/>
        SOS,
        
        /// <remarks/>
        SRG,
        
        /// <remarks/>
        STD,
        
        /// <remarks/>
        SUR,
        
        /// <remarks/>
        SVC,
        
        /// <remarks/>
        SYP,
        
        /// <remarks/>
        SZL,
        
        /// <remarks/>
        THB,
        
        /// <remarks/>
        TMM,
        
        /// <remarks/>
        TND,
        
        /// <remarks/>
        TOP,
        
        /// <remarks/>
        TRL,
        
        /// <remarks/>
        TTD,
        
        /// <remarks/>
        TWD,
        
        /// <remarks/>
        TZS,
        
        /// <remarks/>
        UAH,
        
        /// <remarks/>
        UGS,
        
        /// <remarks/>
        UGX,
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        UYP,
        
        /// <remarks/>
        UYU,
        
        /// <remarks/>
        UZS,
        
        /// <remarks/>
        VND,
        
        /// <remarks/>
        VUV,
        
        /// <remarks/>
        VAL,
        
        /// <remarks/>
        WST,
        
        /// <remarks/>
        XAF,
        
        /// <remarks/>
        XCD,
        
        /// <remarks/>
        XOF,
        
        /// <remarks/>
        XPF,
        
        /// <remarks/>
        YER,
        
        /// <remarks/>
        YUD,
        
        /// <remarks/>
        ZAR,
        
        /// <remarks/>
        ZMK,
        
        /// <remarks/>
        ZRZ,
        
        /// <remarks/>
        ZWD,
    }
    
    /// <remarks/>
    /// <summary>
    /// Company currency are the currencies used by the
    /// company. Each Company Currency describes the properties of that
    /// currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CompanyCurrency : IntuitEntity, IEntity {
        
        private string codeField;
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private IntuitAnyType companyCurrencyExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Universal 3-letter
        /// currency code like USD, CAD, EUR, etc. Required for the
        /// create/delete operation.
        /// Max Length: 3
        /// 
        /// </summary>
        public string Code {
            get {
                return codeField;
            }
            set {
                codeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Currency name (Output
        /// only)
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates whether this
        /// currency is active in the company or not. Inactive Currency may
        /// be hidden from most display purposes and may not be used on
        /// financial transactions.
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Company Currency
        /// </summary>
        public IntuitAnyType CompanyCurrencyEx {
            get {
                return companyCurrencyExField;
            }
            set {
                companyCurrencyExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes properties of an exchange rate between
    /// source and target currencies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ExchangeRate : IntuitEntity, IEntity {
        
        private string sourceCurrencyCodeField;
        
        private string targetCurrencyCodeField;
        
        private decimal rateField;
        
        private bool rateFieldSpecified;
        
        private System.DateTime asOfDateField;
        
        private bool asOfDateFieldSpecified;
        
        private IntuitAnyType exchangeRateExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Universal 3-letter
        /// code of source currency from which exchange rate is required,
        /// usually LHS of the equation. Example: 1 USD = 65 INR. Here USD
        /// would be the source currency.
        /// Max Length: 3
        /// 
        /// </summary>
        public string SourceCurrencyCode {
            get {
                return sourceCurrencyCodeField;
            }
            set {
                sourceCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Universal 3-letter
        /// currency code of target currency against which exchange rate is
        /// required, usually RHS of the equation. Usually this would be the
        /// home currency.
        /// Max Length: 3
        /// 
        /// </summary>
        public string TargetCurrencyCode {
            get {
                return targetCurrencyCodeField;
            }
            set {
                targetCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Exchange rate to be
        /// set between these two currencies for the mentioned date.
        /// 
        /// </summary>
        public decimal Rate {
            get {
                return rateField;
            }
            set {
                rateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RateSpecified {
            get {
                return rateFieldSpecified;
            }
            set {
                rateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Date as on which the
        /// exchange rate needs to be set.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime AsOfDate {
            get {
                return asOfDateField;
            }
            set {
                asOfDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AsOfDateSpecified {
            get {
                return asOfDateFieldSpecified;
            }
            set {
                asOfDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Exchange Rate
        /// </summary>
        public IntuitAnyType ExchangeRateEx {
            get {
                return exchangeRateExField;
            }
            set {
                exchangeRateExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: The SalesRep entity allows
    /// you to identify sales representatives and track their transactions.
    /// A sales representative can be an employee, a vendor, or an
    /// independent contractor. You can associate sales representatives with
    /// sales deals to track their transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesRep : IntuitEntity, IEntity {
        
        private SalesRepTypeEnum nameOfField;
        
        private bool nameOfFieldSpecified;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private ReferenceType itemField;
        
        private ItemChoiceType3 itemElementNameField;
        
        private string initialsField;
        
        private IntuitAnyType salesRepExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The SalesRep type.
        /// Also, one of the three entity references (either the Name or the
        /// ID of the Employee, OtherName, or Vendor) is required for the
        /// Create request.[br /]
        /// Required: QBW
        /// 
        /// </summary>
        public SalesRepTypeEnum NameOf {
            get {
                return nameOfField;
            }
            set {
                nameOfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NameOfSpecified {
            get {
                return nameOfFieldSpecified;
            }
            set {
                nameOfFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if active.
        /// Inactive sales reps may be hidden from display and may not be
        /// used on financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EmployeeRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("OtherNameRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("VendorRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ReferenceType AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType3 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable
        /// initials of the Sales Rep.[br/]Required for the Create
        /// request.[br/] Max Length: 5 characters.
        /// 
        /// </summary>
        public string Initials {
            get {
                return initialsField;
            }
            set {
                initialsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Internal use only:
        /// extension place holder for SalesRep
        /// 
        /// </summary>
        public IntuitAnyType SalesRepEx {
            get {
                return salesRepExField;
            }
            set {
                salesRepExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType3 {
        
        /// <remarks/>
        EmployeeRef,
        
        /// <remarks/>
        OtherNameRef,
        
        /// <remarks/>
        VendorRef,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: You can use price levels
    /// to specify custom pricing for specific customers. Once you create a
    /// price level for a customer, QuickBooks will automatically use the
    /// custom price in new invoices, sales receipts, sales orders or credit
    /// memos for that customer. You can override this automatic feature,
    /// however, when you create the invoices, sales receipts, etc. The user
    /// can now specify a price level on line items in the following
    /// supported sales transactions: invoices, sales receipts, credit
    /// memos, and sales orders. Notice that the response data for the
    /// affected sales transaction does not list the price level that was
    /// used. The response simply lists the Rate for the item, which was set
    /// using the price level.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PriceLevel : IntuitEntity, IEntity {
        
        private object nameField;
        
        private bool activeField;
        
        private PriceLevelTypeEnum priceLevelTypeField;
        
        private object[] itemsField;
        
        private ReferenceType currencyRefField;
        
        private IntuitAnyType priceLevelExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User-visible name of
        /// the price level
        /// 
        /// </summary>
        public object Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        public PriceLevelTypeEnum PriceLevelType {
            get {
                return priceLevelTypeField;
            }
            set {
                priceLevelTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FixedPercentage", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevelPerItem", typeof(PriceLevelPerItem))]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the
        /// currency in which the price level is expressed.
        /// 
        /// </summary>
        public ReferenceType CurrencyRef {
            get {
                return currencyRefField;
            }
            set {
                currencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// PriceLevel
        /// </summary>
        public IntuitAnyType PriceLevelEx {
            get {
                return priceLevelExField;
            }
            set {
                priceLevelExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: A custom price or
    /// percentage change from the item's base price for a specific price
    /// level
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PriceLevelPerItem : IntuitEntity, IEntity {
        
        private ReferenceType itemRefField;
        
        private decimal itemField;
        
        private ItemChoiceType4 itemElementNameField;
        
        private IntuitAnyType priceLevelPerItemExField;
        
        /// <remarks/>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CustomPrice", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("CustomPricePercent", typeof(decimal))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public decimal AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType4 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// PriceLevelPerItem
        /// </summary>
        public IntuitAnyType PriceLevelPerItemEx {
            get {
                return priceLevelPerItemExField;
            }
            set {
                priceLevelPerItemExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType4 {
        
        /// <remarks/>
        CustomPrice,
        
        /// <remarks/>
        CustomPricePercent,
    }
    
    /// <remarks/>
    /// <summary>
    /// A standard message to a customer that can be
    /// included at the bottom of a sales form.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CustomerMsg : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private IntuitAnyType customerMsgExField;
        
        /// <remarks/>
        /// <summary>
        /// Contains the message to a customer.[br /]
        /// Length Restriction:
        /// QBO: 15
        /// QBW: 1024
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive customer message
        /// may be hidden from most display purposes and may not be used on
        /// financial transactions.
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// CustomerMsg
        /// </summary>
        public IntuitAnyType CustomerMsgEx {
            get {
                return customerMsgExField;
            }
            set {
                customerMsgExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Accounting transaction, consists of journal lines,
    /// each of which is either a debit or a credit. The total of the debits
    /// must equal the total of the credits.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class JournalEntry : Transaction {
        
        private bool adjustmentField;
        
        private bool adjustmentFieldSpecified;
        
        private bool homeCurrencyAdjustmentField;
        
        private bool homeCurrencyAdjustmentFieldSpecified;
        
        private bool enteredInHomeCurrencyField;
        
        private bool enteredInHomeCurrencyFieldSpecified;
        
        private GlobalTaxCalculationEnum globalTaxCalculationField;
        
        private bool globalTaxCalculationFieldSpecified;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private decimal homeTotalAmtField;
        
        private bool homeTotalAmtFieldSpecified;
        
        private IntuitAnyType journalEntryExField;
        
        /// <remarks/>
        /// <summary>
        /// Indicates that the Journal Entry is
        /// after-the-fact entry to make changes to specific accounts.
        /// 
        /// </summary>
        public bool Adjustment {
            get {
                return adjustmentField;
            }
            set {
                adjustmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AdjustmentSpecified {
            get {
                return adjustmentFieldSpecified;
            }
            set {
                adjustmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Valid only if the company file is set up to use
        /// Multi-Currency feature.
        /// [b]QuickBooks Notes[/b][br /]
        /// At the end
        /// of a reporting period, when financial reports need to reflect a
        /// current home currency value of the foreign balances, enter a
        /// home currency adjustment.
        /// Until the home currency value of the foreign balances is recalculated
        /// using current exchange rates, reports reflect the home currency
        /// value based on the exchange rates used at the time of each
        /// transaction.
        /// 
        /// </summary>
        public bool HomeCurrencyAdjustment {
            get {
                return homeCurrencyAdjustmentField;
            }
            set {
                homeCurrencyAdjustmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeCurrencyAdjustmentSpecified {
            get {
                return homeCurrencyAdjustmentFieldSpecified;
            }
            set {
                homeCurrencyAdjustmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Valid only if the company file is set up to use
        /// Multi-Currency feature.
        /// [b]QuickBooks Notes[/b][br /]
        /// Amounts are
        /// always entered in home currency for a HomeCurrencyAdjustment
        /// JournalEntry.
        /// 
        /// </summary>
        public bool EnteredInHomeCurrency {
            get {
                return enteredInHomeCurrencyField;
            }
            set {
                enteredInHomeCurrencyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EnteredInHomeCurrencySpecified {
            get {
                return enteredInHomeCurrencyFieldSpecified;
            }
            set {
                enteredInHomeCurrencyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicates the
        /// GlobalTax model if the model inclusive of tax, exclusive of
        /// taxes or not applicable
        /// 
        /// </summary>
        public GlobalTaxCalculationEnum GlobalTaxCalculation {
            get {
                return globalTaxCalculationField;
            }
            set {
                globalTaxCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GlobalTaxCalculationSpecified {
            get {
                return globalTaxCalculationFieldSpecified;
            }
            set {
                globalTaxCalculationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: All
        /// Description: Indicates the total
        /// amount of the transaction. This includes the total of all the
        /// charges, allowances and taxes. By default, this is recalculated
        /// based on sub items total and overridden.
        /// Product: QBW
        /// Description: Indicates the total amount of the transaction. This
        /// includes the total of all the charges, allowances and taxes.[br
        /// /]Calculated by QuickBooks business logic; cannot be written to
        /// QuickBooks.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Total amount of the
        /// transaction in the home currency for multi-currency enabled
        /// companies. Single currency companies will not have this field.
        /// Includes the total of all the charges, allowances and taxes.
        /// Calculated by QuickBooks business logic. Cannot be written to
        /// QuickBooks.
        /// 
        /// </summary>
        public decimal HomeTotalAmt {
            get {
                return homeTotalAmtField;
            }
            set {
                homeTotalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HomeTotalAmtSpecified {
            get {
                return homeTotalAmtFieldSpecified;
            }
            set {
                homeTotalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// JournalEntry
        /// </summary>
        public IntuitAnyType JournalEntryEx {
            get {
                return journalEntryExField;
            }
            set {
                journalEntryExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// A record of time worked by a vendor or employee.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TimeActivity : IntuitEntity, IEntity {
        
        private string timeZoneField;
        
        private System.DateTime txnDateField;
        
        private bool txnDateFieldSpecified;
        
        private TimeActivityTypeEnum nameOfField;
        
        private bool nameOfFieldSpecified;
        
        private ReferenceType itemField;
        
        private ItemChoiceType5 itemElementNameField;
        
        private ReferenceType customerRefField;
        
        private ReferenceType departmentRefField;
        
        private ReferenceType itemRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType payrollItemRefField;
        
        private BillableStatusEnum billableStatusField;
        
        private bool billableStatusFieldSpecified;
        
        private bool taxableField;
        
        private bool taxableFieldSpecified;
        
        private decimal hourlyRateField;
        
        private bool hourlyRateFieldSpecified;
        
        private int hoursField;
        
        private bool hoursFieldSpecified;
        
        private int minutesField;
        
        private bool minutesFieldSpecified;
        
        private int breakHoursField;
        
        private bool breakHoursFieldSpecified;
        
        private int breakMinutesField;
        
        private bool breakMinutesFieldSpecified;
        
        private System.DateTime startTimeField;
        
        private bool startTimeFieldSpecified;
        
        private System.DateTime endTimeField;
        
        private bool endTimeFieldSpecified;
        
        private string descriptionField;
        
        private IntuitAnyType timeActivityExField;
        
        private bool hoursInEmployeeTimeZoneField;
        
        private bool hoursInEmployeeTimeZoneFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// The timezone from where the time activity is
        /// entered, unused in QBO and QBW
        /// </summary>
        public string TimeZone {
            get {
                return timeZoneField;
            }
            set {
                timeZoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The date of the time activity.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime TxnDate {
            get {
                return txnDateField;
            }
            set {
                txnDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnDateSpecified {
            get {
                return txnDateFieldSpecified;
            }
            set {
                txnDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public TimeActivityTypeEnum NameOf {
            get {
                return nameOfField;
            }
            set {
                nameOfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NameOfSpecified {
            get {
                return nameOfFieldSpecified;
            }
            set {
                nameOfFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EmployeeRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("OtherNameRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("VendorRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ReferenceType AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType5 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents Customer (or Job)Reference
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents Department Reference.
        /// 
        /// </summary>
        public ReferenceType DepartmentRef {
            get {
                return departmentRefField;
            }
            set {
                departmentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// [br /]
        /// Required for the create operation.
        /// 
        /// </summary>
        public ReferenceType ItemRef {
            get {
                return itemRefField;
            }
            set {
                itemRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The payroll item determines how much the
        /// employee should be paid for doing the work specified by the Item
        /// Service Id.
        /// In order for the Time Activity data to be transferred
        /// to the employee payroll data, the Employee must have the
        /// property UseTimeEntry set.
        /// 
        /// </summary>
        public ReferenceType PayrollItemRef {
            get {
                return payrollItemRefField;
            }
            set {
                payrollItemRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Billable status of the time recorded
        /// 
        /// </summary>
        public BillableStatusEnum BillableStatus {
            get {
                return billableStatusField;
            }
            set {
                billableStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableStatusSpecified {
            get {
                return billableStatusFieldSpecified;
            }
            set {
                billableStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// True if the time recorded is both billable and
        /// taxable.
        /// </summary>
        public bool Taxable {
            get {
                return taxableField;
            }
            set {
                taxableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxableSpecified {
            get {
                return taxableFieldSpecified;
            }
            set {
                taxableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Hourly bill rate of the employee or vendor for
        /// this time activity.
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported
        /// field.[/i]
        /// 
        /// </summary>
        public decimal HourlyRate {
            get {
                return hourlyRateField;
            }
            set {
                hourlyRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HourlyRateSpecified {
            get {
                return hourlyRateFieldSpecified;
            }
            set {
                hourlyRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Hours worked.
        /// </summary>
        public int Hours {
            get {
                return hoursField;
            }
            set {
                hoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HoursSpecified {
            get {
                return hoursFieldSpecified;
            }
            set {
                hoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Minutes worked; valid values are 0 - 59.
        /// 
        /// </summary>
        public int Minutes {
            get {
                return minutesField;
            }
            set {
                minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MinutesSpecified {
            get {
                return minutesFieldSpecified;
            }
            set {
                minutesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Hours of break taken between start time and end
        /// time.
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported field.[/i]
        /// 
        /// </summary>
        public int BreakHours {
            get {
                return breakHoursField;
            }
            set {
                breakHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BreakHoursSpecified {
            get {
                return breakHoursFieldSpecified;
            }
            set {
                breakHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Minutes of break taken between start time and
        /// end time. Valid values are 0 - 59.
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported field.[/i]
        /// 
        /// </summary>
        public int BreakMinutes {
            get {
                return breakMinutesField;
            }
            set {
                breakMinutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BreakMinutesSpecified {
            get {
                return breakMinutesFieldSpecified;
            }
            set {
                breakMinutesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Time work started.
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported field.[/i]
        /// 
        /// </summary>
        public System.DateTime StartTime {
            get {
                return startTimeField;
            }
            set {
                startTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartTimeSpecified {
            get {
                return startTimeFieldSpecified;
            }
            set {
                startTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Time work ended.
        /// [b]QuickBooks Notes[/b][br /]
        /// [i]Unsupported field.[/i]
        /// 
        /// </summary>
        public System.DateTime EndTime {
            get {
                return endTimeField;
            }
            set {
                endTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndTimeSpecified {
            get {
                return endTimeFieldSpecified;
            }
            set {
                endTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Description of work completed during time
        /// activity.
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// TimeActivity.
        /// </summary>
        public IntuitAnyType TimeActivityEx {
            get {
                return timeActivityExField;
            }
            set {
                timeActivityExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// True if the start, end hours are already with company/employee time zone offset.
        /// 
        /// Couple of TimeActivity API integrations are already submitting start, end hours with right company/employee time zone offsets. Such integrations will pass this attribute as true to avoid company time zone offsets by TimeActivity API.
        /// 
        /// </summary>
        public bool HoursInEmployeeTimeZone {
            get {
                return hoursInEmployeeTimeZoneField;
            }
            set {
                hoursInEmployeeTimeZoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HoursInEmployeeTimeZoneSpecified {
            get {
                return hoursInEmployeeTimeZoneFieldSpecified;
            }
            set {
                hoursInEmployeeTimeZoneFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType5 {
        
        /// <remarks/>
        EmployeeRef,
        
        /// <remarks/>
        OtherNameRef,
        
        /// <remarks/>
        VendorRef,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: The InventorySite resource
    /// represents a location where inventory is stored.
    /// Endpoint:
    /// inventorysite
    /// Business Rules: [li]The site name must be unique.[/li]
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class InventorySite : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool defaultSiteField;
        
        private bool defaultSiteFieldSpecified;
        
        private string descriptionField;
        
        private string contactField;
        
        private PhysicalAddress[] addrField;
        
        private ContactInfo[] contactInfoField;
        
        private IntuitAnyType inventorySiteExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Filterable: QBW
        /// Description: User
        /// recognizable name for the site
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Filterable: QBW
        /// Description: Whether
        /// the site is considered "active", still in use by the business
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Whether this is the
        /// default site for inventory items that do not indicate a site
        /// 
        /// </summary>
        public bool DefaultSite {
            get {
                return defaultSiteField;
            }
            set {
                defaultSiteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultSiteSpecified {
            get {
                return defaultSiteFieldSpecified;
            }
            set {
                defaultSiteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Description
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Name of the person
        /// responsible for the site
        /// 
        /// </summary>
        public string Contact {
            get {
                return contactField;
            }
            set {
                contactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Tagged postal addresses
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Addr")]
        public PhysicalAddress[] Addr {
            get {
                return addrField;
            }
            set {
                addrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Tagged phone number, possibly include pagers.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ContactInfo")]
        public ContactInfo[] ContactInfo {
            get {
                return contactInfoField;
            }
            set {
                contactInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// InventorySite
        /// </summary>
        public IntuitAnyType InventorySiteEx {
            get {
                return inventorySiteExField;
            }
            set {
                inventorySiteExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Describes a method of
    /// shipping for the company
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ShipMethod : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private IntuitAnyType shipMethodExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The name of the
        /// shipping method (i.e. FedEx 2-day)
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indication of whether
        /// or not this shipping method is still used by the company.
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// ShipMethod
        /// </summary>
        public IntuitAnyType ShipMethodEx {
            get {
                return shipMethodExField;
            }
            set {
                shipMethodExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: A specific task to be
    /// completed, maps to a ToDo record in QuickBooks.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Task : IntuitEntity, IEntity {
        
        private string notesField;
        
        private string fromField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool doneField;
        
        private bool doneFieldSpecified;
        
        private System.DateTime reminderDateField;
        
        private bool reminderDateFieldSpecified;
        
        private IntuitAnyType taskExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The actual content of
        /// the task reminder
        /// 
        /// </summary>
        public string Notes {
            get {
                return notesField;
            }
            set {
                notesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: In use by the business
        /// 
        /// </summary>
        public string From {
            get {
                return fromField;
            }
            set {
                fromField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: In use by the business
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if the task has
        /// been completed
        /// 
        /// </summary>
        public bool Done {
            get {
                return doneField;
            }
            set {
                doneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DoneSpecified {
            get {
                return doneFieldSpecified;
            }
            set {
                doneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The date to remind the
        /// user of this task
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ReminderDate {
            get {
                return reminderDateField;
            }
            set {
                reminderDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReminderDateSpecified {
            get {
                return reminderDateFieldSpecified;
            }
            set {
                reminderDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// Task
        /// </summary>
        public IntuitAnyType TaskEx {
            get {
                return taskExField;
            }
            set {
                taskExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: A specific user alert to
    /// be notified to Quickbooks user, maps to a ToDo record in QuickBooks.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class UserAlert : IntuitEntity, IEntity {
        
        private string notesField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool doneField;
        
        private bool doneFieldSpecified;
        
        private string typeField;
        
        private System.DateTime reminderDateField;
        
        private bool reminderDateFieldSpecified;
        
        private System.DateTime expireDateField;
        
        private bool expireDateFieldSpecified;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private string uRLField;
        
        private string filterField;
        
        private NameValue[] nameValueField;
        
        private IntuitAnyType userAlertExField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The actual content of
        /// the user alert
        /// 
        /// </summary>
        public string Notes {
            get {
                return notesField;
            }
            set {
                notesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: In use by the business
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if the user alert
        /// has been completed
        /// 
        /// </summary>
        public bool Done {
            get {
                return doneField;
            }
            set {
                doneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DoneSpecified {
            get {
                return doneFieldSpecified;
            }
            set {
                doneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The type of the user
        /// alert
        /// 
        /// </summary>
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The date to remind the
        /// user of this user alert
        /// 
        /// </summary>
        public System.DateTime ReminderDate {
            get {
                return reminderDateField;
            }
            set {
                reminderDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReminderDateSpecified {
            get {
                return reminderDateFieldSpecified;
            }
            set {
                reminderDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The date the user
        /// alert will expire
        /// 
        /// </summary>
        public System.DateTime ExpireDate {
            get {
                return expireDateField;
            }
            set {
                expireDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ExpireDateSpecified {
            get {
                return expireDateFieldSpecified;
            }
            set {
                expireDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The date the user
        /// alert is due
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The URL that can be
        /// included in the user alert
        /// 
        /// </summary>
        public string URL {
            get {
                return uRLField;
            }
            set {
                uRLField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The filter associated
        /// with the user alert
        /// 
        /// </summary>
        public string Filter {
            get {
                return filterField;
            }
            set {
                filterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Any other properties not covered in base is
        /// covered as name value pair, for detailed explanation look at the
        /// document
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// user alert
        /// </summary>
        public IntuitAnyType UserAlertEx {
            get {
                return userAlertExField;
            }
            set {
                userAlertExField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CurrencyPrefs {
        
        private bool multiCurrencyEnabledField;
        
        private bool multiCurrencyEnabledFieldSpecified;
        
        private ReferenceType homeCurrencyField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Multicurrency enabled
        /// for this company
        /// 
        /// </summary>
        public bool MultiCurrencyEnabled {
            get {
                return multiCurrencyEnabledField;
            }
            set {
                multiCurrencyEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MultiCurrencyEnabledSpecified {
            get {
                return multiCurrencyEnabledFieldSpecified;
            }
            set {
                multiCurrencyEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the Home
        /// currency of the company
        /// 
        /// </summary>
        public ReferenceType HomeCurrency {
            get {
                return homeCurrencyField;
            }
            set {
                homeCurrencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxPrefs {
        
        private bool usingSalesTaxField;
        
        private bool usingSalesTaxFieldSpecified;
        
        private bool partnerTaxEnabledField;
        
        private bool partnerTaxEnabledFieldSpecified;
        
        private bool hideTaxManagementField;
        
        private bool hideTaxManagementFieldSpecified;
        
        private ReferenceType itemField;
        
        private ItemChoiceType1 itemElementNameField;
        
        private PaySalesTaxEnum paySalesTaxField;
        
        private bool paySalesTaxFieldSpecified;
        
        private ReferenceType nonTaxableSalesTaxCodeRefField;
        
        private ReferenceType taxableSalesTaxCodeRefField;
        
        /// <remarks/>
        public bool UsingSalesTax {
            get {
                return usingSalesTaxField;
            }
            set {
                usingSalesTaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingSalesTaxSpecified {
            get {
                return usingSalesTaxFieldSpecified;
            }
            set {
                usingSalesTaxFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool PartnerTaxEnabled {
            get {
                return partnerTaxEnabledField;
            }
            set {
                partnerTaxEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PartnerTaxEnabledSpecified {
            get {
                return partnerTaxEnabledFieldSpecified;
            }
            set {
                partnerTaxEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool HideTaxManagement {
            get {
                return hideTaxManagementField;
            }
            set {
                hideTaxManagementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HideTaxManagementSpecified {
            get {
                return hideTaxManagementFieldSpecified;
            }
            set {
                hideTaxManagementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TaxGroupCodeRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRateRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ReferenceType AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType1 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description:
        /// 
        /// </summary>
        public PaySalesTaxEnum PaySalesTax {
            get {
                return paySalesTaxField;
            }
            set {
                paySalesTaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaySalesTaxSpecified {
            get {
                return paySalesTaxFieldSpecified;
            }
            set {
                paySalesTaxFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// [b]QuickBooks Notes[/b][br /]
        /// Max
        /// Length: 3
        /// 
        /// </summary>
        public ReferenceType NonTaxableSalesTaxCodeRef {
            get {
                return nonTaxableSalesTaxCodeRefField;
            }
            set {
                nonTaxableSalesTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// [b]QuickBooks Notes[/b][br /]
        /// Max
        /// Length: 3
        /// 
        /// </summary>
        public ReferenceType TaxableSalesTaxCodeRef {
            get {
                return taxableSalesTaxCodeRefField;
            }
            set {
                taxableSalesTaxCodeRefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType1 {
        
        /// <remarks/>
        TaxGroupCodeRef,
        
        /// <remarks/>
        TaxRateRef,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class FinanceChargePrefs {
        
        private decimal annualInterestRateField;
        
        private bool annualInterestRateFieldSpecified;
        
        private decimal minFinChrgField;
        
        private bool minFinChrgFieldSpecified;
        
        private string gracePeriodField;
        
        private bool calcFinChrgFromTxnDateField;
        
        private bool calcFinChrgFromTxnDateFieldSpecified;
        
        private bool assessFinChrgForOverdueChargesField;
        
        private bool assessFinChrgForOverdueChargesFieldSpecified;
        
        private ReferenceType finChrgAccountRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Annual Interest Rate in percent
        /// 
        /// </summary>
        public decimal AnnualInterestRate {
            get {
                return annualInterestRateField;
            }
            set {
                annualInterestRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AnnualInterestRateSpecified {
            get {
                return annualInterestRateFieldSpecified;
            }
            set {
                annualInterestRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// 
        /// </summary>
        public decimal MinFinChrg {
            get {
                return minFinChrgField;
            }
            set {
                minFinChrgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MinFinChrgSpecified {
            get {
                return minFinChrgFieldSpecified;
            }
            set {
                minFinChrgFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        public string GracePeriod {
            get {
                return gracePeriodField;
            }
            set {
                gracePeriodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// If true, the Finance Charges are
        /// calculated from the transaction date (Invoice, or Bill).[br /]
        /// If
        /// false, the Finance Charges are calculated from the due date.
        /// 
        /// </summary>
        public bool CalcFinChrgFromTxnDate {
            get {
                return calcFinChrgFromTxnDateField;
            }
            set {
                calcFinChrgFromTxnDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CalcFinChrgFromTxnDateSpecified {
            get {
                return calcFinChrgFromTxnDateFieldSpecified;
            }
            set {
                calcFinChrgFromTxnDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// true if finance charges should apply
        /// to overdue charges, in which case the charges will be applied to
        /// the account referenced in FinChrgAccountRef
        /// 
        /// </summary>
        public bool AssessFinChrgForOverdueCharges {
            get {
                return assessFinChrgForOverdueChargesField;
            }
            set {
                assessFinChrgForOverdueChargesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AssessFinChrgForOverdueChargesSpecified {
            get {
                return assessFinChrgForOverdueChargesFieldSpecified;
            }
            set {
                assessFinChrgForOverdueChargesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// [b]QuickBooks Notes[/b][br /]
        /// Max
        /// Length: 31 or 159 (for a fully qualified name)
        /// 
        /// </summary>
        public ReferenceType FinChrgAccountRef {
            get {
                return finChrgAccountRefField;
            }
            set {
                finChrgAccountRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Company Accounting Prefs details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CompanyAccountingPrefs {
        
        private bool useAccountNumbersField;
        
        private bool useAccountNumbersFieldSpecified;
        
        private ReferenceType defaultARAccountField;
        
        private ReferenceType defaultAPAccountField;
        
        private bool requiresAccountsField;
        
        private bool requiresAccountsFieldSpecified;
        
        private bool trackDepartmentsField;
        
        private bool trackDepartmentsFieldSpecified;
        
        private string departmentTerminologyField;
        
        private bool classTrackingPerTxnField;
        
        private bool classTrackingPerTxnFieldSpecified;
        
        private bool classTrackingPerTxnLineField;
        
        private bool classTrackingPerTxnLineFieldSpecified;
        
        private bool autoJournalEntryNumberField;
        
        private bool autoJournalEntryNumberFieldSpecified;
        
        private MonthEnum firstMonthOfFiscalYearField;
        
        private bool firstMonthOfFiscalYearFieldSpecified;
        
        private MonthEnum taxYearMonthField;
        
        private bool taxYearMonthFieldSpecified;
        
        private string taxFormField;
        
        private System.DateTime bookCloseDateField;
        
        private bool bookCloseDateFieldSpecified;
        
        private ContactInfo[] otherContactInfoField;
        
        private string customerTerminologyField;
        
        /// <remarks/>
        /// <summary>
        /// QBW: Only QBW supported
        /// </summary>
        public bool UseAccountNumbers {
            get {
                return useAccountNumbersField;
            }
            set {
                useAccountNumbersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UseAccountNumbersSpecified {
            get {
                return useAccountNumbersFieldSpecified;
            }
            set {
                useAccountNumbersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product:QBO Default ARAccount
        /// </summary>
        public ReferenceType DefaultARAccount {
            get {
                return defaultARAccountField;
            }
            set {
                defaultARAccountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product:QBO Default APAccount
        /// </summary>
        public ReferenceType DefaultAPAccount {
            get {
                return defaultAPAccountField;
            }
            set {
                defaultAPAccountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Requires account
        /// 
        /// </summary>
        public bool RequiresAccounts {
            get {
                return requiresAccountsField;
            }
            set {
                requiresAccountsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RequiresAccountsSpecified {
            get {
                return requiresAccountsFieldSpecified;
            }
            set {
                requiresAccountsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// QBO: QBO only. Enable Department
        /// Tracking
        /// 
        /// </summary>
        public bool TrackDepartments {
            get {
                return trackDepartmentsField;
            }
            set {
                trackDepartmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackDepartmentsSpecified {
            get {
                return trackDepartmentsFieldSpecified;
            }
            set {
                trackDepartmentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Department terminology
        /// 
        /// </summary>
        public string DepartmentTerminology {
            get {
                return departmentTerminologyField;
            }
            set {
                departmentTerminologyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enable Class Tracking per transaction
        /// 
        /// </summary>
        public bool ClassTrackingPerTxn {
            get {
                return classTrackingPerTxnField;
            }
            set {
                classTrackingPerTxnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ClassTrackingPerTxnSpecified {
            get {
                return classTrackingPerTxnFieldSpecified;
            }
            set {
                classTrackingPerTxnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable Class Tracking per transaction
        /// line
        /// 
        /// </summary>
        public bool ClassTrackingPerTxnLine {
            get {
                return classTrackingPerTxnLineField;
            }
            set {
                classTrackingPerTxnLineField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ClassTrackingPerTxnLineSpecified {
            get {
                return classTrackingPerTxnLineFieldSpecified;
            }
            set {
                classTrackingPerTxnLineFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: ONLY. Enable auto journal entry number
        /// 
        /// </summary>
        public bool AutoJournalEntryNumber {
            get {
                return autoJournalEntryNumberField;
            }
            set {
                autoJournalEntryNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AutoJournalEntryNumberSpecified {
            get {
                return autoJournalEntryNumberFieldSpecified;
            }
            set {
                autoJournalEntryNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Defines first Month of physical year
        /// 
        /// </summary>
        public MonthEnum FirstMonthOfFiscalYear {
            get {
                return firstMonthOfFiscalYearField;
            }
            set {
                firstMonthOfFiscalYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FirstMonthOfFiscalYearSpecified {
            get {
                return firstMonthOfFiscalYearFieldSpecified;
            }
            set {
                firstMonthOfFiscalYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Defines Tax Year Month
        /// 
        /// </summary>
        public MonthEnum TaxYearMonth {
            get {
                return taxYearMonthField;
            }
            set {
                taxYearMonthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxYearMonthSpecified {
            get {
                return taxYearMonthFieldSpecified;
            }
            set {
                taxYearMonthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// TaxForm Number
        /// </summary>
        public string TaxForm {
            get {
                return taxFormField;
            }
            set {
                taxFormField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Book closing date, if you want to
        /// specify if not leave it as null
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime BookCloseDate {
            get {
                return bookCloseDateField;
            }
            set {
                bookCloseDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BookCloseDateSpecified {
            get {
                return bookCloseDateFieldSpecified;
            }
            set {
                bookCloseDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description:
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherContactInfo")]
        public ContactInfo[] OtherContactInfo {
            get {
                return otherContactInfoField;
            }
            set {
                otherContactInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Customer Terminology
        /// 
        /// </summary>
        public string CustomerTerminology {
            get {
                return customerTerminologyField;
            }
            set {
                customerTerminologyField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// QBW: only. Defines advance inventory Prefs details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class AdvancedInventoryPrefs {
        
        private bool mLIAvailableField;
        
        private bool mLIAvailableFieldSpecified;
        
        private bool mLIEnabledField;
        
        private bool mLIEnabledFieldSpecified;
        
        private bool enhancedInventoryReceivingEnabledField;
        
        private bool enhancedInventoryReceivingEnabledFieldSpecified;
        
        private bool trackingSerialOrLotNumberField;
        
        private bool trackingSerialOrLotNumberFieldSpecified;
        
        private bool trackingOnSalesTransactionsEnabledField;
        
        private bool trackingOnSalesTransactionsEnabledFieldSpecified;
        
        private bool trackingOnPurchaseTransactionsEnabledField;
        
        private bool trackingOnPurchaseTransactionsEnabledFieldSpecified;
        
        private bool trackingOnInventoryAdjustmentEnabledField;
        
        private bool trackingOnInventoryAdjustmentEnabledFieldSpecified;
        
        private bool trackingOnBuildAssemblyEnabledField;
        
        private bool trackingOnBuildAssemblyEnabledFieldSpecified;
        
        private bool fIFOEnabledField;
        
        private bool fIFOEnabledFieldSpecified;
        
        private System.DateTime fIFOEffectiveDateField;
        
        private bool fIFOEffectiveDateFieldSpecified;
        
        private bool rowShelfBinEnabledField;
        
        private bool rowShelfBinEnabledFieldSpecified;
        
        private bool barcodeEnabledField;
        
        private bool barcodeEnabledFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// QBW: ONLY. MLI available
        /// </summary>
        public bool MLIAvailable {
            get {
                return mLIAvailableField;
            }
            set {
                mLIAvailableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MLIAvailableSpecified {
            get {
                return mLIAvailableFieldSpecified;
            }
            set {
                mLIAvailableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: ONLY. MLI enabled
        /// </summary>
        public bool MLIEnabled {
            get {
                return mLIEnabledField;
            }
            set {
                mLIEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MLIEnabledSpecified {
            get {
                return mLIEnabledFieldSpecified;
            }
            set {
                mLIEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: Only QBW supported
        /// </summary>
        public bool EnhancedInventoryReceivingEnabled {
            get {
                return enhancedInventoryReceivingEnabledField;
            }
            set {
                enhancedInventoryReceivingEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EnhancedInventoryReceivingEnabledSpecified {
            get {
                return enhancedInventoryReceivingEnabledFieldSpecified;
            }
            set {
                enhancedInventoryReceivingEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        public bool TrackingSerialOrLotNumber {
            get {
                return trackingSerialOrLotNumberField;
            }
            set {
                trackingSerialOrLotNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingSerialOrLotNumberSpecified {
            get {
                return trackingSerialOrLotNumberFieldSpecified;
            }
            set {
                trackingSerialOrLotNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        public bool TrackingOnSalesTransactionsEnabled {
            get {
                return trackingOnSalesTransactionsEnabledField;
            }
            set {
                trackingOnSalesTransactionsEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingOnSalesTransactionsEnabledSpecified {
            get {
                return trackingOnSalesTransactionsEnabledFieldSpecified;
            }
            set {
                trackingOnSalesTransactionsEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        public bool TrackingOnPurchaseTransactionsEnabled {
            get {
                return trackingOnPurchaseTransactionsEnabledField;
            }
            set {
                trackingOnPurchaseTransactionsEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingOnPurchaseTransactionsEnabledSpecified {
            get {
                return trackingOnPurchaseTransactionsEnabledFieldSpecified;
            }
            set {
                trackingOnPurchaseTransactionsEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        public bool TrackingOnInventoryAdjustmentEnabled {
            get {
                return trackingOnInventoryAdjustmentEnabledField;
            }
            set {
                trackingOnInventoryAdjustmentEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingOnInventoryAdjustmentEnabledSpecified {
            get {
                return trackingOnInventoryAdjustmentEnabledFieldSpecified;
            }
            set {
                trackingOnInventoryAdjustmentEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        public bool TrackingOnBuildAssemblyEnabled {
            get {
                return trackingOnBuildAssemblyEnabledField;
            }
            set {
                trackingOnBuildAssemblyEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingOnBuildAssemblyEnabledSpecified {
            get {
                return trackingOnBuildAssemblyEnabledFieldSpecified;
            }
            set {
                trackingOnBuildAssemblyEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: ONLY.
        /// </summary>
        public bool FIFOEnabled {
            get {
                return fIFOEnabledField;
            }
            set {
                fIFOEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FIFOEnabledSpecified {
            get {
                return fIFOEnabledFieldSpecified;
            }
            set {
                fIFOEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: only
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime FIFOEffectiveDate {
            get {
                return fIFOEffectiveDateField;
            }
            set {
                fIFOEffectiveDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FIFOEffectiveDateSpecified {
            get {
                return fIFOEffectiveDateFieldSpecified;
            }
            set {
                fIFOEffectiveDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indicates whether
        /// Row/Shelf/Bin location tracking is enabled
        /// 
        /// </summary>
        public bool RowShelfBinEnabled {
            get {
                return rowShelfBinEnabledField;
            }
            set {
                rowShelfBinEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RowShelfBinEnabledSpecified {
            get {
                return rowShelfBinEnabledFieldSpecified;
            }
            set {
                rowShelfBinEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indicates whether
        /// barcoding is enabled
        /// 
        /// </summary>
        public bool BarcodeEnabled {
            get {
                return barcodeEnabledField;
            }
            set {
                barcodeEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BarcodeEnabledSpecified {
            get {
                return barcodeEnabledFieldSpecified;
            }
            set {
                barcodeEnabledFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Product and Services Prefs details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ProductAndServicesPrefs {
        
        private bool forSalesField;
        
        private bool forSalesFieldSpecified;
        
        private bool forPurchaseField;
        
        private bool forPurchaseFieldSpecified;
        
        private bool inventoryAndPurchaseOrderField;
        
        private bool inventoryAndPurchaseOrderFieldSpecified;
        
        private bool quantityWithPriceAndRateField;
        
        private bool quantityWithPriceAndRateFieldSpecified;
        
        private bool quantityOnHandField;
        
        private bool quantityOnHandFieldSpecified;
        
        private UOMFeatureTypeEnum uOMField;
        
        private bool uOMFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// ProductAndServices for Sales enabled
        /// 
        /// </summary>
        public bool ForSales {
            get {
                return forSalesField;
            }
            set {
                forSalesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ForSalesSpecified {
            get {
                return forSalesFieldSpecified;
            }
            set {
                forSalesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// ProductAndServices for purchases
        /// enabled
        /// 
        /// </summary>
        public bool ForPurchase {
            get {
                return forPurchaseField;
            }
            set {
                forPurchaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ForPurchaseSpecified {
            get {
                return forPurchaseFieldSpecified;
            }
            set {
                forPurchaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Inventory and PO are active
        /// 
        /// </summary>
        public bool InventoryAndPurchaseOrder {
            get {
                return inventoryAndPurchaseOrderField;
            }
            set {
                inventoryAndPurchaseOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool InventoryAndPurchaseOrderSpecified {
            get {
                return inventoryAndPurchaseOrderFieldSpecified;
            }
            set {
                inventoryAndPurchaseOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable quantity with price and rate
        /// enabled
        /// 
        /// </summary>
        public bool QuantityWithPriceAndRate {
            get {
                return quantityWithPriceAndRateField;
            }
            set {
                quantityWithPriceAndRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QuantityWithPriceAndRateSpecified {
            get {
                return quantityWithPriceAndRateFieldSpecified;
            }
            set {
                quantityWithPriceAndRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable QuantityOnHand enabled
        /// 
        /// </summary>
        public bool QuantityOnHand {
            get {
                return quantityOnHandField;
            }
            set {
                quantityOnHandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool QuantityOnHandSpecified {
            get {
                return quantityOnHandFieldSpecified;
            }
            set {
                quantityOnHandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product:QBW. Possible values are
        /// Disabled,SinglePerItem and MultiplePerItem
        /// </summary>
        public UOMFeatureTypeEnum UOM {
            get {
                return uOMField;
            }
            set {
                uOMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UOMSpecified {
            get {
                return uOMFieldSpecified;
            }
            set {
                uOMFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Sales Form Prefs details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SalesFormsPrefs {
        
        private bool usingProgressInvoicingField;
        
        private bool usingProgressInvoicingFieldSpecified;
        
        private CustomFieldDefinition[] customFieldField;
        
        private bool customTxnNumbersField;
        
        private bool customTxnNumbersFieldSpecified;
        
        private bool delayedChargesField;
        
        private bool delayedChargesFieldSpecified;
        
        private EmailAddress salesEmailCcField;
        
        private EmailAddress salesEmailBccField;
        
        private bool emailCopyToCompanyField;
        
        private bool emailCopyToCompanyFieldSpecified;
        
        private bool allowDepositField;
        
        private bool allowDepositFieldSpecified;
        
        private bool allowDiscountField;
        
        private bool allowDiscountFieldSpecified;
        
        private string defaultDiscountAccountField;
        
        private bool allowEstimatesField;
        
        private bool allowEstimatesFieldSpecified;
        
        private string estimateMessageField;
        
        private ETransactionEnabledStatusEnum eTransactionEnabledStatusField;
        
        private bool eTransactionEnabledStatusFieldSpecified;
        
        private bool eTransactionAttachPDFField;
        
        private bool eTransactionAttachPDFFieldSpecified;
        
        private bool eTransactionPaymentEnabledField;
        
        private bool eTransactionPaymentEnabledFieldSpecified;
        
        private bool iPNSupportEnabledField;
        
        private bool iPNSupportEnabledFieldSpecified;
        
        private string invoiceMessageField;
        
        private bool allowServiceDateField;
        
        private bool allowServiceDateFieldSpecified;
        
        private bool allowShippingField;
        
        private bool allowShippingFieldSpecified;
        
        private string defaultShippingAccountField;
        
        private ReferenceType defaultItemField;
        
        private ReferenceType defaultTermsField;
        
        private string defaultDeliveryMethodField;
        
        private bool autoApplyCreditField;
        
        private bool autoApplyCreditFieldSpecified;
        
        private bool autoApplyPaymentsField;
        
        private bool autoApplyPaymentsFieldSpecified;
        
        private bool printItemWithZeroAmountField;
        
        private bool printItemWithZeroAmountFieldSpecified;
        
        private ReferenceType defaultShipMethodRefField;
        
        private decimal defaultMarkupField;
        
        private bool defaultMarkupFieldSpecified;
        
        private bool trackReimbursableExpensesAsIncomeField;
        
        private bool trackReimbursableExpensesAsIncomeFieldSpecified;
        
        private bool usingSalesOrdersField;
        
        private bool usingSalesOrdersFieldSpecified;
        
        private bool usingPriceLevelsField;
        
        private bool usingPriceLevelsFieldSpecified;
        
        private string defaultFOBField;
        
        private string defaultCustomerMessageField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// 
        /// </summary>
        public bool UsingProgressInvoicing {
            get {
                return usingProgressInvoicingField;
            }
            set {
                usingProgressInvoicingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingProgressInvoicingSpecified {
            get {
                return usingProgressInvoicingFieldSpecified;
            }
            set {
                usingProgressInvoicingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Defines the CustomField definitions
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CustomField")]
        public CustomFieldDefinition[] CustomField {
            get {
                return customFieldField;
            }
            set {
                customFieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBo
        /// Custom Transaction Numbers enabled
        /// 
        /// </summary>
        public bool CustomTxnNumbers {
            get {
                return customTxnNumbersField;
            }
            set {
                customTxnNumbersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CustomTxnNumbersSpecified {
            get {
                return customTxnNumbersFieldSpecified;
            }
            set {
                customTxnNumbersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable delayed charges
        /// 
        /// </summary>
        public bool DelayedCharges {
            get {
                return delayedChargesField;
            }
            set {
                delayedChargesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DelayedChargesSpecified {
            get {
                return delayedChargesFieldSpecified;
            }
            set {
                delayedChargesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Cc Email Address for Sales forms
        /// 
        /// </summary>
        public EmailAddress SalesEmailCc {
            get {
                return salesEmailCcField;
            }
            set {
                salesEmailCcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Bcc Email Address for Sales forms
        /// 
        /// </summary>
        public EmailAddress SalesEmailBcc {
            get {
                return salesEmailBccField;
            }
            set {
                salesEmailBccField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Email a Copy to the company for sales form
        /// </summary>
        public bool EmailCopyToCompany {
            get {
                return emailCopyToCompanyField;
            }
            set {
                emailCopyToCompanyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EmailCopyToCompanySpecified {
            get {
                return emailCopyToCompanyFieldSpecified;
            }
            set {
                emailCopyToCompanyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable Deposit on Invoice
        /// 
        /// </summary>
        public bool AllowDeposit {
            get {
                return allowDepositField;
            }
            set {
                allowDepositField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowDepositSpecified {
            get {
                return allowDepositFieldSpecified;
            }
            set {
                allowDepositFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBO:Enable specifying Discount
        /// </summary>
        public bool AllowDiscount {
            get {
                return allowDiscountField;
            }
            set {
                allowDiscountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowDiscountSpecified {
            get {
                return allowDiscountFieldSpecified;
            }
            set {
                allowDiscountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBO:Default Discount account
        /// </summary>
        public string DefaultDiscountAccount {
            get {
                return defaultDiscountAccountField;
            }
            set {
                defaultDiscountAccountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enable specifying Estimates
        /// 
        /// </summary>
        public bool AllowEstimates {
            get {
                return allowEstimatesField;
            }
            set {
                allowEstimatesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowEstimatesSpecified {
            get {
                return allowEstimatesFieldSpecified;
            }
            set {
                allowEstimatesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Message to customers on estimates only
        /// 
        /// </summary>
        public string EstimateMessage {
            get {
                return estimateMessageField;
            }
            set {
                estimateMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Specifies ETransaction preference status
        /// 
        /// </summary>
        public ETransactionEnabledStatusEnum ETransactionEnabledStatus {
            get {
                return eTransactionEnabledStatusField;
            }
            set {
                eTransactionEnabledStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ETransactionEnabledStatusSpecified {
            get {
                return eTransactionEnabledStatusFieldSpecified;
            }
            set {
                eTransactionEnabledStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Specifies whether salesForm PDF should be attached with
        /// ETransaction emails
        /// 
        /// </summary>
        public bool ETransactionAttachPDF {
            get {
                return eTransactionAttachPDFField;
            }
            set {
                eTransactionAttachPDFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ETransactionAttachPDFSpecified {
            get {
                return eTransactionAttachPDFFieldSpecified;
            }
            set {
                eTransactionAttachPDFFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Specifies whether online payments is activated
        /// 
        /// </summary>
        public bool ETransactionPaymentEnabled {
            get {
                return eTransactionPaymentEnabledField;
            }
            set {
                eTransactionPaymentEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ETransactionPaymentEnabledSpecified {
            get {
                return eTransactionPaymentEnabledFieldSpecified;
            }
            set {
                eTransactionPaymentEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// IPN integration support enable status, this allows emails to
        /// include IPN link
        /// 
        /// </summary>
        public bool IPNSupportEnabled {
            get {
                return iPNSupportEnabledField;
            }
            set {
                iPNSupportEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IPNSupportEnabledSpecified {
            get {
                return iPNSupportEnabledFieldSpecified;
            }
            set {
                iPNSupportEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Specify Invoice Message
        /// 
        /// </summary>
        public string InvoiceMessage {
            get {
                return invoiceMessageField;
            }
            set {
                invoiceMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable specifying Service Dates
        /// 
        /// </summary>
        public bool AllowServiceDate {
            get {
                return allowServiceDateField;
            }
            set {
                allowServiceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowServiceDateSpecified {
            get {
                return allowServiceDateFieldSpecified;
            }
            set {
                allowServiceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enable specifying Shipping Info
        /// 
        /// </summary>
        public bool AllowShipping {
            get {
                return allowShippingField;
            }
            set {
                allowShippingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AllowShippingSpecified {
            get {
                return allowShippingFieldSpecified;
            }
            set {
                allowShippingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default shipping account
        /// 
        /// </summary>
        public string DefaultShippingAccount {
            get {
                return defaultShippingAccountField;
            }
            set {
                defaultShippingAccountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default ItemId Reference type that is selected as part of company
        /// setup
        /// 
        /// </summary>
        public ReferenceType DefaultItem {
            get {
                return defaultItemField;
            }
            set {
                defaultItemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default Terms
        /// 
        /// </summary>
        public ReferenceType DefaultTerms {
            get {
                return defaultTermsField;
            }
            set {
                defaultTermsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product:QBO Default Delivery Method of Invoice
        /// and other sales forms - Print, Email are normal options
        /// 
        /// </summary>
        public string DefaultDeliveryMethod {
            get {
                return defaultDeliveryMethodField;
            }
            set {
                defaultDeliveryMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:ALL
        /// Apply Credit Automatically
        /// 
        /// </summary>
        public bool AutoApplyCredit {
            get {
                return autoApplyCreditField;
            }
            set {
                autoApplyCreditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AutoApplyCreditSpecified {
            get {
                return autoApplyCreditFieldSpecified;
            }
            set {
                autoApplyCreditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Apply Payments Automatically
        /// 
        /// </summary>
        public bool AutoApplyPayments {
            get {
                return autoApplyPaymentsField;
            }
            set {
                autoApplyPaymentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AutoApplyPaymentsSpecified {
            get {
                return autoApplyPaymentsFieldSpecified;
            }
            set {
                autoApplyPaymentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Print Item with Zero amount or not
        /// 
        /// </summary>
        public bool PrintItemWithZeroAmount {
            get {
                return printItemWithZeroAmountField;
            }
            set {
                printItemWithZeroAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PrintItemWithZeroAmountSpecified {
            get {
                return printItemWithZeroAmountFieldSpecified;
            }
            set {
                printItemWithZeroAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Cloud Max Length: 256
        /// [b]QuickBooks
        /// Notes[/b][br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public ReferenceType DefaultShipMethodRef {
            get {
                return defaultShipMethodRefField;
            }
            set {
                defaultShipMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Default markup rate used to calculate
        /// the markup amount on the transactions. To enter a markup rate of
        /// 8.5%, enter 8.5, not 0.085.
        /// </summary>
        public decimal DefaultMarkup {
            get {
                return defaultMarkupField;
            }
            set {
                defaultMarkupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultMarkupSpecified {
            get {
                return defaultMarkupFieldSpecified;
            }
            set {
                defaultMarkupFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// 
        /// </summary>
        public bool TrackReimbursableExpensesAsIncome {
            get {
                return trackReimbursableExpensesAsIncomeField;
            }
            set {
                trackReimbursableExpensesAsIncomeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackReimbursableExpensesAsIncomeSpecified {
            get {
                return trackReimbursableExpensesAsIncomeFieldSpecified;
            }
            set {
                trackReimbursableExpensesAsIncomeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: used by QB desktop, not used by QBO
        /// 
        /// </summary>
        public bool UsingSalesOrders {
            get {
                return usingSalesOrdersField;
            }
            set {
                usingSalesOrdersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingSalesOrdersSpecified {
            get {
                return usingSalesOrdersFieldSpecified;
            }
            set {
                usingSalesOrdersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: used by QB desktop, not used by QBO
        /// 
        /// </summary>
        public bool UsingPriceLevels {
            get {
                return usingPriceLevelsField;
            }
            set {
                usingPriceLevelsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingPriceLevelsSpecified {
            get {
                return usingPriceLevelsFieldSpecified;
            }
            set {
                usingPriceLevelsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// QBW: used by QB desktop, not used by QBO
        /// 
        /// </summary>
        public string DefaultFOB {
            get {
                return defaultFOBField;
            }
            set {
                defaultFOBField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default Customer message
        /// 
        /// </summary>
        public string DefaultCustomerMessage {
            get {
                return defaultCustomerMessageField;
            }
            set {
                defaultCustomerMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: The definition of a custom field for an Intuit type to add additional columns dynamically on a existing Intuit entities. This entity is not extended from IntuitEntity so that it can be manipulated by specifying the DefinitionId.
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NumberTypeCustomFieldDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTypeCustomFieldDefinition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public abstract partial class CustomFieldDefinition : IntuitEntity, IEntity {
        
        private string entityTypeField;
        
        private string nameField;
        
        private bool hiddenField;
        
        private bool requiredField;
        
        private string appIdField;
        
        public CustomFieldDefinition() {
            hiddenField = false;
            requiredField = false;
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Intuit entity type to which the CustomFieldDefinition is associated. Valid values are defined in the objectNameEnumType.[br /]Required for the create operation.
        /// Required: ALL
        /// 
        /// </summary>
        public string EntityType {
            get {
                return entityTypeField;
            }
            set {
                entityTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the CustomField entity.[br /]Required for the create operation.
        /// Required: ALL
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the custom field is Private; false if Public and can be shared among different applications.
        /// 
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Hidden {
            get {
                return hiddenField;
            }
            set {
                hiddenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the custom field must be specified for every instance of the Parent entity for which the CustomFieldDefinition is defined. Data Services dpes not verify the value of that field.
        /// 
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Required {
            get {
                return requiredField;
            }
            set {
                requiredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Identifier of Partner AppId that corresponds to this CustomField.
        /// 
        /// </summary>
        public string AppId {
            get {
                return appIdField;
            }
            set {
                appIdField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines VendorAndPurchase Prefs details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class VendorAndPurchasesPrefs {
        
        private bool enableBillsField;
        
        private bool enableBillsFieldSpecified;
        
        private bool trackingByCustomerField;
        
        private bool trackingByCustomerFieldSpecified;
        
        private bool billableExpenseTrackingField;
        
        private bool billableExpenseTrackingFieldSpecified;
        
        private ReferenceType defaultTermsField;
        
        private decimal defaultMarkupField;
        
        private bool defaultMarkupFieldSpecified;
        
        private ReferenceType defaultMarkupAccountField;
        
        private bool automaticBillPaymentField;
        
        private bool automaticBillPaymentFieldSpecified;
        
        private bool tPAREnabledField;
        
        private bool tPAREnabledFieldSpecified;
        
        private CustomFieldDefinition[] pOCustomFieldField;
        
        private string msgToVendorsField;
        
        private bool usingInventoryField;
        
        private bool usingInventoryFieldSpecified;
        
        private bool usingMultiLocationInventoryField;
        
        private bool usingMultiLocationInventoryFieldSpecified;
        
        private int daysBillsAreDueField;
        
        private bool daysBillsAreDueFieldSpecified;
        
        private ReferenceType discountAccountRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enables manage bills
        /// 
        /// </summary>
        public bool EnableBills {
            get {
                return enableBillsField;
            }
            set {
                enableBillsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EnableBillsSpecified {
            get {
                return enableBillsFieldSpecified;
            }
            set {
                enableBillsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enables tracking by customers
        /// 
        /// </summary>
        public bool TrackingByCustomer {
            get {
                return trackingByCustomerField;
            }
            set {
                trackingByCustomerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TrackingByCustomerSpecified {
            get {
                return trackingByCustomerFieldSpecified;
            }
            set {
                trackingByCustomerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enable BillableExpense tracking
        /// 
        /// </summary>
        public bool BillableExpenseTracking {
            get {
                return billableExpenseTrackingField;
            }
            set {
                billableExpenseTrackingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableExpenseTrackingSpecified {
            get {
                return billableExpenseTrackingFieldSpecified;
            }
            set {
                billableExpenseTrackingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Default Terms
        /// 
        /// </summary>
        public ReferenceType DefaultTerms {
            get {
                return defaultTermsField;
            }
            set {
                defaultTermsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Default markup rate used to calculate
        /// the markup amount on the transactions. To enter a markup rate of
        /// 8.5%, enter 8.5, not 0.085.
        /// </summary>
        public decimal DefaultMarkup {
            get {
                return defaultMarkupField;
            }
            set {
                defaultMarkupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultMarkupSpecified {
            get {
                return defaultMarkupFieldSpecified;
            }
            set {
                defaultMarkupFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Default markup Account used to
        /// calculate the markup amount on the transactions.
        /// 
        /// </summary>
        public ReferenceType DefaultMarkupAccount {
            get {
                return defaultMarkupAccountField;
            }
            set {
                defaultMarkupAccountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Apply automatic bill payment
        /// 
        /// </summary>
        public bool AutomaticBillPayment {
            get {
                return automaticBillPaymentField;
            }
            set {
                automaticBillPaymentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AutomaticBillPaymentSpecified {
            get {
                return automaticBillPaymentFieldSpecified;
            }
            set {
                automaticBillPaymentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Enables TPAR by vendors
        /// 
        /// </summary>
        public bool TPAREnabled {
            get {
                return tPAREnabledField;
            }
            set {
                tPAREnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TPAREnabledSpecified {
            get {
                return tPAREnabledFieldSpecified;
            }
            set {
                tPAREnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Defines the CustomField definitions
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("POCustomField")]
        public CustomFieldDefinition[] POCustomField {
            get {
                return pOCustomFieldField;
            }
            set {
                pOCustomFieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Message to vendors
        /// 
        /// </summary>
        public string MsgToVendors {
            get {
                return msgToVendorsField;
            }
            set {
                msgToVendorsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// 
        /// </summary>
        public bool UsingInventory {
            get {
                return usingInventoryField;
            }
            set {
                usingInventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingInventorySpecified {
            get {
                return usingInventoryFieldSpecified;
            }
            set {
                usingInventoryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// 
        /// </summary>
        public bool UsingMultiLocationInventory {
            get {
                return usingMultiLocationInventoryField;
            }
            set {
                usingMultiLocationInventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UsingMultiLocationInventorySpecified {
            get {
                return usingMultiLocationInventoryFieldSpecified;
            }
            set {
                usingMultiLocationInventoryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// 
        /// </summary>
        public int DaysBillsAreDue {
            get {
                return daysBillsAreDueField;
            }
            set {
                daysBillsAreDueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DaysBillsAreDueSpecified {
            get {
                return daysBillsAreDueFieldSpecified;
            }
            set {
                daysBillsAreDueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Cloud Max Length: 4000
        /// [b]QuickBooks Notes[/b][br
        /// /]
        /// Max Length: 31 or 159 (for a fully qualified name)
        /// 
        /// </summary>
        public ReferenceType DiscountAccountRef {
            get {
                return discountAccountRefField;
            }
            set {
                discountAccountRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines VendorAndPurchase Prefs details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TimeTrackingPrefs {
        
        private bool useServicesField;
        
        private bool useServicesFieldSpecified;
        
        private ReferenceType defaultTimeItemField;
        
        private bool billCustomersField;
        
        private bool billCustomersFieldSpecified;
        
        private bool showBillRateToAllField;
        
        private bool showBillRateToAllFieldSpecified;
        
        private WeekEnum workWeekStartDateField;
        
        private bool workWeekStartDateFieldSpecified;
        
        private bool timeTrackingEnabledField;
        
        private bool timeTrackingEnabledFieldSpecified;
        
        private bool markTimeEntriesBillableField;
        
        private bool markTimeEntriesBillableFieldSpecified;
        
        private bool markExpensesAsBillableField;
        
        private bool markExpensesAsBillableFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enables services for time tracking
        /// 
        /// </summary>
        public bool UseServices {
            get {
                return useServicesField;
            }
            set {
                useServicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UseServicesSpecified {
            get {
                return useServicesFieldSpecified;
            }
            set {
                useServicesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product:QBO Default TimeItem Id
        /// 
        /// </summary>
        public ReferenceType DefaultTimeItem {
            get {
                return defaultTimeItemField;
            }
            set {
                defaultTimeItemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enables billing customers for time
        /// 
        /// </summary>
        public bool BillCustomers {
            get {
                return billCustomersField;
            }
            set {
                billCustomersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillCustomersSpecified {
            get {
                return billCustomersFieldSpecified;
            }
            set {
                billCustomersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Enables billing rate to all employees
        /// 
        /// </summary>
        public bool ShowBillRateToAll {
            get {
                return showBillRateToAllField;
            }
            set {
                showBillRateToAllField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ShowBillRateToAllSpecified {
            get {
                return showBillRateToAllFieldSpecified;
            }
            set {
                showBillRateToAllFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// Work week starting day
        /// 
        /// </summary>
        public WeekEnum WorkWeekStartDate {
            get {
                return workWeekStartDateField;
            }
            set {
                workWeekStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool WorkWeekStartDateSpecified {
            get {
                return workWeekStartDateFieldSpecified;
            }
            set {
                workWeekStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Time Tracking preference from QB
        /// Desktop
        /// 
        /// </summary>
        public bool TimeTrackingEnabled {
            get {
                return timeTrackingEnabledField;
            }
            set {
                timeTrackingEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TimeTrackingEnabledSpecified {
            get {
                return timeTrackingEnabledFieldSpecified;
            }
            set {
                timeTrackingEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// MarkTimeEntriesBillable preference
        /// from QB Desktop
        /// 
        /// </summary>
        public bool MarkTimeEntriesBillable {
            get {
                return markTimeEntriesBillableField;
            }
            set {
                markTimeEntriesBillableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MarkTimeEntriesBillableSpecified {
            get {
                return markTimeEntriesBillableFieldSpecified;
            }
            set {
                markTimeEntriesBillableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// MarkExpensesAsBillable preference from
        /// QB Desktop
        /// 
        /// </summary>
        public bool MarkExpensesAsBillable {
            get {
                return markExpensesAsBillableField;
            }
            set {
                markExpensesAsBillableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MarkExpensesAsBillableSpecified {
            get {
                return markExpensesAsBillableFieldSpecified;
            }
            set {
                markExpensesAsBillableFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Messages Prefs details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class EmailMessagesPrefs {
        
        private NameValue[] nameValueField;
        
        private EmailMessage invoiceMessageField;
        
        private EmailMessage estimateMessageField;
        
        private EmailMessage salesReceiptMessageField;
        
        private EmailMessage statementMessageField;
        
        /// <remarks/>
        /// <summary>
        /// Specifies Preferences classified as email
        /// messages are classified as Name-Value pair
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default email subject and message for
        /// Invoice.
        /// 
        /// </summary>
        public EmailMessage InvoiceMessage {
            get {
                return invoiceMessageField;
            }
            set {
                invoiceMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default email subject and message for
        /// Estimate.
        /// 
        /// </summary>
        public EmailMessage EstimateMessage {
            get {
                return estimateMessageField;
            }
            set {
                estimateMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default email subject and message for
        /// Sales receipt.
        /// 
        /// </summary>
        public EmailMessage SalesReceiptMessage {
            get {
                return salesReceiptMessageField;
            }
            set {
                salesReceiptMessageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBO
        /// Default email subject and message for
        /// Statement.
        /// 
        /// </summary>
        public EmailMessage StatementMessage {
            get {
                return statementMessageField;
            }
            set {
                statementMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Messages Prefs details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class PrintDocumentPrefs {
        
        private NameValue[] nameValueField;
        
        /// <remarks/>
        /// <summary>
        /// Specifies Preferences classified as email
        /// messages are classified as Name-Value pair
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Report Prefs details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ReportPrefs {
        
        private ReportBasisEnum reportBasisField;
        
        private bool reportBasisFieldSpecified;
        
        private bool calcAgingReportFromTxnDateField;
        
        private bool calcAgingReportFromTxnDateFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:All
        /// report basis
        /// 
        /// </summary>
        public ReportBasisEnum ReportBasis {
            get {
                return reportBasisField;
            }
            set {
                reportBasisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReportBasisSpecified {
            get {
                return reportBasisFieldSpecified;
            }
            set {
                reportBasisFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// If true, the Aging Reports are based
        /// on the transaction date.[br /]
        /// If false, the Aging Reports are
        /// based on the due date.
        /// 
        /// </summary>
        public bool CalcAgingReportFromTxnDate {
            get {
                return calcAgingReportFromTxnDateField;
            }
            set {
                calcAgingReportFromTxnDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CalcAgingReportFromTxnDateSpecified {
            get {
                return calcAgingReportFromTxnDateFieldSpecified;
            }
            set {
                calcAgingReportFromTxnDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Summary Report basis.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ReportBasisEnum {
        
        /// <remarks/>
        Accrual,
        
        /// <remarks/>
        Cash,
    }
    
    /// <remarks/>
    /// <summary>
    /// Any other preference not covered in base is covered
    /// as name value pair, for detailed explanation look at the document
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OtherPrefs {
        
        private NameValue[] nameValueField;
        
        /// <remarks/>
        /// <summary>
        /// Specifies extension of Preference entity to
        /// allow extension of Name-Value pair based extension at the top
        /// level
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValue")]
        public NameValue[] NameValue {
            get {
                return nameValueField;
            }
            set {
                nameValueField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Defines Preference strongly typed object with
    /// extensions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Preferences : IntuitEntity, IEntity {
        
        private CompanyAccountingPrefs accountingInfoPrefsField;
        
        private AdvancedInventoryPrefs advancedInventoryPrefsField;
        
        private ProductAndServicesPrefs productAndServicesPrefsField;
        
        private SalesFormsPrefs salesFormsPrefsField;
        
        private EmailMessagesPrefs emailMessagesPrefsField;
        
        private NameValue[] printDocumentPrefsField;
        
        private VendorAndPurchasesPrefs vendorAndPurchasesPrefsField;
        
        private TimeTrackingPrefs timeTrackingPrefsField;
        
        private TaxPrefs taxPrefsField;
        
        private FinanceChargePrefs financeChargesPrefsField;
        
        private CurrencyPrefs currencyPrefsField;
        
        private ReportPrefs reportPrefsField;
        
        private NameValue[] otherPrefsField;
        
        /// <remarks/>
        /// <summary>
        /// Accounting info Preferences
        /// </summary>
        public CompanyAccountingPrefs AccountingInfoPrefs {
            get {
                return accountingInfoPrefsField;
            }
            set {
                accountingInfoPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Accounting info Preferences
        /// </summary>
        public AdvancedInventoryPrefs AdvancedInventoryPrefs {
            get {
                return advancedInventoryPrefsField;
            }
            set {
                advancedInventoryPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Product and Service Preferences
        /// 
        /// </summary>
        public ProductAndServicesPrefs ProductAndServicesPrefs {
            get {
                return productAndServicesPrefsField;
            }
            set {
                productAndServicesPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Sales Form Preferences
        /// </summary>
        public SalesFormsPrefs SalesFormsPrefs {
            get {
                return salesFormsPrefsField;
            }
            set {
                salesFormsPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Email messages Preferences
        /// </summary>
        public EmailMessagesPrefs EmailMessagesPrefs {
            get {
                return emailMessagesPrefsField;
            }
            set {
                emailMessagesPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Printable document preferences
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public NameValue[] PrintDocumentPrefs {
            get {
                return printDocumentPrefsField;
            }
            set {
                printDocumentPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Vendor and purchases Preferences
        /// 
        /// </summary>
        public VendorAndPurchasesPrefs VendorAndPurchasesPrefs {
            get {
                return vendorAndPurchasesPrefsField;
            }
            set {
                vendorAndPurchasesPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Vendor and purchases Preferences
        /// 
        /// </summary>
        public TimeTrackingPrefs TimeTrackingPrefs {
            get {
                return timeTrackingPrefsField;
            }
            set {
                timeTrackingPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Tax Preferences
        /// </summary>
        public TaxPrefs TaxPrefs {
            get {
                return taxPrefsField;
            }
            set {
                taxPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// FinanceCharges Preferences
        /// </summary>
        public FinanceChargePrefs FinanceChargesPrefs {
            get {
                return financeChargesPrefsField;
            }
            set {
                financeChargesPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Currency Preferences
        /// </summary>
        public CurrencyPrefs CurrencyPrefs {
            get {
                return currencyPrefsField;
            }
            set {
                currencyPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Report Preferences
        /// </summary>
        public ReportPrefs ReportPrefs {
            get {
                return reportPrefsField;
            }
            set {
                reportPrefsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies extension of Preference entity to
        /// allow extension of Name-Value pair based extension at the top
        /// level
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public NameValue[] OtherPrefs {
            get {
                return otherPrefsField;
            }
            set {
                otherPrefsField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// The UOM type defines the data used to represent a
    /// set of equivalent units and the conversion rates to other related
    /// units. It allows showing what quantities, prices, rates, and costs
    /// are based on.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class UOM : IntuitEntity, IEntity {
        
        private string nameField;
        
        private string abbrvField;
        
        private UOMBaseTypeEnum baseTypeField;
        
        private bool baseTypeFieldSpecified;
        
        private UOMConvUnit[] convUnitField;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name of the Unit of
        /// Measure.[br /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Abbreviation of the Unit of Measure.[br /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public string Abbrv {
            get {
                return abbrvField;
            }
            set {
                abbrvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// [br /]
        /// Required for the create operation. [br /]
        /// 
        /// </summary>
        public UOMBaseTypeEnum BaseType {
            get {
                return baseTypeField;
            }
            set {
                baseTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BaseTypeSpecified {
            get {
                return baseTypeFieldSpecified;
            }
            set {
                baseTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ConvUnit")]
        public UOMConvUnit[] ConvUnit {
            get {
                return convUnitField;
            }
            set {
                convUnitField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Related UOM
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class UOMConvUnit {
        
        private string nameField;
        
        private string abbrvField;
        
        private decimal convRatioField;
        
        private bool convRatioFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name of the Unit of Measure.[br
        /// /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Abbreviation of the Unit of Measure.[br /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public string Abbrv {
            get {
                return abbrvField;
            }
            set {
                abbrvField = value;
            }
        }
        
        /// <remarks/>
        public decimal ConvRatio {
            get {
                return convRatioField;
            }
            set {
                convRatioField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ConvRatioSpecified {
            get {
                return convRatioFieldSpecified;
            }
            set {
                convRatioFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// The name of a template used for a specific form
    /// presentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TemplateName : IntuitEntity, IEntity {
        
        private string nameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private TemplateTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Template
        /// name.[br /]
        /// [br /]
        /// Required for the create operation. [br /]
        /// Max Length: 31
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive templates may be
        /// hidden from most display purposes and may not be used on
        /// financial tansactions.
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public TemplateTypeEnum Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TypeSpecified {
            get {
                return typeFieldSpecified;
            }
            set {
                typeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Category values for
    /// Attachable
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum AttachableCategoryEnum {
        
        /// <remarks/>
        Image,
        
        /// <remarks/>
        Signature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Contact Photo")]
        ContactPhoto,
        
        /// <remarks/>
        Receipt,
        
        /// <remarks/>
        Document,
        
        /// <remarks/>
        Sound,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Describes the details of
    /// the attachment.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Attachable : IntuitEntity, IEntity {
        
        private string fileNameField;
        
        private string fileAccessUriField;
        
        private string tempDownloadUriField;
        
        private long sizeField;
        
        private bool sizeFieldSpecified;
        
        private string contentTypeField;
        
        private string categoryField;
        
        private string latField;
        
        private string longField;
        
        private string placeNameField;
        
        private string noteField;
        
        private string tagField;
        
        private string thumbnailFileAccessUriField;
        
        private string thumbnailTempDownloadUriField;
        
        private IntuitAnyType attachableExField;
        
        /// <remarks/>
        /// <summary>
        /// FileName of the attachment
        /// Max Length: 1000
        /// 
        /// </summary>
        public string FileName {
            get {
                return fileNameField;
            }
            set {
                fileNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// FullPath FileAccess URI of the attachment,
        /// output only
        /// 
        /// </summary>
        public string FileAccessUri {
            get {
                return fileAccessUriField;
            }
            set {
                fileAccessUriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Output only. TempDownload URI which can be
        /// directly downloaded by clients
        /// 
        /// </summary>
        public string TempDownloadUri {
            get {
                return tempDownloadUriField;
            }
            set {
                tempDownloadUriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Size of the attachment
        /// 
        /// </summary>
        public long Size {
            get {
                return sizeField;
            }
            set {
                sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SizeSpecified {
            get {
                return sizeFieldSpecified;
            }
            set {
                sizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// ContentType of the attachment
        /// 
        /// </summary>
        public string ContentType {
            get {
                return contentTypeField;
            }
            set {
                contentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Category of the attachment
        /// 
        /// </summary>
        public string Category {
            get {
                return categoryField;
            }
            set {
                categoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Latitude from where the attachment was
        /// requested
        /// 
        /// </summary>
        public string Lat {
            get {
                return latField;
            }
            set {
                latField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Longitude from where the attachment was
        /// requested
        /// 
        /// </summary>
        public string Long {
            get {
                return longField;
            }
            set {
                longField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// PlaceName from where the attachment was
        /// requested
        /// 
        /// </summary>
        public string PlaceName {
            get {
                return placeNameField;
            }
            set {
                placeNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Note for the attachment or standalone note
        /// 
        /// </summary>
        public string Note {
            get {
                return noteField;
            }
            set {
                noteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Tag name for the requested attachment
        /// 
        /// </summary>
        public string Tag {
            get {
                return tagField;
            }
            set {
                tagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// FullPath FileAccess URI of the attachment
        /// thumbnail if the attachment file is of a content type with
        /// thumbnail support, output only
        /// 
        /// </summary>
        public string ThumbnailFileAccessUri {
            get {
                return thumbnailFileAccessUriField;
            }
            set {
                thumbnailFileAccessUriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Output only. Thumbnail TempDownload URI which
        /// can be directly downloaded by clients. This is only available if
        /// the attachment file is of a content type with thumbnail support
        /// 
        /// </summary>
        public string ThumbnailTempDownloadUri {
            get {
                return thumbnailTempDownloadUriField;
            }
            set {
                thumbnailTempDownloadUriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies extension entity to allow extension
        /// 
        /// </summary>
        public IntuitAnyType AttachableEx {
            get {
                return attachableExField;
            }
            set {
                attachableExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Product: All
    /// Description: Enumeration of
    /// OLBTransactions Status
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum OLBTxnStatusEnum {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Approved,
        
        /// <remarks/>
        Deleted,
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes OLBTransaction instance - one per
    /// transaction downloaded
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OLBTxnDetail {
        
        private System.DateTime postDateField;
        
        private bool postDateFieldSpecified;
        
        private System.DateTime txnDateField;
        
        private bool txnDateFieldSpecified;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private string referenceNumberField;
        
        private string txnStatusField;
        
        /// <remarks/>
        /// <summary>
        /// Post date of the transaction
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime PostDate {
            get {
                return postDateField;
            }
            set {
                postDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PostDateSpecified {
            get {
                return postDateFieldSpecified;
            }
            set {
                postDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Transaction date
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime TxnDate {
            get {
                return txnDateField;
            }
            set {
                txnDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnDateSpecified {
            get {
                return txnDateFieldSpecified;
            }
            set {
                txnDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Amount of the transaction
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Reference Number of downloaded transaction
        /// 
        /// </summary>
        public string ReferenceNumber {
            get {
                return referenceNumberField;
            }
            set {
                referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Olb Status of a transaction, Use
        /// OLBTransactionStausEnum Approved/Pending/Deleted
        /// 
        /// </summary>
        public string TxnStatus {
            get {
                return txnStatusField;
            }
            set {
                txnStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes OLBTransactions list that are downloaded
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OLBTxn {
        
        private ReferenceType accountIdField;
        
        private System.DateTime lastPostingDateField;
        
        private bool lastPostingDateFieldSpecified;
        
        private System.DateTime txnsDownloadTimeField;
        
        private bool txnsDownloadTimeFieldSpecified;
        
        private OLBTxnDetail[] oLBTxnDetailField;
        
        private int startPositionField;
        
        private bool startPositionFieldSpecified;
        
        private int maxResultsField;
        
        private bool maxResultsFieldSpecified;
        
        private int totalCountField;
        
        private bool totalCountFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: AccountId of the transaction
        /// 
        /// </summary>
        public ReferenceType AccountId {
            get {
                return accountIdField;
            }
            set {
                accountIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Last Posting date of OLB transactions where downloaded from the
        /// bank
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime LastPostingDate {
            get {
                return lastPostingDateField;
            }
            set {
                lastPostingDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastPostingDateSpecified {
            get {
                return lastPostingDateFieldSpecified;
            }
            set {
                lastPostingDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Last time OLB transactions were downloaded from the bank
        /// 
        /// </summary>
        public System.DateTime TxnsDownloadTime {
            get {
                return txnsDownloadTimeField;
            }
            set {
                txnsDownloadTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TxnsDownloadTimeSpecified {
            get {
                return txnsDownloadTimeFieldSpecified;
            }
            set {
                txnsDownloadTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Details of OLB transactions
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OLBTxnDetail")]
        public OLBTxnDetail[] OLBTxnDetail {
            get {
                return oLBTxnDetailField;
            }
            set {
                oLBTxnDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the starting row number in this result
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int startPosition {
            get {
                return startPositionField;
            }
            set {
                startPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool startPositionSpecified {
            get {
                return startPositionFieldSpecified;
            }
            set {
                startPositionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the number of records in this result
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int maxResults {
            get {
                return maxResultsField;
            }
            set {
                maxResultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool maxResultsSpecified {
            get {
                return maxResultsFieldSpecified;
            }
            set {
                maxResultsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the total count of records that satisfy
        /// the filter condition
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int totalCount {
            get {
                return totalCountField;
            }
            set {
                totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool totalCountSpecified {
            get {
                return totalCountFieldSpecified;
            }
            set {
                totalCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes OLBTransactions list that are downloaded
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OLBTransaction {
        
        private System.DateTime oLBDownloadTimeField;
        
        private bool oLBDownloadTimeFieldSpecified;
        
        private OLBTxn[] oLBTxnField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Last time OLB transactions where downloaded from the bank
        /// 
        /// </summary>
        public System.DateTime OLBDownloadTime {
            get {
                return oLBDownloadTimeField;
            }
            set {
                oLBDownloadTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OLBDownloadTimeSpecified {
            get {
                return oLBDownloadTimeFieldSpecified;
            }
            set {
                oLBDownloadTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// List of OLB transactions
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OLBTxn")]
        public OLBTxn[] OLBTxn {
            get {
                return oLBTxnField;
            }
            set {
                oLBTxnField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes Budget specifications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Budget : IntuitEntity, IEntity {
        
        private string nameField;
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private BudgetTypeEnum budgetTypeField;
        
        private bool budgetTypeFieldSpecified;
        
        private BudgetEntryTypeEnum budgetEntryTypeField;
        
        private bool budgetEntryTypeFieldSpecified;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private BudgetDetail[] budgetDetailField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Name of the budget
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Starting date of the budget
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return startDateField;
            }
            set {
                startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartDateSpecified {
            get {
                return startDateFieldSpecified;
            }
            set {
                startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: End date of the budget
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return endDateField;
            }
            set {
                endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndDateSpecified {
            get {
                return endDateFieldSpecified;
            }
            set {
                endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Budget Type
        /// 
        /// </summary>
        public BudgetTypeEnum BudgetType {
            get {
                return budgetTypeField;
            }
            set {
                budgetTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BudgetTypeSpecified {
            get {
                return budgetTypeFieldSpecified;
            }
            set {
                budgetTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Budget Entry Type
        /// 
        /// </summary>
        public BudgetEntryTypeEnum BudgetEntryType {
            get {
                return budgetEntryTypeField;
            }
            set {
                budgetEntryTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BudgetEntryTypeSpecified {
            get {
                return budgetEntryTypeFieldSpecified;
            }
            set {
                budgetEntryTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Active budget or inactive
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Budget details are here
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BudgetDetail")]
        public BudgetDetail[] BudgetDetail {
            get {
                return budgetDetailField;
            }
            set {
                budgetDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes budget details for each budget
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BudgetDetail {
        
        private System.DateTime budgetDateField;
        
        private bool budgetDateFieldSpecified;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        private ReferenceType accountRefField;
        
        private ReferenceType customerRefField;
        
        private ReferenceType classRefField;
        
        private ReferenceType departmentRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Budget date of the budget
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime BudgetDate {
            get {
                return budgetDateField;
            }
            set {
                budgetDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BudgetDateSpecified {
            get {
                return budgetDateFieldSpecified;
            }
            set {
                budgetDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Amount corresponding to the budget date and Account or Class Or
        /// Department or Customer
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Account Reference
        /// 
        /// </summary>
        public ReferenceType AccountRef {
            get {
                return accountRefField;
            }
            set {
                accountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Customer Reference
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Class Reference
        /// 
        /// </summary>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Department Reference
        /// 
        /// </summary>
        public ReferenceType DepartmentRef {
            get {
                return departmentRefField;
            }
            set {
                departmentRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Describes metadata
    /// associated with TDS entity.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TDSMetadata : IntuitEntity, IEntity {
        
        private NameValue[] tDSEntityTypesField;
        
        private NameValue[] tDSSectionTypesField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Provides list of TDS entity types supported for India region.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TDSEntityTypes")]
        public NameValue[] TDSEntityTypes {
            get {
                return tDSEntityTypesField;
            }
            set {
                tDSEntityTypesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Provides list of TDS section types supported for India region.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TDSSectionTypes")]
        public NameValue[] TDSSectionTypes {
            get {
                return tDSSectionTypesField;
            }
            set {
                tDSSectionTypesField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Product: QBO Description: Reimburse charge object
    /// for QBO
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ReimburseCharge : Transaction {
        
        private ReferenceType customerRefField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// Product: QBO Description: Customer Reference
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Total amount of the reimburse charge.
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Financial transaction representing a request for
    /// credit on payment for
    /// goods or services that have been sold.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ChargeCredit : Transaction {
        
        private bool creditField;
        
        private bool creditFieldSpecified;
        
        private ReferenceType customerRefField;
        
        private ReferenceType remitToRefField;
        
        private ReferenceType aRAccountRefField;
        
        private ReferenceType classRefField;
        
        private System.DateTime dueDateField;
        
        private bool dueDateFieldSpecified;
        
        private System.DateTime billedDateField;
        
        private bool billedDateFieldSpecified;
        
        private decimal totalAmtField;
        
        private bool totalAmtFieldSpecified;
        
        private IntuitAnyType chargeCreditExField;
        
        /// <remarks/>
        /// <summary>
        /// If Credit is Null or False, it is considered as
        /// Charge. If true, the ChargeCredit represents a Refund
        /// 
        /// </summary>
        public bool Credit {
            get {
                return creditField;
            }
            set {
                creditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditSpecified {
            get {
                return creditFieldSpecified;
            }
            set {
                creditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents Customer (or Job)Reference
        /// 
        /// </summary>
        public ReferenceType CustomerRef {
            get {
                return customerRefField;
            }
            set {
                customerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Identifies the party or location that the
        /// payment is
        /// to be remitted to or sent to. [b]QuickBooks
        /// Notes[/b][br /] Non
        /// QB-writable.
        /// 
        /// </summary>
        public ReferenceType RemitToRef {
            get {
                return remitToRefField;
            }
            set {
                remitToRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// ARAccountReferenceGroup Identifies the AR
        /// Account to
        /// be used for this Credit Memo. [b]QuickBooks
        /// Notes[/b][br /] The AR
        /// Account should always be specified or a
        /// default will be used.
        /// 
        /// </summary>
        public ReferenceType ARAccountRef {
            get {
                return aRAccountRefField;
            }
            set {
                aRAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ClassRef {
            get {
                return classRefField;
            }
            set {
                classRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date when the Charge is to be paid.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DueDate {
            get {
                return dueDateField;
            }
            set {
                dueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DueDateSpecified {
            get {
                return dueDateFieldSpecified;
            }
            set {
                dueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date when the customer Statement was created
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime BilledDate {
            get {
                return billedDateField;
            }
            set {
                billedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BilledDateSpecified {
            get {
                return billedDateFieldSpecified;
            }
            set {
                billedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Indicates the total amount of the entity
        /// associated.
        /// This includes the total of all the charges,
        /// allowances and taxes.
        /// [b]QuickBooks Notes[/b][br /] Non
        /// QB-writable.
        /// 
        /// </summary>
        public decimal TotalAmt {
            get {
                return totalAmtField;
            }
            set {
                totalAmtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalAmtSpecified {
            get {
                return totalAmtFieldSpecified;
            }
            set {
                totalAmtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for
        /// ChargeCredit
        /// 
        /// </summary>
        public IntuitAnyType ChargeCreditEx {
            get {
                return chargeCreditExField;
            }
            set {
                chargeCreditExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Represents a Tax Return
    /// that is filed with a Tax Agency.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxReturn : IntuitEntity, IEntity {
        
        private bool upcomingFilingField;
        
        private bool upcomingFilingFieldSpecified;
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private System.DateTime fileDateField;
        
        private bool fileDateFieldSpecified;
        
        private System.DateTime agencyPaymentDateField;
        
        private bool agencyPaymentDateFieldSpecified;
        
        private decimal agencyPaymentAmountField;
        
        private bool agencyPaymentAmountFieldSpecified;
        
        private decimal netTaxAmountDueField;
        
        private bool netTaxAmountDueFieldSpecified;
        
        private decimal flatRateSavingsAmountDueField;
        
        private bool flatRateSavingsAmountDueFieldSpecified;
        
        private decimal payGWithheldAmountField;
        
        private bool payGWithheldAmountFieldSpecified;
        
        private ReferenceType agencyRefField;
        
        private TaxReturnStatusEnum taxReturnStatusField;
        
        private bool taxReturnStatusFieldSpecified;
        
        private string taxReturnEFilingFailureReasonField;
        
        private System.DateTime eFileErrorFixByDateField;
        
        private bool eFileErrorFixByDateFieldSpecified;
        
        private AgencyPaymentMethodEnum agencyPaymentMethodField;
        
        private bool agencyPaymentMethodFieldSpecified;
        
        private string taxReturnCodeField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: True when this filing
        /// is an upcoming Filing for a currently Open Filing Period. False
        /// otherwise.
        /// 
        /// </summary>
        public bool UpcomingFiling {
            get {
                return upcomingFilingField;
            }
            set {
                upcomingFilingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UpcomingFilingSpecified {
            get {
                return upcomingFilingFieldSpecified;
            }
            set {
                upcomingFilingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Start date of the
        /// Filing.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return startDateField;
            }
            set {
                startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartDateSpecified {
            get {
                return startDateFieldSpecified;
            }
            set {
                startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: End date of the
        /// Filing.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return endDateField;
            }
            set {
                endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndDateSpecified {
            get {
                return endDateFieldSpecified;
            }
            set {
                endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Date of the Filing.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime FileDate {
            get {
                return fileDateField;
            }
            set {
                fileDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FileDateSpecified {
            get {
                return fileDateFieldSpecified;
            }
            set {
                fileDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Date when actual payment to agency occurs
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime AgencyPaymentDate {
            get {
                return agencyPaymentDateField;
            }
            set {
                agencyPaymentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AgencyPaymentDateSpecified {
            get {
                return agencyPaymentDateFieldSpecified;
            }
            set {
                agencyPaymentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the payment amount paid to tax agency
        /// 
        /// </summary>
        public decimal AgencyPaymentAmount {
            get {
                return agencyPaymentAmountField;
            }
            set {
                agencyPaymentAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AgencyPaymentAmountSpecified {
            get {
                return agencyPaymentAmountFieldSpecified;
            }
            set {
                agencyPaymentAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the final Tax Amount due to the Tax
        /// Agency for a Filing
        /// </summary>
        public decimal NetTaxAmountDue {
            get {
                return netTaxAmountDueField;
            }
            set {
                netTaxAmountDueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool NetTaxAmountDueSpecified {
            get {
                return netTaxAmountDueFieldSpecified;
            }
            set {
                netTaxAmountDueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the FRS Amount due to the Tax Agency
        /// for a Filing Period. Applicable for UK only.
        /// </summary>
        public decimal FlatRateSavingsAmountDue {
            get {
                return flatRateSavingsAmountDueField;
            }
            set {
                flatRateSavingsAmountDueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool FlatRateSavingsAmountDueSpecified {
            get {
                return flatRateSavingsAmountDueFieldSpecified;
            }
            set {
                flatRateSavingsAmountDueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the PayGWithheld Amount due to the
        /// Tax Agency for a Filing Period. Applicable for AU only.
        /// 
        /// </summary>
        public decimal PayGWithheldAmount {
            get {
                return payGWithheldAmountField;
            }
            set {
                payGWithheldAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PayGWithheldAmountSpecified {
            get {
                return payGWithheldAmountFieldSpecified;
            }
            set {
                payGWithheldAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents the Agency
        /// of which this TaxReturn is a part.
        /// 
        /// </summary>
        public ReferenceType AgencyRef {
            get {
                return agencyRefField;
            }
            set {
                agencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents the status of the filing of the tax return
        /// 
        /// </summary>
        public TaxReturnStatusEnum TaxReturnStatus {
            get {
                return taxReturnStatusField;
            }
            set {
                taxReturnStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxReturnStatusSpecified {
            get {
                return taxReturnStatusFieldSpecified;
            }
            set {
                taxReturnStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents the failure reason of tax return e-filing with agency
        /// 
        /// </summary>
        public string TaxReturnEFilingFailureReason {
            get {
                return taxReturnEFilingFailureReasonField;
            }
            set {
                taxReturnEFilingFailureReasonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Last Date to rectify e-filing errors so that it can be filed in same period.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime EFileErrorFixByDate {
            get {
                return eFileErrorFixByDateField;
            }
            set {
                eFileErrorFixByDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EFileErrorFixByDateSpecified {
            get {
                return eFileErrorFixByDateFieldSpecified;
            }
            set {
                eFileErrorFixByDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents the payment method used while e-filing tax return with agency
        /// 
        /// </summary>
        public AgencyPaymentMethodEnum AgencyPaymentMethod {
            get {
                return agencyPaymentMethodField;
            }
            set {
                agencyPaymentMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AgencyPaymentMethodSpecified {
            get {
                return agencyPaymentMethodFieldSpecified;
            }
            set {
                agencyPaymentMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Represents the tax return code with the partner
        /// 
        /// </summary>
        public string TaxReturnCode {
            get {
                return taxReturnCodeField;
            }
            set {
                taxReturnCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Tax classification segregates different items into different classifications and the tax
    /// classification is one of the key parameters to determine appropriate tax on transactions involving items.
    /// Tax classifications are sourced by either tax governing authorities as in India/Malaysia or externally like Exactor.
    /// "Fuel", "Garments" and "Soft drinks" are a few examples of tax classification in layman terms.
    /// User can choose a specific tax classification for an item while creating it.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxClassification : IntuitEntity, IEntity {
        
        private string codeField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string levelField;
        
        private ReferenceType parentRefField;
        
        private ItemTypeEnum[] applicableToField;
        
        /// <remarks/>
        public string Code {
            get {
                return codeField;
            }
            set {
                codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Level {
            get {
                return levelField;
            }
            set {
                levelField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ApplicableTo")]
        public ItemTypeEnum[] ApplicableTo {
            get {
                return applicableToField;
            }
            set {
                applicableToField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Tax Payment/Refund made against filed taxReturn.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxPayment : IntuitEntity, IEntity {
        
        private System.DateTime paymentDateField;
        
        private bool paymentDateFieldSpecified;
        
        private ReferenceType paymentAccountRefField;
        
        private decimal paymentAmountField;
        
        private bool paymentAmountFieldSpecified;
        
        private string descriptionField;
        
        private bool refundField;
        
        private bool refundFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The tax payment date
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime PaymentDate {
            get {
                return paymentDateField;
            }
            set {
                paymentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentDateSpecified {
            get {
                return paymentDateFieldSpecified;
            }
            set {
                paymentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Account ID from which the payment was made (or refund was moved to)
        /// 
        /// </summary>
        public ReferenceType PaymentAccountRef {
            get {
                return paymentAccountRefField;
            }
            set {
                paymentAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies the tax payment amount paid towards a filed tax return.
        /// 
        /// </summary>
        public decimal PaymentAmount {
            get {
                return paymentAmountField;
            }
            set {
                paymentAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool PaymentAmountSpecified {
            get {
                return paymentAmountFieldSpecified;
            }
            set {
                paymentAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Memo/Description added for this payment.
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Indicate if this transaction is a refund. Returns false for the tax payment.
        /// 
        /// </summary>
        public bool Refund {
            get {
                return refundField;
            }
            set {
                refundField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RefundSpecified {
            get {
                return refundFieldSpecified;
            }
            set {
                refundFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Provides for strong-typing of the StringType CustomField.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class StringTypeCustomFieldDefinition : CustomFieldDefinition {
        
        private string defaultStringField;
        
        private string regularExpressionField;
        
        private int maxLengthField;
        
        private bool maxLengthFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default string value of the StringType CustomField.[br /]Max. length: 31 characters.
        /// 
        /// </summary>
        public string DefaultString {
            get {
                return defaultStringField;
            }
            set {
                defaultStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The regular expression string used to validate the StringType CustomField value.[br /]Max. length: 31 characters.
        /// 
        /// </summary>
        public string RegularExpression {
            get {
                return regularExpressionField;
            }
            set {
                regularExpressionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Maximum length allowed for the value of the string when creating/updating a StringType CustomField.
        /// 
        /// </summary>
        public int MaxLength {
            get {
                return maxLengthField;
            }
            set {
                maxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MaxLengthSpecified {
            get {
                return maxLengthFieldSpecified;
            }
            set {
                maxLengthFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Provides for strong-typing of the NumberType CustomField.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class NumberTypeCustomFieldDefinition : CustomFieldDefinition {
        
        private decimal defaultValueField;
        
        private bool defaultValueFieldSpecified;
        
        private decimal minValueField;
        
        private bool minValueFieldSpecified;
        
        private decimal maxValueField;
        
        private bool maxValueFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default decimal value for the NumberType CustomField.
        /// 
        /// </summary>
        public decimal DefaultValue {
            get {
                return defaultValueField;
            }
            set {
                defaultValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultValueSpecified {
            get {
                return defaultValueFieldSpecified;
            }
            set {
                defaultValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Minimum decimal value allowed when the NumberType CustomField is created/updated.
        /// 
        /// </summary>
        public decimal MinValue {
            get {
                return minValueField;
            }
            set {
                minValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MinValueSpecified {
            get {
                return minValueFieldSpecified;
            }
            set {
                minValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Maximum decimal value allowed when the NumberType CustomField is created/updated.
        /// 
        /// </summary>
        public decimal MaxValue {
            get {
                return maxValueField;
            }
            set {
                maxValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MaxValueSpecified {
            get {
                return maxValueFieldSpecified;
            }
            set {
                maxValueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Provides for strong-typing of the DateType CustomField.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class DateTypeCustomFieldDefinition : CustomFieldDefinition {
        
        private System.DateTime defaultDateField;
        
        private bool defaultDateFieldSpecified;
        
        private System.DateTime minDateField;
        
        private bool minDateFieldSpecified;
        
        private System.DateTime maxDateField;
        
        private bool maxDateFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default date value for the DateType CustomField.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime DefaultDate {
            get {
                return defaultDateField;
            }
            set {
                defaultDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultDateSpecified {
            get {
                return defaultDateFieldSpecified;
            }
            set {
                defaultDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Minimum date value allowed when the DateType CustomField is created/updated.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime MinDate {
            get {
                return minDateField;
            }
            set {
                minDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MinDateSpecified {
            get {
                return minDateFieldSpecified;
            }
            set {
                minDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Maximum date value allowed when the DateType CustomField is created/updated.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime MaxDate {
            get {
                return maxDateField;
            }
            set {
                maxDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool MaxDateSpecified {
            get {
                return maxDateFieldSpecified;
            }
            set {
                maxDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Provides for strong-typing of the BooleanType CustomField.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BooleanTypeCustomFieldDefinition : CustomFieldDefinition {
        
        private bool defaultValueField;
        
        private bool defaultValueFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default value of the BooleanType CustomField.
        /// 
        /// </summary>
        public bool DefaultValue {
            get {
                return defaultValueField;
            }
            set {
                defaultValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool DefaultValueSpecified {
            get {
                return defaultValueFieldSpecified;
            }
            set {
                defaultValueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Monetary value represented with as a currency code and decimal value. Moneyis always associated with another IntuitEntity and will not be manipulated as a standalone hence it is not extended from IntuitEntity.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Money {
        
        private string curCodeField;
        
        private decimal amountField;
        
        private bool amountFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Monetary unit as described by the ISO 4217 three letter currency code.
        /// 
        /// </summary>
        public string CurCode {
            get {
                return curCodeField;
            }
            set {
                curCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Monetary value.
        /// 
        /// </summary>
        public decimal Amount {
            get {
                return amountField;
            }
            set {
                amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool AmountSpecified {
            get {
                return amountFieldSpecified;
            }
            set {
                amountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of type of email addresses that the data sync process understands.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EmailAddressTypeEnum {
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        CC,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of type of addresses that the data sync process understands.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum PhysicalAddressTypeEnum {
        
        /// <remarks/>
        Billing,
        
        /// <remarks/>
        Shipping,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of type of phones that the data sync process understands.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TelephoneNumberTypeEnum {
        
        /// <remarks/>
        Business,
        
        /// <remarks/>
        Fax,
        
        /// <remarks/>
        Home,
        
        /// <remarks/>
        Mobile,
        
        /// <remarks/>
        Pager,
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        Secondary,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Telephone device type enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TelephoneDeviceTypeEnum {
        
        /// <remarks/>
        LandLine,
        
        /// <remarks/>
        Mobile,
        
        /// <remarks/>
        Fax,
        
        /// <remarks/>
        Pager,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Gender of a person enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum gender {
        
        /// <remarks/>
        Male,
        
        /// <remarks/>
        Female,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of Credit Card types used in Credit Card payment transactions.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CreditCardTypeEnum {
        
        /// <remarks/>
        AmEx,
        
        /// <remarks/>
        DebitCard,
        
        /// <remarks/>
        Discover,
        
        /// <remarks/>
        GiftCard,
        
        /// <remarks/>
        MasterCard,
        
        /// <remarks/>
        OtherCreditCard,
        
        /// <remarks/>
        Visa,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of possible Id Domains. NG- next gen (int); QB - Provisional DB id (string); QBO; BM (Billing Manager); QBSDK - ListID, TxnID, or TxnLineId.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum idDomainEnum {
        
        /// <remarks/>
        BM,
        
        /// <remarks/>
        NG,
        
        /// <remarks/>
        PMT,
        
        /// <remarks/>
        QB,
        
        /// <remarks/>
        QBO,
        
        /// <remarks/>
        QBSDK,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Supported Intuit entity/object names.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum objectNameEnumType {
        
        /// <remarks/>
        Account,
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        Attachable,
        
        /// <remarks/>
        Bill,
        
        /// <remarks/>
        BillPayment,
        
        /// <remarks/>
        BOMComponent,
        
        /// <remarks/>
        ChargeCredit,
        
        /// <remarks/>
        Class,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        CompanyInfo,
        
        /// <remarks/>
        CreditCardPaymentTxn,
        
        /// <remarks/>
        CreditMemo,
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        CustomerType,
        
        /// <remarks/>
        Discount,
        
        /// <remarks/>
        Department,
        
        /// <remarks/>
        Deposit,
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Estimate,
        
        /// <remarks/>
        FixedAsset,
        
        /// <remarks/>
        InventoryAdjustment,
        
        /// <remarks/>
        InventorySite,
        
        /// <remarks/>
        Invoice,
        
        /// <remarks/>
        Item,
        
        /// <remarks/>
        ItemReceipt,
        
        /// <remarks/>
        JournalEntry,
        
        /// <remarks/>
        ListObjectType,
        
        /// <remarks/>
        Names,
        
        /// <remarks/>
        OtherName,
        
        /// <remarks/>
        Payment,
        
        /// <remarks/>
        PaymentMethod,
        
        /// <remarks/>
        Preferences,
        
        /// <remarks/>
        PriceLevel,
        
        /// <remarks/>
        Purchase,
        
        /// <remarks/>
        PurchaseOrder,
        
        /// <remarks/>
        RecurringTransaction,
        
        /// <remarks/>
        RefundReceipt,
        
        /// <remarks/>
        ReimburseCharge,
        
        /// <remarks/>
        Report,
        
        /// <remarks/>
        SalesOrder,
        
        /// <remarks/>
        SalesReceipt,
        
        /// <remarks/>
        SalesRep,
        
        /// <remarks/>
        ShipMethod,
        
        /// <remarks/>
        StatementCharge,
        
        /// <remarks/>
        Tag,
        
        /// <remarks/>
        TaxCode,
        
        /// <remarks/>
        TaxClassification,
        
        /// <remarks/>
        TaxPayment,
        
        /// <remarks/>
        TaxRate,
        
        /// <remarks/>
        TaxReturn,
        
        /// <remarks/>
        Term,
        
        /// <remarks/>
        TimeActivity,
        
        /// <remarks/>
        Transfer,
        
        /// <remarks/>
        Transaction,
        
        /// <remarks/>
        TxnLocation,
        
        /// <remarks/>
        UOM,
        
        /// <remarks/>
        Vendor,
        
        /// <remarks/>
        VendorCredit,
        
        /// <remarks/>
        CustomFieldDefinition,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Employee type enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum EmployeeTypeEnum {
        
        /// <remarks/>
        Officer,
        
        /// <remarks/>
        Owner,
        
        /// <remarks/>
        Regular,
        
        /// <remarks/>
        Statutory,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Valid only for UK region, Subcontractor type enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SubcontractorTypeEnum {
        
        /// <remarks/>
        Individual,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        Partnership,
        
        /// <remarks/>
        Trust,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Valid only for UK region, CIS Rate for Vendor enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum CISRateEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CIS gross rate (0%)")]
        CISgrossrate0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CIS standard rate (20%)")]
        CISstandardrate20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CIS higher rate (30%)")]
        CIShigherrate30,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Job status enumeration.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum JobStatusEnum {
        
        /// <remarks/>
        Awarded,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        InProgress,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        NotAwarded,
        
        /// <remarks/>
        Pending,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Enumeration of types for time entries with paychecks.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TimeEntryUsedForPaychecksEnum {
        
        /// <remarks/>
        NotSet,
        
        /// <remarks/>
        DoNotUseTimeEntry,
        
        /// <remarks/>
        UseTimeEntry,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of Tax Report Basis for France
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxReportBasisTypeEnum {
        
        /// <remarks/>
        Cash,
        
        /// <remarks/>
        Accrual,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Describes the base class of name entities (Customer, Employee, Vendor, OtherName)
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OtherName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Employee))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Vendor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxAgency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Customer))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class NameBase : IntuitEntity, IEntity {
        
        private string intuitIdField;
        
        private bool organizationField;
        
        private bool organizationFieldSpecified;
        
        private string titleField;
        
        private string givenNameField;
        
        private string middleNameField;
        
        private string familyNameField;
        
        private string suffixField;
        
        private string fullyQualifiedNameField;
        
        private string companyNameField;
        
        private string displayNameField;
        
        private string printOnCheckNameField;
        
        private string userIdField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private TelephoneNumber primaryPhoneField;
        
        private TelephoneNumber alternatePhoneField;
        
        private TelephoneNumber mobileField;
        
        private TelephoneNumber faxField;
        
        private EmailAddress primaryEmailAddrField;
        
        private WebSiteAddress webAddrField;
        
        private ContactInfo[] otherContactInfoField;
        
        private ReferenceType defaultTaxCodeRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: IntuitId represents the realm id, authid or an entity id. An entity is a new type of IAM identity that represents a person or a business which has no Intuit authentication context
        /// 
        /// </summary>
        public string IntuitId {
            get {
                return intuitIdField;
            }
            set {
                intuitIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if the entity represents an organization; otherwise the entity represents a person. Default is NULL or False, representing a person.
        /// 
        /// </summary>
        public bool Organization {
            get {
                return organizationField;
            }
            set {
                organizationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OrganizationSpecified {
            get {
                return organizationFieldSpecified;
            }
            set {
                organizationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: QBW: Title of the person. The person can have zero or more titles.
        /// Description: QBO: Title of the person. The person can have zero or more titles.
        /// InputType: ReadWrite
        /// ValidRange: QBW: Min=0, Max=15
        /// ValidationRules: QBW: At least one of the name elements is required: Title, GivenName, MiddleName, or FamilyName.
        /// ValidationRules: QBO: At least one of the name elements is required: Title, GivenName, MiddleName, FamilyName, or Suffix.
        /// I18n: ALL
        /// 
        /// </summary>
        public string Title {
            get {
                return titleField;
            }
            set {
                titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Given name or first name of a person.[br /]Max. length: 25 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, or FamilyName.
        /// Product: QBO
        /// Description: Given name or first name of a person.[br /]Max. length: 25 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, FamilyName, or Suffix.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public string GivenName {
            get {
                return givenNameField;
            }
            set {
                givenNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Middle name of the person. The person can have zero or more middle names.[br /]Max. length: 5 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, or FamilyName.
        /// Product: QBO
        /// Description: Middle name of the person. The person can have zero or more middle names.[br /]Max. length: 15 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, FamilyName, or Suffix.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public string MiddleName {
            get {
                return middleNameField;
            }
            set {
                middleNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Family name or the last name of the person.[br /]Max. length: 25 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, or FamilyName.
        /// Product: QBO
        /// Description: Family name or the last name of the person.[br /]Max. length: 15 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, FamilyName, or Suffix.
        /// Filterable: ALL
        /// Sortable: ALL
        /// 
        /// </summary>
        public string FamilyName {
            get {
                return familyNameField;
            }
            set {
                familyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Suffix appended to the name of a person. For example, Senior, Junior, etc. QBO only field.[br /]Max. length: 15 characters.[br /]At least one of the name elements is required: Title, GivenName, MiddleName, FamilyName, or Suffix.
        /// 
        /// </summary>
        public string Suffix {
            get {
                return suffixField;
            }
            set {
                suffixField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name of the entity. The fully qualified name prepends the topmost parent, followed by each sub element separated by colons. Takes the form of Parent:Customer:Job:Sub-job. Limited to 5 levels.[br /]Max. length: 41 characters (single name) or 209 characters (fully qualified name).
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The name of the company associated with the person or organization.
        /// 
        /// </summary>
        public string CompanyName {
            get {
                return companyNameField;
            }
            set {
                companyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The name of the person or organization as displayed. If not provided, this is populated from FullName.
        /// Product: QBW
        /// Description: The name of the person or organization as displayed.
        /// Required: ALL
        /// Filterable: QBW
        /// 
        /// </summary>
        public string DisplayName {
            get {
                return displayNameField;
            }
            set {
                displayNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Name of the person or organization as printed on a check. If not provided, this is populated from FullName.
        /// 
        /// </summary>
        public string PrintOnCheckName {
            get {
                return printOnCheckNameField;
            }
            set {
                printOnCheckNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The ID of the Intuit user associated with this name.  Note: this is NOT the Intuit AuthID of the user.
        /// 
        /// </summary>
        public string UserId {
            get {
                return userIdField;
            }
            set {
                userIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: If true, this entity is currently enabled for use by QuickBooks. The default value is true.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Primary phone number.
        /// 
        /// </summary>
        public TelephoneNumber PrimaryPhone {
            get {
                return primaryPhoneField;
            }
            set {
                primaryPhoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Alternate phone number.
        /// 
        /// </summary>
        public TelephoneNumber AlternatePhone {
            get {
                return alternatePhoneField;
            }
            set {
                alternatePhoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Mobile phone number.
        /// 
        /// </summary>
        public TelephoneNumber Mobile {
            get {
                return mobileField;
            }
            set {
                mobileField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fax number.
        /// 
        /// </summary>
        public TelephoneNumber Fax {
            get {
                return faxField;
            }
            set {
                faxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Primary email address.
        /// 
        /// </summary>
        public EmailAddress PrimaryEmailAddr {
            get {
                return primaryEmailAddrField;
            }
            set {
                primaryEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Website address (URI).
        /// 
        /// </summary>
        public WebSiteAddress WebAddr {
            get {
                return webAddrField;
            }
            set {
                webAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: List of ContactInfo entities of any contact info type. The ContactInfo Type values are defined in the ContactTypeEnum.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherContactInfo")]
        public ContactInfo[] OtherContactInfo {
            get {
                return otherContactInfoField;
            }
            set {
                otherContactInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the tax code associated with the Customer or Vendor by default for sales or purchase taxes.
        /// 
        /// </summary>
        public ReferenceType DefaultTaxCodeRef {
            get {
                return defaultTaxCodeRefField;
            }
            set {
                defaultTaxCodeRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: QBO: The Customer entityrepresents the consumer of the service or the product that your business offers. QBO allows categorizing the customers in a way that is meaningful to the business. For example, you can set up a category of customers to indicate which industry a customer represents, the geographic location of a customer, or how a customer came to know about the business. The categorization can be then used for reports or mails.
    /// Description: QBW: The Customer entity is a consumer of the service or product that your business offers. While creating a customer, avoid entering  job data. If you enter a job data, the system can prevent you from adding   more jobs for that customer. You must first create the customer, and then create a job using that customer as a parent.
    /// Business Rules: [li]The customer name must be unique.[/li][li]The customer name must not contain a colon (:).[/li][li]The e-mail address of the customer must contain "@" and "." (dot).[/li][li]The customer address field is mandatory.[/li]
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Customer : NameBase {
        
        private bool taxableField;
        
        private bool taxableFieldSpecified;
        
        private PhysicalAddress billAddrField;
        
        private PhysicalAddress shipAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private string contactNameField;
        
        private string altContactNameField;
        
        private string notesField;
        
        private bool jobField;
        
        private bool jobFieldSpecified;
        
        private bool billWithParentField;
        
        private bool billWithParentFieldSpecified;
        
        private ReferenceType rootCustomerRefField;
        
        private ReferenceType parentRefField;
        
        private int levelField;
        
        private bool levelFieldSpecified;
        
        private ReferenceType customerTypeRefField;
        
        private ReferenceType salesTermRefField;
        
        private ReferenceType salesRepRefField;
        
        private ReferenceType itemField;
        
        private ItemChoiceType6 itemElementNameField;
        
        private ReferenceType paymentMethodRefField;
        
        private CreditChargeInfo cCDetailField;
        
        private ReferenceType priceLevelRefField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private System.DateTime openBalanceDateField;
        
        private bool openBalanceDateFieldSpecified;
        
        private decimal balanceWithJobsField;
        
        private bool balanceWithJobsFieldSpecified;
        
        private decimal creditLimitField;
        
        private bool creditLimitFieldSpecified;
        
        private string acctNumField;
        
        private ReferenceType currencyRefField;
        
        private decimal overDueBalanceField;
        
        private bool overDueBalanceFieldSpecified;
        
        private decimal totalRevenueField;
        
        private bool totalRevenueFieldSpecified;
        
        private decimal totalExpenseField;
        
        private bool totalExpenseFieldSpecified;
        
        private string preferredDeliveryMethodField;
        
        private string resaleNumField;
        
        private JobInfo jobInfoField;
        
        private bool tDSEnabledField;
        
        private bool tDSEnabledFieldSpecified;
        
        private IntuitAnyType customerExField;
        
        private string secondaryTaxIdentifierField;
        
        private ReferenceType aRAccountRefField;
        
        private string primaryTaxIdentifierField;
        
        private string taxExemptionReasonIdField;
        
        private bool isProjectField;
        
        private bool isProjectFieldSpecified;
        
        private string businessNumberField;
        
        private string gSTINField;
        
        private string gSTRegistrationTypeField;
        
        private bool isCISContractorField;
        
        private bool isCISContractorFieldSpecified;
        
        private string clientCompanyIdField;
        
        private string clientEntityIdField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: True if the customer is taxable.
        /// 
        /// </summary>
        public bool Taxable {
            get {
                return taxableField;
            }
            set {
                taxableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxableSpecified {
            get {
                return taxableFieldSpecified;
            }
            set {
                taxableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default billing address.
        /// 
        /// </summary>
        public PhysicalAddress BillAddr {
            get {
                return billAddrField;
            }
            set {
                billAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default shipping address.
        /// 
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW only.
        /// Description: An address other than default billing  or shipping.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Name of the Customer contact.
        /// 
        /// </summary>
        public string ContactName {
            get {
                return contactNameField;
            }
            set {
                contactNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Name of the Alternate Customer contact.
        /// 
        /// </summary>
        public string AltContactName {
            get {
                return altContactNameField;
            }
            set {
                altContactNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Free form text describing the Customer.[br /]Max. length: 1024 characters.
        /// 
        /// </summary>
        public string Notes {
            get {
                return notesField;
            }
            set {
                notesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: If true, this is a Job or sub-customer. If false or null, this is a top level customer, not a Job or sub-customer.
        /// 
        /// </summary>
        public bool Job {
            get {
                return jobField;
            }
            set {
                jobField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool JobSpecified {
            get {
                return jobFieldSpecified;
            }
            set {
                jobFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: If true, this Customer is billed with its parent. If false, or null the customer is not to be billed with its parent. This property is valid only if this entity is a Job or sub Customer.
        /// 
        /// </summary>
        public bool BillWithParent {
            get {
                return billWithParentField;
            }
            set {
                billWithParentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillWithParentSpecified {
            get {
                return billWithParentFieldSpecified;
            }
            set {
                billWithParentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The top level Customer in the hierarchy to which this Job or sub customer belongs.
        /// 
        /// </summary>
        public ReferenceType RootCustomerRef {
            get {
                return rootCustomerRefField;
            }
            set {
                rootCustomerRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: The immediate parent of the Sub-Customer/Job in the hierarchical "Customer:Job" list.[br /]Required for the create operation if the Customer is a sub-customer or Job.
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the level of the hirearchy in which the entity is located. Zero specifies the top level of the hierarchy; anything above will be level with respect to the parent.
        /// 
        /// </summary>
        public int Level {
            get {
                return levelField;
            }
            set {
                levelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LevelSpecified {
            get {
                return levelFieldSpecified;
            }
            set {
                levelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a CustomerType associated with the Customer.
        /// 
        /// </summary>
        public ReferenceType CustomerTypeRef {
            get {
                return customerTypeRefField;
            }
            set {
                customerTypeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a SalesTerm associated with the Customer.
        /// 
        /// </summary>
        public ReferenceType SalesTermRef {
            get {
                return salesTermRefField;
            }
            set {
                salesTermRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to a SalesRep associated with the Customer.
        /// 
        /// </summary>
        public ReferenceType SalesRepRef {
            get {
                return salesRepRefField;
            }
            set {
                salesRepRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TaxGroupCodeRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRateRef", typeof(ReferenceType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ReferenceType AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType6 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to a PaymentMethod associated with the Customer.
        /// 
        /// </summary>
        public ReferenceType PaymentMethodRef {
            get {
                return paymentMethodRefField;
            }
            set {
                paymentMethodRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Credit-card information to request a credit card payment from a merchant account service.
        /// 
        /// </summary>
        public CreditChargeInfo CCDetail {
            get {
                return cCDetailField;
            }
            set {
                cCDetailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to a PriceLevel associated with the Customer.
        /// 
        /// </summary>
        public ReferenceType PriceLevelRef {
            get {
                return priceLevelRefField;
            }
            set {
                priceLevelRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the open balance amount or the amount unpaid by the customer. For the create operation, this represents the opening balance for the customer. When returned in response to the query request it represents the current open balance (unpaid amount) for that customer.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Date of the Open Balance for the create operation.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime OpenBalanceDate {
            get {
                return openBalanceDateField;
            }
            set {
                openBalanceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OpenBalanceDateSpecified {
            get {
                return openBalanceDateFieldSpecified;
            }
            set {
                openBalanceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Cumulative open balance amount for the Customer (or Job) and all its sub-jobs. Cannot be written to QuickBooks.
        /// Product: QBO
        /// Description: Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.
        /// Filterable: ALL
        /// Non-default: ALL
        /// 
        /// </summary>
        public decimal BalanceWithJobs {
            get {
                return balanceWithJobsField;
            }
            set {
                balanceWithJobsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceWithJobsSpecified {
            get {
                return balanceWithJobsFieldSpecified;
            }
            set {
                balanceWithJobsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Specifies the maximum amount of an unpaid customer balance.
        /// 
        /// </summary>
        public decimal CreditLimit {
            get {
                return creditLimitField;
            }
            set {
                creditLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditLimitSpecified {
            get {
                return creditLimitFieldSpecified;
            }
            set {
                creditLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Name or number of the account associated with this customer.[br /]Max. length: 99 characters.
        /// 
        /// </summary>
        public string AcctNum {
            get {
                return acctNumField;
            }
            set {
                acctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the currency code for all the business transactions created for or received from the customer.
        /// 
        /// </summary>
        public ReferenceType CurrencyRef {
            get {
                return currencyRefField;
            }
            set {
                currencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Over-due balance amount. Cannot be written to QuickBooks.
        /// 
        /// </summary>
        public decimal OverDueBalance {
            get {
                return overDueBalanceField;
            }
            set {
                overDueBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OverDueBalanceSpecified {
            get {
                return overDueBalanceFieldSpecified;
            }
            set {
                overDueBalanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The total revenue amount from the Customer. Cannot be written to QuickBooks.
        /// 
        /// </summary>
        public decimal TotalRevenue {
            get {
                return totalRevenueField;
            }
            set {
                totalRevenueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalRevenueSpecified {
            get {
                return totalRevenueFieldSpecified;
            }
            set {
                totalRevenueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: The total expense amount for the Customer. Cannot be written to QuickBooks.
        /// 
        /// </summary>
        public decimal TotalExpense {
            get {
                return totalExpenseField;
            }
            set {
                totalExpenseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TotalExpenseSpecified {
            get {
                return totalExpenseFieldSpecified;
            }
            set {
                totalExpenseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Preferred delivery method. Vales are Print, Email, or None.
        /// 
        /// </summary>
        public string PreferredDeliveryMethod {
            get {
                return preferredDeliveryMethodField;
            }
            set {
                preferredDeliveryMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Resale number or some additional info about the customer.
        /// 
        /// </summary>
        public string ResaleNum {
            get {
                return resaleNumField;
            }
            set {
                resaleNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Information about the job. Relevant only if the Customer represents the actual task or project, not just a person or organization.
        /// 
        /// </summary>
        public JobInfo JobInfo {
            get {
                return jobInfoField;
            }
            set {
                jobInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: True, if TDS (Tax Deducted at Source) is enabled for this customer.
        /// 
        /// </summary>
        public bool TDSEnabled {
            get {
                return tDSEnabledField;
            }
            set {
                tDSEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSEnabledSpecified {
            get {
                return tDSEnabledFieldSpecified;
            }
            set {
                tDSEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Internal use only: extension place holder for Customer.
        /// 
        /// </summary>
        public IntuitAnyType CustomerEx {
            get {
                return customerExField;
            }
            set {
                customerExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies secondary Tax ID of the Person or Organization. Applicable for IN companies for CST Registration No. and in future can be extended to other regions.
        /// 
        /// </summary>
        public string SecondaryTaxIdentifier {
            get {
                return secondaryTaxIdentifierField;
            }
            set {
                secondaryTaxIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The A/R account ID for the customer. This is applicable only in FR where each customer needs to have his own AR account.
        /// 
        /// </summary>
        public ReferenceType ARAccountRef {
            get {
                return aRAccountRefField;
            }
            set {
                aRAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description:  Specifies primary Tax ID of the Person or Organization.
        /// 
        /// </summary>
        public string PrimaryTaxIdentifier {
            get {
                return primaryTaxIdentifierField;
            }
            set {
                primaryTaxIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies tax exemption reason to be associated with Customer
        /// 
        /// </summary>
        public string TaxExemptionReasonId {
            get {
                return taxExemptionReasonIdField;
            }
            set {
                taxExemptionReasonIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies whether this customer is a project.
        /// 
        /// </summary>
        public bool IsProject {
            get {
                return isProjectField;
            }
            set {
                isProjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IsProjectSpecified {
            get {
                return isProjectFieldSpecified;
            }
            set {
                isProjectFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Business Number of the Customer.
        /// Applicable to CA/UK/IN versions of QuickBooks. Referred to as PAN in India.
        /// 
        /// </summary>
        public string BusinessNumber {
            get {
                return businessNumberField;
            }
            set {
                businessNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// GST Identification Number of the Customer.
        /// Applicable for IN region only.
        /// 
        /// </summary>
        public string GSTIN {
            get {
                return gSTINField;
            }
            set {
                gSTINField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// GST registration type of the Customer.
        /// Applicable for IN region only.
        /// 
        /// </summary>
        public string GSTRegistrationType {
            get {
                return gSTRegistrationTypeField;
            }
            set {
                gSTRegistrationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: True if the customer is CIS contractor
        /// 
        /// </summary>
        public bool IsCISContractor {
            get {
                return isCISContractorField;
            }
            set {
                isCISContractorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IsCISContractorSpecified {
            get {
                return isCISContractorFieldSpecified;
            }
            set {
                isCISContractorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Internal use only: Applicable only for Accountant companies, Not null represents associated QBO company id. (Readonly)
        /// 
        /// </summary>
        public string ClientCompanyId {
            get {
                return clientCompanyIdField;
            }
            set {
                clientCompanyIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Internal use only: Applicable only for Accountant companies, External reference for Customer. (ReadOnly)
        /// 
        /// </summary>
        public string ClientEntityId {
            get {
                return clientEntityIdField;
            }
            set {
                clientEntityIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType6 {
        
        /// <remarks/>
        TaxGroupCodeRef,
        
        /// <remarks/>
        TaxRateRef,
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: Details for the Job. This is applicable only to QuickBooks Windows desktop.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class JobInfo {
        
        private JobStatusEnum statusField;
        
        private bool statusFieldSpecified;
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime projectedEndDateField;
        
        private bool projectedEndDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private string descriptionField;
        
        private ReferenceType jobTypeRefField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Current status of the job. Valid values are: Awarded, Closed, InProgress, None, NotAwarded, Pending, as defined in the JobStatusEnum.[br /]
        /// 
        /// </summary>
        public JobStatusEnum Status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StatusSpecified {
            get {
                return statusFieldSpecified;
            }
            set {
                statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Starting date of the Job.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return startDateField;
            }
            set {
                startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartDateSpecified {
            get {
                return startDateFieldSpecified;
            }
            set {
                startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Projected end date of the job.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ProjectedEndDate {
            get {
                return projectedEndDateField;
            }
            set {
                projectedEndDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ProjectedEndDateSpecified {
            get {
                return projectedEndDateFieldSpecified;
            }
            set {
                projectedEndDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: End date of the job.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return endDateField;
            }
            set {
                endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndDateSpecified {
            get {
                return endDateFieldSpecified;
            }
            set {
                endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Job description. Max. length: 99 characters.
        /// 
        /// </summary>
        public string Description {
            get {
                return descriptionField;
            }
            set {
                descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Reference to the JobType.
        /// 
        /// </summary>
        public ReferenceType JobTypeRef {
            get {
                return jobTypeRefField;
            }
            set {
                jobTypeRefField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Represents a User with an Intuit account.  Note that based on privacy restrictions, information returned may be
    /// limited depending on calling origin and/or calling user permissions (ex: a user may be able to look up all of
    /// their information, but not the information regarding other users).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class User : IntuitEntity, IEntity {
        
        private string displayNameField;
        
        private string titleField;
        
        private string givenNameField;
        
        private string middleNameField;
        
        private string familyNameField;
        
        private string suffixField;
        
        private EmailAddress[] emailAddrField;
        
        private PhysicalAddress[] addrField;
        
        private TelephoneNumber[] phoneNumberField;
        
        private string localeCountryField;
        
        private string localeLanguageField;
        
        private string localePostalCodeField;
        
        private string localeTimeZoneField;
        
        private NameValue[] nameValueAttrField;
        
        /// <remarks/>
        public string DisplayName {
            get {
                return displayNameField;
            }
            set {
                displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return titleField;
            }
            set {
                titleField = value;
            }
        }
        
        /// <remarks/>
        public string GivenName {
            get {
                return givenNameField;
            }
            set {
                givenNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return middleNameField;
            }
            set {
                middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string FamilyName {
            get {
                return familyNameField;
            }
            set {
                familyNameField = value;
            }
        }
        
        /// <remarks/>
        public string Suffix {
            get {
                return suffixField;
            }
            set {
                suffixField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Returned only if caller passes necessary security checks to prevent e-mail address harvesting
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("EmailAddr")]
        public EmailAddress[] EmailAddr {
            get {
                return emailAddrField;
            }
            set {
                emailAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Addr")]
        public PhysicalAddress[] Addr {
            get {
                return addrField;
            }
            set {
                addrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PhoneNumber")]
        public TelephoneNumber[] PhoneNumber {
            get {
                return phoneNumberField;
            }
            set {
                phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string LocaleCountry {
            get {
                return localeCountryField;
            }
            set {
                localeCountryField = value;
            }
        }
        
        /// <remarks/>
        public string LocaleLanguage {
            get {
                return localeLanguageField;
            }
            set {
                localeLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string LocalePostalCode {
            get {
                return localePostalCodeField;
            }
            set {
                localePostalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string LocaleTimeZone {
            get {
                return localeTimeZoneField;
            }
            set {
                localeTimeZoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents a list of UserAttribute name/value pairs if the user query provided names of extended attributes to include
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NameValueAttr")]
        public NameValue[] NameValueAttr {
            get {
                return nameValueAttrField;
            }
            set {
                nameValueAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes the Party as a Vendor Role view
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaxAgency))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Vendor : NameBase {
        
        private string contactNameField;
        
        private string altContactNameField;
        
        private string notesField;
        
        private PhysicalAddress billAddrField;
        
        private PhysicalAddress shipAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private string taxCountryField;
        
        private string taxIdentifierField;
        
        private System.DateTime taxIdEffectiveDateField;
        
        private bool taxIdEffectiveDateFieldSpecified;
        
        private string businessNumberField;
        
        private ReferenceType parentRefField;
        
        private ReferenceType vendorTypeRefField;
        
        private ReferenceType termRefField;
        
        private ReferenceType prefillAccountRefField;
        
        private decimal balanceField;
        
        private bool balanceFieldSpecified;
        
        private decimal billRateField;
        
        private bool billRateFieldSpecified;
        
        private System.DateTime openBalanceDateField;
        
        private bool openBalanceDateFieldSpecified;
        
        private decimal creditLimitField;
        
        private bool creditLimitFieldSpecified;
        
        private string acctNumField;
        
        private bool vendor1099Field;
        
        private bool vendor1099FieldSpecified;
        
        private bool t4AEligibleField;
        
        private bool t4AEligibleFieldSpecified;
        
        private bool t5018EligibleField;
        
        private bool t5018EligibleFieldSpecified;
        
        private ReferenceType currencyRefField;
        
        private bool tDSEnabledField;
        
        private bool tDSEnabledFieldSpecified;
        
        private int tDSEntityTypeIdField;
        
        private bool tDSEntityTypeIdFieldSpecified;
        
        private int tDSSectionTypeIdField;
        
        private bool tDSSectionTypeIdFieldSpecified;
        
        private bool tDSOverrideThresholdField;
        
        private bool tDSOverrideThresholdFieldSpecified;
        
        private string taxReportingBasisField;
        
        private ReferenceType aPAccountRefField;
        
        private IntuitAnyType vendorExField;
        
        private string gSTINField;
        
        private string gSTRegistrationTypeField;
        
        private bool isSubContractorField;
        
        private bool isSubContractorFieldSpecified;
        
        private string subcontractorTypeField;
        
        private string cISRateField;
        
        private bool hasTPARField;
        
        private bool hasTPARFieldSpecified;
        
        private VendorBankAccountDetail vendorPaymentBankDetailField;
        
        /// <remarks/>
        /// <summary>
        /// Name of the contact within the vendor. Used by QBD only
        /// 
        /// </summary>
        public string ContactName {
            get {
                return contactNameField;
            }
            set {
                contactNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Name of the Alternate contact within the vendor. Used by QBD only
        /// 
        /// </summary>
        public string AltContactName {
            get {
                return altContactNameField;
            }
            set {
                altContactNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Free form text describing the Vendor.[br /]Max. length: 1024 characters.
        /// 
        /// </summary>
        public string Notes {
            get {
                return notesField;
            }
            set {
                notesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default billing address.
        /// 
        /// </summary>
        public PhysicalAddress BillAddr {
            get {
                return billAddrField;
            }
            set {
                billAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Default shipping address.
        /// 
        /// </summary>
        public PhysicalAddress ShipAddr {
            get {
                return shipAddrField;
            }
            set {
                shipAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW only.
        /// Description: An address other than default billing  or shipping.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW.
        /// Description: Country of Vendor.
        /// 
        /// </summary>
        public string TaxCountry {
            get {
                return taxCountryField;
            }
            set {
                taxCountryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Tax ID of the Person or Organization
        /// </summary>
        public string TaxIdentifier {
            get {
                return taxIdentifierField;
            }
            set {
                taxIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Specifies the date of registeration of Supplier. Applicable for IN Region and in future can be extended to other regions.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime TaxIdEffectiveDate {
            get {
                return taxIdEffectiveDateField;
            }
            set {
                taxIdEffectiveDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxIdEffectiveDateSpecified {
            get {
                return taxIdEffectiveDateFieldSpecified;
            }
            set {
                taxIdEffectiveDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW.
        /// Description: Business Number of the Vendor. Applicable for CA/UK versions of QuickBooks.
        /// 
        /// </summary>
        public string BusinessNumber {
            get {
                return businessNumberField;
            }
            set {
                businessNumberField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW.
        /// Description: Reference to the VendorType.
        /// 
        /// </summary>
        public ReferenceType VendorTypeRef {
            get {
                return vendorTypeRefField;
            }
            set {
                vendorTypeRefField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType TermRef {
            get {
                return termRefField;
            }
            set {
                termRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW.
        /// Description: Reference to the PrefillAccount.
        /// 
        /// </summary>
        public ReferenceType PrefillAccountRef {
            get {
                return prefillAccountRefField;
            }
            set {
                prefillAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Specifies the open balance amount or the amount unpaid by the vendor. For the create operation, this represents the opening balance for the vendor. When returned in response to the query request it represents the current open balance (unpaid amount) for that vendor.
        /// Filterable: QBW
        /// Sortable: QBW
        /// 
        /// </summary>
        public decimal Balance {
            get {
                return balanceField;
            }
            set {
                balanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BalanceSpecified {
            get {
                return balanceFieldSpecified;
            }
            set {
                balanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// BillRate can be set to specify this vendor's hourly billing rate.
        /// 
        /// </summary>
        public decimal BillRate {
            get {
                return billRateField;
            }
            set {
                billRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillRateSpecified {
            get {
                return billRateFieldSpecified;
            }
            set {
                billRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the date of the Open Balance.
        /// Non QB-writable.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime OpenBalanceDate {
            get {
                return openBalanceDateField;
            }
            set {
                openBalanceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool OpenBalanceDateSpecified {
            get {
                return openBalanceDateFieldSpecified;
            }
            set {
                openBalanceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the maximum amount of an unpaid vendor balance.
        /// </summary>
        public decimal CreditLimit {
            get {
                return creditLimitField;
            }
            set {
                creditLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool CreditLimitSpecified {
            get {
                return creditLimitFieldSpecified;
            }
            set {
                creditLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Name or number of the account associated with this vendor.
        /// Length Restriction:
        /// QBO: 15
        /// QBD: 1024
        /// 
        /// </summary>
        public string AcctNum {
            get {
                return acctNumField;
            }
            set {
                acctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// The Vendor is an independent contractor, someone who is given a 1099-MISC form at the end of the year. The "1099 Vendor" is paid with regular checks, and taxes are not withhold on their behalf.
        /// 
        /// </summary>
        public bool Vendor1099 {
            get {
                return vendor1099Field;
            }
            set {
                vendor1099Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool Vendor1099Specified {
            get {
                return vendor1099FieldSpecified;
            }
            set {
                vendor1099FieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if vendor is T4A eligible. Applicable for CA/UK versions of quickbooks.
        /// 
        /// </summary>
        public bool T4AEligible {
            get {
                return t4AEligibleField;
            }
            set {
                t4AEligibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool T4AEligibleSpecified {
            get {
                return t4AEligibleFieldSpecified;
            }
            set {
                t4AEligibleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: True if vendor is T5018 eligible. Applicable for CA/UK versions of quickbooks.
        /// 
        /// </summary>
        public bool T5018Eligible {
            get {
                return t5018EligibleField;
            }
            set {
                t5018EligibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool T5018EligibleSpecified {
            get {
                return t5018EligibleFieldSpecified;
            }
            set {
                t5018EligibleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Reference to the currency all the business transactions created for or received from that vendor are created in.
        /// </summary>
        public ReferenceType CurrencyRef {
            get {
                return currencyRefField;
            }
            set {
                currencyRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: True, if TDS (Tax Deducted at Source) is enabled for this Vendor.
        /// If enabled, TDS metadata needs to be passsed in VendorEx field.
        /// 
        /// </summary>
        public bool TDSEnabled {
            get {
                return tDSEnabledField;
            }
            set {
                tDSEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSEnabledSpecified {
            get {
                return tDSEnabledFieldSpecified;
            }
            set {
                tDSEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Entity Type of the Vendor.
        /// 
        /// </summary>
        public int TDSEntityTypeId {
            get {
                return tDSEntityTypeIdField;
            }
            set {
                tDSEntityTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSEntityTypeIdSpecified {
            get {
                return tDSEntityTypeIdFieldSpecified;
            }
            set {
                tDSEntityTypeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Default TDS section type for the vendor to be used in transaction.
        /// 
        /// </summary>
        public int TDSSectionTypeId {
            get {
                return tDSSectionTypeIdField;
            }
            set {
                tDSSectionTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSSectionTypeIdSpecified {
            get {
                return tDSSectionTypeIdFieldSpecified;
            }
            set {
                tDSSectionTypeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: True, if TDS threshold calculation should be overriden.
        /// 
        /// </summary>
        public bool TDSOverrideThreshold {
            get {
                return tDSOverrideThresholdField;
            }
            set {
                tDSOverrideThresholdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TDSOverrideThresholdSpecified {
            get {
                return tDSOverrideThresholdFieldSpecified;
            }
            set {
                tDSOverrideThresholdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The tax reporting basis for the supplier. The applicable values are those exposed through the TaxReportBasisTypeEnum.  This is applicable only in FR.
        /// 
        /// </summary>
        public string TaxReportingBasis {
            get {
                return taxReportingBasisField;
            }
            set {
                taxReportingBasisField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: The A/P account ID for the supplier. This is applicable only in FR where each supplier needs to have his own AP account.
        /// 
        /// </summary>
        public ReferenceType APAccountRef {
            get {
                return aPAccountRefField;
            }
            set {
                aPAccountRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for Vendor.
        /// </summary>
        public IntuitAnyType VendorEx {
            get {
                return vendorExField;
            }
            set {
                vendorExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// GST Identification Number of the Vendor.
        /// Applicable for IN region only.
        /// 
        /// </summary>
        public string GSTIN {
            get {
                return gSTINField;
            }
            set {
                gSTINField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// GST registration type of the Vendor.
        /// Applicable for IN region only.
        /// 
        /// </summary>
        public string GSTRegistrationType {
            get {
                return gSTRegistrationTypeField;
            }
            set {
                gSTRegistrationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: True if the vendor is subcontractor
        /// 
        /// </summary>
        public bool IsSubContractor {
            get {
                return isSubContractorField;
            }
            set {
                isSubContractorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool IsSubContractorSpecified {
            get {
                return isSubContractorFieldSpecified;
            }
            set {
                isSubContractorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Subcontractor type. Applicable only for UK region, values are defined in the SubcontractorTypeEnum.
        /// </summary>
        public string SubcontractorType {
            get {
                return subcontractorTypeField;
            }
            set {
                subcontractorTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the CIS Rate. Applicable only for UK region, values are defined in the CISRateEnum.
        /// </summary>
        public string CISRate {
            get {
                return cISRateField;
            }
            set {
                cISRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO Only
        /// Description: True if the Vendor has TPAR. Applicable for AU region only.
        /// 
        /// </summary>
        public bool HasTPAR {
            get {
                return hasTPARField;
            }
            set {
                hasTPARField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HasTPARSpecified {
            get {
                return hasTPARFieldSpecified;
            }
            set {
                hasTPARFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO Only
        /// Description: Contains Bank Account details to enable Vendor Batch Payment. Applicable for AU region only.
        /// 
        /// </summary>
        public VendorBankAccountDetail VendorPaymentBankDetail {
            get {
                return vendorPaymentBankDetailField;
            }
            set {
                vendorPaymentBankDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Contains Bank Account details to process the batch payment for Vendors. Applicable for AU region only..
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class VendorBankAccountDetail {
        
        private string bankBranchIdentifierField;
        
        private string bankAccountNumberField;
        
        private string bankAccountNameField;
        
        private string statementTextField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: Specifies the BankBranchIdentifier for ABA processing. Applicable for AU region only.
        /// 
        /// </summary>
        public string BankBranchIdentifier {
            get {
                return bankBranchIdentifierField;
            }
            set {
                bankBranchIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: Specifies the BankAccountNumber for ABA processing. Applicable for AU region only.
        /// 
        /// </summary>
        public string BankAccountNumber {
            get {
                return bankAccountNumberField;
            }
            set {
                bankAccountNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: Specifies the BankAccountName for ABA processing. Applicable for AU region only.
        /// 
        /// </summary>
        public string BankAccountName {
            get {
                return bankAccountNameField;
            }
            set {
                bankAccountNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO only
        /// Description: Specifies the Statement text for ABA processing. Applicable for AU region only.
        /// 
        /// </summary>
        public string StatementText {
            get {
                return statementTextField;
            }
            set {
                statementTextField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Customer types allow categorizing customers in ways that are meaningful to the business. For example, one could set up customer types so that they indicate which industry a customer represents, a customer's geographic location, or how a customer first heard about the business. The categorization then can be used for reporting or mailings.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CustomerType : IntuitEntity, IEntity {
        
        private string nameField;
        
        private ReferenceType parentRefField;
        
        private string fullyQualifiedNameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable name for the CustomerType.[br /]Max. length: 31 characters.
        /// Product: QBO
        /// Description: User recognizable name for the CustomerType.[br /]Max. length: 15 characters.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the CustomerTypeParent.
        /// 
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name of the entity. The fully qualified name prepends the topmost parent, followed by each sub element separated by colons. Takes the form of Parent:Customer:Job:Sub-job. Limited to 5 levels.[br /]Max. length: 41 characters (single name) or 209 characters (fully qualified name).
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the Customer is active. Inactive customer types may be hidden from display and may not be used on financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes the Party as a Employee Role view
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Employee : NameBase {
        
        private string employeeTypeField;
        
        private string employeeNumberField;
        
        private string sSNField;
        
        private PhysicalAddress primaryAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private bool billableTimeField;
        
        private bool billableTimeFieldSpecified;
        
        private decimal billRateField;
        
        private bool billRateFieldSpecified;
        
        private System.DateTime birthDateField;
        
        private bool birthDateFieldSpecified;
        
        private gender genderField;
        
        private bool genderFieldSpecified;
        
        private System.DateTime hiredDateField;
        
        private bool hiredDateFieldSpecified;
        
        private System.DateTime releasedDateField;
        
        private bool releasedDateFieldSpecified;
        
        private TimeEntryUsedForPaychecksEnum useTimeEntryField;
        
        private bool useTimeEntryFieldSpecified;
        
        private IntuitAnyType employeeExField;
        
        private string v4IDPseudonymField;
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Employee type. For QuickBooks Desktop the valid values are defined in the EmployeeTypeEnum.
        /// </summary>
        public string EmployeeType {
            get {
                return employeeTypeField;
            }
            set {
                employeeTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the number of the employee (or account) in the employer's directory.
        /// Length Restriction:
        /// QBO: 15
        /// QBD: 99
        /// 
        /// </summary>
        public string EmployeeNumber {
            get {
                return employeeNumberField;
            }
            set {
                employeeNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the SSN of the employee.
        /// Length Restriction:
        /// QBO: 15
        /// QBD: 1024
        /// 
        /// </summary>
        public string SSN {
            get {
                return sSNField;
            }
            set {
                sSNField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents primary PhysicalAddress list
        /// 
        /// </summary>
        public PhysicalAddress PrimaryAddr {
            get {
                return primaryAddrField;
            }
            set {
                primaryAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents other PhysicalAddress list
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// BillableTime should be true if this employee’s hours are typically billed to customers. QBO only.
        /// QBD Unsupported field.
        /// 
        /// </summary>
        public bool BillableTime {
            get {
                return billableTimeField;
            }
            set {
                billableTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillableTimeSpecified {
            get {
                return billableTimeFieldSpecified;
            }
            set {
                billableTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// If BillableTime is true, BillRate can be set to specify this employee’s hourly billing rate. QBO only.
        /// QBD Unsupported field.
        /// 
        /// </summary>
        public decimal BillRate {
            get {
                return billRateField;
            }
            set {
                billRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BillRateSpecified {
            get {
                return billRateFieldSpecified;
            }
            set {
                billRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Employee birth date
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime BirthDate {
            get {
                return birthDateField;
            }
            set {
                birthDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool BirthDateSpecified {
            get {
                return birthDateFieldSpecified;
            }
            set {
                birthDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Gender details
        /// </summary>
        public gender Gender {
            get {
                return genderField;
            }
            set {
                genderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool GenderSpecified {
            get {
                return genderFieldSpecified;
            }
            set {
                genderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Employee hired date
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime HiredDate {
            get {
                return hiredDateField;
            }
            set {
                hiredDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool HiredDateSpecified {
            get {
                return hiredDateFieldSpecified;
            }
            set {
                hiredDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Date at which employee was releaved from the company
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime ReleasedDate {
            get {
                return releasedDateField;
            }
            set {
                releasedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReleasedDateSpecified {
            get {
                return releasedDateFieldSpecified;
            }
            set {
                releasedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies whether the Time Entry (time sheets) should be used to create paychecks for the employee.
        /// </summary>
        public TimeEntryUsedForPaychecksEnum UseTimeEntry {
            get {
                return useTimeEntryField;
            }
            set {
                useTimeEntryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool UseTimeEntrySpecified {
            get {
                return useTimeEntryFieldSpecified;
            }
            set {
                useTimeEntryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for Employee.
        /// </summary>
        public IntuitAnyType EmployeeEx {
            get {
                return employeeExField;
            }
            set {
                employeeExField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Auto generated Public ID when new employee added to QBO. (ReadOnly)
        /// 
        /// </summary>
        public string V4IDPseudonym {
            get {
                return v4IDPseudonymField;
            }
            set {
                v4IDPseudonymField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Job types allow for categorizing jobs so that similar jobs can be grouped and subtotaled on reports. Ultimately, they will help in determining which jobs are most profitable for the business.
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class JobType : IntuitEntity, IEntity {
        
        private string nameField;
        
        private ReferenceType parentRefField;
        
        private string fullyQualifiedNameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: User recognizable name for the Job Type.[br /]Max. length: 31 characters.
        /// Product: QBO
        /// Description: User recognizable name for the Job Type.[br /]Max. length: 15 characters.
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Reference to the JobTypeParent entity.
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name of the entity. The fully qualified name prepends the topmost parent, followed by each sub element separated by colons. Takes the form of Parent:Customer:Job:Sub-job. Limited to 5 levels.[br /]Max. length: 41 characters (single name) or 209 characters (fully qualified name).
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: True if the Job is active. Inactive job types may be hidden from display and may not be used on financial transactions.
        /// Filterable: QBW
        /// 
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes the Other Name (aka Payee). QBD only
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class OtherName : NameBase {
        
        private string acctNumField;
        
        private PhysicalAddress primaryAddrField;
        
        private PhysicalAddress[] otherAddrField;
        
        private IntuitAnyType otherNameExField;
        
        /// <remarks/>
        /// <summary>
        /// Name or number of the account associated with this other name (payee).
        /// Length Restriction:
        /// QBO: 15
        /// QBD: 1024
        /// 
        /// </summary>
        public string AcctNum {
            get {
                return acctNumField;
            }
            set {
                acctNumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents primary PhysicalAddress list
        /// 
        /// </summary>
        public PhysicalAddress PrimaryAddr {
            get {
                return primaryAddrField;
            }
            set {
                primaryAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Represents other PhysicalAddress list
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OtherAddr")]
        public PhysicalAddress[] OtherAddr {
            get {
                return otherAddrField;
            }
            set {
                otherAddrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Internal use only: extension place holder for OtherName.
        /// </summary>
        public IntuitAnyType OtherNameEx {
            get {
                return otherNameExField;
            }
            set {
                otherNameExField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Vendor types allow categorizing vendors in ways that are meaningful to the business. For example, one could set up vendor types so that they indicate a vendor's industry or geographic location. The categorization then can be used for reporting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class VendorType : IntuitEntity, IEntity {
        
        private string nameField;
        
        private ReferenceType parentRefField;
        
        private string fullyQualifiedNameField;
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// User recognizable name for the Vendor Type.
        /// Length Restriction:
        /// QBD: 1024
        /// 
        /// </summary>
        public string Name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// VendorType Parent referene
        /// </summary>
        public ReferenceType ParentRef {
            get {
                return parentRefField;
            }
            set {
                parentRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Fully qualified name of the entity. The fully qualified name prepends the topmost parent, followed by each sub element separated by colons. Takes the form of Parent:Customer:Job:Sub-job. Limited to 5 levels.[br /]Max. length: 41 characters (single name) or 209 characters (fully qualified name).
        /// 
        /// </summary>
        public string FullyQualifiedName {
            get {
                return fullyQualifiedNameField;
            }
            set {
                fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Whether or not active inactive customer types may be hidden from most display purposes and may not be used on financial transactions
        /// </summary>
        public bool Active {
            get {
                return activeField;
            }
            set {
                activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ActiveSpecified {
            get {
                return activeFieldSpecified;
            }
            set {
                activeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: ALL
    /// Description: Represents a tax agency to whom sales/purchase/VAT taxes collected are paid
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxAgency : Vendor {
        
        private ReferenceType salesTaxCodeRefField;
        
        private string salesTaxCountryField;
        
        private ReferenceType salesTaxReturnRefField;
        
        private string taxRegistrationNumberField;
        
        private string reportingPeriodField;
        
        private bool taxTrackedOnPurchasesField;
        
        private bool taxTrackedOnPurchasesFieldSpecified;
        
        private ReferenceType taxOnPurchasesAccountRefField;
        
        private bool taxTrackedOnSalesField;
        
        private bool taxTrackedOnSalesFieldSpecified;
        
        private ReferenceType taxTrackedOnSalesAccountRefField;
        
        private bool taxOnTaxField;
        
        private bool taxOnTaxFieldSpecified;
        
        private System.DateTime lastFileDateField;
        
        private bool lastFileDateFieldSpecified;
        
        private IntuitAnyType taxAgencyExtField;
        
        private string taxAgencyConfigField;
        
        /// <remarks/>
        public ReferenceType SalesTaxCodeRef {
            get {
                return salesTaxCodeRefField;
            }
            set {
                salesTaxCodeRefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// We'll need an Enum for the usual countries
        /// </summary>
        public string SalesTaxCountry {
            get {
                return salesTaxCountryField;
            }
            set {
                salesTaxCountryField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType SalesTaxReturnRef {
            get {
                return salesTaxReturnRefField;
            }
            set {
                salesTaxReturnRefField = value;
            }
        }
        
        /// <remarks/>
        public string TaxRegistrationNumber {
            get {
                return taxRegistrationNumberField;
            }
            set {
                taxRegistrationNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// We'll need an Enum for the reporting periods
        /// </summary>
        public string ReportingPeriod {
            get {
                return reportingPeriodField;
            }
            set {
                reportingPeriodField = value;
            }
        }
        
        /// <remarks/>
        public bool TaxTrackedOnPurchases {
            get {
                return taxTrackedOnPurchasesField;
            }
            set {
                taxTrackedOnPurchasesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxTrackedOnPurchasesSpecified {
            get {
                return taxTrackedOnPurchasesFieldSpecified;
            }
            set {
                taxTrackedOnPurchasesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType TaxOnPurchasesAccountRef {
            get {
                return taxOnPurchasesAccountRefField;
            }
            set {
                taxOnPurchasesAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public bool TaxTrackedOnSales {
            get {
                return taxTrackedOnSalesField;
            }
            set {
                taxTrackedOnSalesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxTrackedOnSalesSpecified {
            get {
                return taxTrackedOnSalesFieldSpecified;
            }
            set {
                taxTrackedOnSalesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType TaxTrackedOnSalesAccountRef {
            get {
                return taxTrackedOnSalesAccountRefField;
            }
            set {
                taxTrackedOnSalesAccountRefField = value;
            }
        }
        
        /// <remarks/>
        public bool TaxOnTax {
            get {
                return taxOnTaxField;
            }
            set {
                taxOnTaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxOnTaxSpecified {
            get {
                return taxOnTaxFieldSpecified;
            }
            set {
                taxOnTaxFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: This specifies the last filing date for this tax agency.
        /// InputType: QBO: ReadOnly
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="dateTime")]
        public System.DateTime LastFileDate {
            get {
                return lastFileDateField;
            }
            set {
                lastFileDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LastFileDateSpecified {
            get {
                return lastFileDateFieldSpecified;
            }
            set {
                lastFileDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public IntuitAnyType TaxAgencyExt {
            get {
                return taxAgencyExtField;
            }
            set {
                taxAgencyExtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Tax agency config. Identify if the agency is System generated or User created.
        /// 
        /// </summary>
        public string TaxAgencyConfig {
            get {
                return taxAgencyConfigField;
            }
            set {
                taxAgencyConfigField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// FaultTypeEnumeration list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum FaultTypeEnum {
        
        /// <remarks/>
        AuthenticationFault,
        
        /// <remarks/>
        AuthorizatonFault,
        
        /// <remarks/>
        ValidationFault,
        
        /// <remarks/>
        SystemFault,
    }
    
    /// <remarks/>
    /// <summary>
    /// Detailed data about warnings that occurred when a request was processed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Warnings {
        
        private Warning[] warningField;
        
        /// <remarks/>
        /// <summary>
        /// Warning details specifies each warning
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Warning")]
        public Warning[] Warning {
            get {
                return warningField;
            }
            set {
                warningField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Error Type detailing error
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Error {
        
        private string messageField;
        
        private string detailField;
        
        private string detailLinkField;
        
        private string codeField;
        
        private string elementField;
        
        /// <remarks/>
        /// <summary>
        /// Localized standard message associated with the error code
        /// </summary>
        public string Message {
            get {
                return messageField;
            }
            set {
                messageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Detailed error localized or unlocalized error that is thrown by the business logic backend that caused the error
        /// </summary>
        public string Detail {
            get {
                return detailField;
            }
            set {
                detailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Link to get more details about error like common cause, remedy etc
        /// </summary>
        public string DetailLink {
            get {
                return detailLinkField;
            }
            set {
                detailLinkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Error code number, this is a required field
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code {
            get {
                return codeField;
            }
            set {
                codeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Element that caused the error
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string element {
            get {
                return elementField;
            }
            set {
                elementField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Fault entity describing the fault
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Fault {
        
        private Error[] errorField;
        
        private string typeField;
        
        /// <remarks/>
        /// <summary>
        /// Error entity that describes the details of the error, if there are multiple errors, multiple occurrence of error object will be represented as multiple errors
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Error")]
        public Error[] Error {
            get {
                return errorField;
            }
            set {
                errorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Element that caused the error
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// IntuitResponse is a holder of all types of entities that come as part of response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class IntuitResponse {
        
        private Warning[] warningsField;
        
        private object[] itemsField;
        
        private string requestIdField;
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private string statusField;
        
        private object itemField;
        
        /// <remarks/>
        /// <summary>
        /// Indication that a request was processed, but with possible exceptional circumstances (i.e. ignored unsupported fields) that the client may want to be aware of
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Warning[] Warnings {
            get {
                return warningsField;
            }
            set {
                warningsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AttachableResponse", typeof(AttachableResponse))]
        [System.Xml.Serialization.XmlElementAttribute("BatchItemResponse", typeof(BatchItemResponse))]
        [System.Xml.Serialization.XmlElementAttribute("CDCResponse", typeof(CDCResponse))]
        [System.Xml.Serialization.XmlElementAttribute("IntuitObject", typeof(IntuitEntity))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the RequestId associated with the request
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string requestId {
            get {
                return requestIdField;
            }
            set {
                requestIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the time at which request started processing in the server
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime time {
            get {
                return timeField;
            }
            set {
                timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool timeSpecified {
            get {
                return timeFieldSpecified;
            }
            set {
                timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the HTTP codes result of the operation
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string status {
            get {
                return statusField;
            }
            set {
                statusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        [System.Xml.Serialization.XmlElementAttribute("Report", typeof(Report))]
        [System.Xml.Serialization.XmlElementAttribute("QueryResponse", typeof(QueryResponse))]
        [System.Xml.Serialization.XmlElementAttribute("SyncErrorResponse", typeof(SyncErrorResponse))]
        [System.Xml.Serialization.XmlElementAttribute("OLBTransaction", typeof(OLBTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("OLBStatus", typeof(OLBStatus))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// AttachableResponse entity describing the response of upload results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class AttachableResponse {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// QueryResponse entity describing the response of query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BatchItemResponse {
        
        private Warning[] warningsField;
        
        private object itemField;
        
        private string bIdField;
        
        /// <remarks/>
        /// <summary>
        /// Indication that a request was processed, but with possible exceptional circumstances (i.e. ignored unsupported fields) that the client may want to be aware of
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Warning[] Warnings {
            get {
                return warningsField;
            }
            set {
                warningsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("CDCResponse", typeof(CDCResponse))]
        [System.Xml.Serialization.XmlElementAttribute("CascadeResponse", typeof(CascadeResponse))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("IntuitObject", typeof(IntuitEntity))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("QueryResponse", typeof(QueryResponse))]
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Report", typeof(Report))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the batch id for which the response corresponds to
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bId {
            get {
                return bIdField;
            }
            set {
                bIdField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// QueryResponse entity describing the response of query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CDCResponse {
        
        private object[] itemsField;
        
        private int sizeField;
        
        private bool sizeFieldSpecified;
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("QueryResponse", typeof(QueryResponse))]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the number of rows in this result
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int size {
            get {
                return sizeField;
            }
            set {
                sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool sizeSpecified {
            get {
                return sizeFieldSpecified;
            }
            set {
                sizeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// QueryResponse entity describing the response of query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class QueryResponse {
        
        private Warning[] warningsField;
        
        private object[] itemsField;
        
        private int startPositionField;
        
        private bool startPositionFieldSpecified;
        
        private int maxResultsField;
        
        private bool maxResultsFieldSpecified;
        
        private int totalCountField;
        
        private bool totalCountFieldSpecified;
        
        private object itemField;
        
        /// <remarks/>
        /// <summary>
        /// Indication that a request was processed, but with possible exceptional circumstances (i.e. ignored unsupported fields) that the client may want to be aware of
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Warning[] Warnings {
            get {
                return warningsField;
            }
            set {
                warningsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("IntuitObject", typeof(IntuitEntity))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        public object[] AnyIntuitObjects {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the starting row number in this result
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int startPosition {
            get {
                return startPositionField;
            }
            set {
                startPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool startPositionSpecified {
            get {
                return startPositionFieldSpecified;
            }
            set {
                startPositionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the number of records in this result
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int maxResults {
            get {
                return maxResultsField;
            }
            set {
                maxResultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool maxResultsSpecified {
            get {
                return maxResultsFieldSpecified;
            }
            set {
                maxResultsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the total count of records that satisfy the filter condition
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int totalCount {
            get {
                return totalCountField;
            }
            set {
                totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool totalCountSpecified {
            get {
                return totalCountFieldSpecified;
            }
            set {
                totalCountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// The Recurrence Transaction Object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class RecurringTransaction : IntuitEntity, IEntity {
        
        private IntuitEntity itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        public IntuitEntity AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: generic meta data response for any add mod
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Status : IntuitEntity, IEntity {
        
        private string requestIdField;
        
        private string batchIdField;
        
        private string objectTypeField;
        
        private string stateCodeField;
        
        private string stateDescField;
        
        private string messageCodeField;
        
        private string messageDescField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Request Id to create/update object
        /// Filterable: QBW
        /// 
        /// </summary>
        public string RequestId {
            get {
                return requestIdField;
            }
            set {
                requestIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Batch Id to create/update object
        /// Filterable: QBW
        /// 
        /// </summary>
        public string BatchId {
            get {
                return batchIdField;
            }
            set {
                batchIdField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectType {
            get {
                return objectTypeField;
            }
            set {
                objectTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Code for Current State of object
        /// Filterable: QBW
        /// 
        /// </summary>
        public string StateCode {
            get {
                return stateCodeField;
            }
            set {
                stateCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Description for Current State of object
        /// 
        /// </summary>
        public string StateDesc {
            get {
                return stateDescField;
            }
            set {
                stateDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Status Message Code
        /// 
        /// </summary>
        public string MessageCode {
            get {
                return messageCodeField;
            }
            set {
                messageCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Status Message if error occurred else null
        /// 
        /// </summary>
        public string MessageDesc {
            get {
                return messageDescField;
            }
            set {
                messageDescField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: Provides upload/writeback activity for a given period of time. Query activity using
    /// StartSyncTMS OR EndSyncTMS
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SyncActivity : IntuitEntity, IEntity {
        
        private System.DateTime latestUploadDateTimeField;
        
        private bool latestUploadDateTimeFieldSpecified;
        
        private System.DateTime latestWriteBackDateTimeField;
        
        private bool latestWriteBackDateTimeFieldSpecified;
        
        private SyncType syncTypeField;
        
        private bool syncTypeFieldSpecified;
        
        private System.DateTime startSyncTMSField;
        
        private bool startSyncTMSFieldSpecified;
        
        private System.DateTime endSyncTMSField;
        
        private bool endSyncTMSFieldSpecified;
        
        private string entityNameField;
        
        private int entityRowCountField;
        
        private bool entityRowCountFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Description: indicates when the data sync upload or write back started
        /// 
        /// </summary>
        public System.DateTime LatestUploadDateTime {
            get {
                return latestUploadDateTimeField;
            }
            set {
                latestUploadDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LatestUploadDateTimeSpecified {
            get {
                return latestUploadDateTimeFieldSpecified;
            }
            set {
                latestUploadDateTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: indicates when the data sync upload or write back completed
        /// 
        /// </summary>
        public System.DateTime LatestWriteBackDateTime {
            get {
                return latestWriteBackDateTimeField;
            }
            set {
                latestWriteBackDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool LatestWriteBackDateTimeSpecified {
            get {
                return latestWriteBackDateTimeFieldSpecified;
            }
            set {
                latestWriteBackDateTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: can be either Upload or Write back sync type
        /// 
        /// </summary>
        public SyncType SyncType {
            get {
                return syncTypeField;
            }
            set {
                syncTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool SyncTypeSpecified {
            get {
                return syncTypeFieldSpecified;
            }
            set {
                syncTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: indicates when the data sync upload or write back started
        /// Filterable: QBW
        /// 
        /// </summary>
        public System.DateTime StartSyncTMS {
            get {
                return startSyncTMSField;
            }
            set {
                startSyncTMSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool StartSyncTMSSpecified {
            get {
                return startSyncTMSFieldSpecified;
            }
            set {
                startSyncTMSFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: indicates when the data sync upload or write back completed
        /// Filterable: QBW
        /// 
        /// </summary>
        public System.DateTime EndSyncTMS {
            get {
                return endSyncTMSField;
            }
            set {
                endSyncTMSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EndSyncTMSSpecified {
            get {
                return endSyncTMSFieldSpecified;
            }
            set {
                endSyncTMSFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: name of the entity that is part of the data sync
        /// 
        /// </summary>
        public string EntityName {
            get {
                return entityNameField;
            }
            set {
                entityNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: number of rows of this entity that have been uploaded or written back to QB
        /// 
        /// </summary>
        public int EntityRowCount {
            get {
                return entityRowCountField;
            }
            set {
                entityRowCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool EntityRowCountSpecified {
            get {
                return entityRowCountFieldSpecified;
            }
            set {
                entityRowCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: must be either upload or writeback
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SyncType {
        
        /// <remarks/>
        Upload,
        
        /// <remarks/>
        Writeback,
    }
    
    /// <remarks/>
    /// <summary>
    /// Describes SalesTax details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxService : IntuitEntity, IEntity {
        
        private string taxCodeField;
        
        private string taxCodeIdField;
        
        private TaxRateDetails[] taxRateDetailsField;
        
        private Fault faultField;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Describes the taxcode
        /// 
        /// </summary>
        public string TaxCode {
            get {
                return taxCodeField;
            }
            set {
                taxCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Describes the taxcode Id, this is output only
        /// 
        /// </summary>
        public string TaxCodeId {
            get {
                return taxCodeIdField;
            }
            set {
                taxCodeIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TaxRate details
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TaxRateDetails")]
        public TaxRateDetails[] TaxRateDetails {
            get {
                return taxRateDetailsField;
            }
            set {
                taxRateDetailsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Fault or Object should be returned
        /// </summary>
        public Fault Fault {
            get {
                return faultField;
            }
            set {
                faultField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: TaxRate details
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class TaxRateDetails {
        
        private string taxRateNameField;
        
        private string taxRateIdField;
        
        private decimal rateValueField;
        
        private bool rateValueFieldSpecified;
        
        private string taxAgencyIdField;
        
        private TaxRateApplicableOnEnum taxApplicableOnField;
        
        private bool taxApplicableOnFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TaxRate details
        /// 
        /// </summary>
        public string TaxRateName {
            get {
                return taxRateNameField;
            }
            set {
                taxRateNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TaxRate details
        /// 
        /// </summary>
        public string TaxRateId {
            get {
                return taxRateIdField;
            }
            set {
                taxRateIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TaxRate value
        /// 
        /// </summary>
        public decimal RateValue {
            get {
                return rateValueField;
            }
            set {
                rateValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool RateValueSpecified {
            get {
                return rateValueFieldSpecified;
            }
            set {
                rateValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: TaxAgency details
        /// 
        /// </summary>
        public string TaxAgencyId {
            get {
                return taxAgencyIdField;
            }
            set {
                taxAgencyIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBO
        /// Description: Default is SalesTax
        /// 
        /// </summary>
        public TaxRateApplicableOnEnum TaxApplicableOn {
            get {
                return taxApplicableOnField;
            }
            set {
                taxApplicableOnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TaxApplicableOnSpecified {
            get {
                return taxApplicableOnFieldSpecified;
            }
            set {
                taxApplicableOnFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBO
    /// Description: Enumeration of  transaction type a given tax rate can be applied to
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum TaxRateApplicableOnEnum {
        
        /// <remarks/>
        Sales,
        
        /// <remarks/>
        Purchase,
        
        /// <remarks/>
        Adjustment,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    /// <summary>
    /// Report Response Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public partial class Report {
        
        private ReportHeader headerField;
        
        private Column[] columnsField;
        
        private Row[] rowsField;
        
        /// <remarks/>
        /// <summary>
        /// Report Header, contains the report options that were used to generate the report
        /// </summary>
        public ReportHeader Header {
            get {
                return headerField;
            }
            set {
                headerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Column[] Columns {
            get {
                return columnsField;
            }
            set {
                columnsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Row[] Rows {
            get {
                return rowsField;
            }
            set {
                rowsField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// Specifies the Header of a Report, Time report was generated, parameters corresponding to the request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class ReportHeader {
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private string reportNameField;
        
        private string dateMacroField;
        
        private ReportBasisEnum reportBasisField;
        
        private bool reportBasisFieldSpecified;
        
        private string startPeriodField;
        
        private string endPeriodField;
        
        private string summarizeColumnsByField;
        
        private string currencyField;
        
        private string customerField;
        
        private string vendorField;
        
        private string employeeField;
        
        private string itemField;
        
        private string classField;
        
        private string departmentField;
        
        private NameValue[] optionField;
        
        /// <remarks/>
        /// <summary>
        /// Specifies the time at which report was generated
        /// </summary>
        public System.DateTime Time {
            get {
                return timeField;
            }
            set {
                timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool TimeSpecified {
            get {
                return timeFieldSpecified;
            }
            set {
                timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the report name
        /// </summary>
        public string ReportName {
            get {
                return reportNameField;
            }
            set {
                reportNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the report name
        /// </summary>
        public string DateMacro {
            get {
                return dateMacroField;
            }
            set {
                dateMacroField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the report is cash basis or accrual basis
        /// </summary>
        public ReportBasisEnum ReportBasis {
            get {
                return reportBasisField;
            }
            set {
                reportBasisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ReportBasisSpecified {
            get {
                return reportBasisFieldSpecified;
            }
            set {
                reportBasisFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Start Period for which the report was generated
        /// </summary>
        public string StartPeriod {
            get {
                return startPeriodField;
            }
            set {
                startPeriodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// End Period for which the report was generated
        /// </summary>
        public string EndPeriod {
            get {
                return endPeriodField;
            }
            set {
                endPeriodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Summarize columns by enumeration
        /// </summary>
        public string SummarizeColumnsBy {
            get {
                return summarizeColumnsByField;
            }
            set {
                summarizeColumnsByField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the currency code associated with the report, note that this is one place where this is just the currency code, not a reference to a currency object
        /// </summary>
        public string Currency {
            get {
                return currencyField;
            }
            set {
                currencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the customer id (comma separeted) for which the report is run this is just the id, not a reference to a customer object
        /// </summary>
        public string Customer {
            get {
                return customerField;
            }
            set {
                customerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the vendor id (comma separeted) for which the report is run this is just the id, not a reference to a vendor object
        /// </summary>
        public string Vendor {
            get {
                return vendorField;
            }
            set {
                vendorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the employee id (comma separeted) for which the report is run this is just the id, not a reference to a employee object
        /// </summary>
        public string Employee {
            get {
                return employeeField;
            }
            set {
                employeeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the product/service id (comma separeted) for which the report is run this is just the id, not a reference to a product/service object
        /// </summary>
        public string AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the class id (comma separeted) for which the report is run this is just the  id, not a reference to a class object
        /// </summary>
        public string Class {
            get {
                return classField;
            }
            set {
                classField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the Department id (comma separeted) for which the report is run this is just the  id, not a reference to a Department object
        /// </summary>
        public string Department {
            get {
                return departmentField;
            }
            set {
                departmentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Describes the options used for the report
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Option")]
        public NameValue[] Option {
            get {
                return optionField;
            }
            set {
                optionField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: Provides a wrapper for SyncError for Conflict API Response
    /// Consists of list of SyncError objects
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SyncErrorResponse {
        
        private SyncError[] syncErrorField;
        
        private System.DateTime latestUploadTimeField;
        
        private bool latestUploadTimeFieldSpecified;
        
        private int startPositionField;
        
        private bool startPositionFieldSpecified;
        
        private int maxResultsField;
        
        private bool maxResultsFieldSpecified;
        
        private int totalCountField;
        
        private bool totalCountFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product:QBW
        /// Description: Wrapper of both types of Objects CloudVersion and QBVersion of objects
        /// If there are multiple errored objects you will get a list of errored objects
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SyncError")]
        public SyncError[] SyncError {
            get {
                return syncErrorField;
            }
            set {
                syncErrorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Specifies the latest time when Upload happened.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime latestUploadTime {
            get {
                return latestUploadTimeField;
            }
            set {
                latestUploadTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool latestUploadTimeSpecified {
            get {
                return latestUploadTimeFieldSpecified;
            }
            set {
                latestUploadTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the starting row number in this result
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int startPosition {
            get {
                return startPositionField;
            }
            set {
                startPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool startPositionSpecified {
            get {
                return startPositionFieldSpecified;
            }
            set {
                startPositionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the number of records in this result
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int maxResults {
            get {
                return maxResultsField;
            }
            set {
                maxResultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool maxResultsSpecified {
            get {
                return maxResultsFieldSpecified;
            }
            set {
                maxResultsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the total count of records that satisfy the filter condition
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int totalCount {
            get {
                return totalCountField;
            }
            set {
                totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool totalCountSpecified {
            get {
                return totalCountFieldSpecified;
            }
            set {
                totalCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: Wrapper object for specifying both version of the objects
    /// If there is any warnings on a object basis that is also send back
    /// This object is output object only
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SyncError {
        
        private Error errorField;
        
        private SyncObject cloudVersionField;
        
        private SyncObject qBVersionField;
        
        private string typeField;
        
        private string appTokenField;
        
        /// <remarks/>
        /// <summary>
        /// Indicates the type of error that happened in the sync to desktop
        /// </summary>
        public Error Error {
            get {
                return errorField;
            }
            set {
                errorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indicates the cloud version of the synced object
        /// 
        /// </summary>
        public SyncObject CloudVersion {
            get {
                return cloudVersionField;
            }
            set {
                cloudVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indicates the QB version of the synced object
        /// 
        /// </summary>
        public SyncObject QBVersion {
            get {
                return qBVersionField;
            }
            set {
                qBVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: QBW
        /// Description: Indicates error type of entity. The value must correspond to SyncErrorType.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// 
        /// Product: ALL
        /// Description: Indicates the apptoken of the entity.
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AppToken {
            get {
                return appTokenField;
            }
            set {
                appTokenField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: SyncObject that has an error
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class SyncObject {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("Fault", typeof(Fault))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("IntuitObject", typeof(IntuitEntity))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// QueryResponse entity describing the response of query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class BatchItemRequest {
        
        private object itemField;
        
        private ItemChoiceType7 itemElementNameField;
        
        private string bIdField;
        
        private OperationEnum operationField;
        
        private bool operationFieldSpecified;
        
        private string optionsDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Account", typeof(Account))]
        [System.Xml.Serialization.XmlElementAttribute("Attachable", typeof(Attachable))]
        [System.Xml.Serialization.XmlElementAttribute("Bill", typeof(Bill))]
        [System.Xml.Serialization.XmlElementAttribute("BillPayment", typeof(BillPayment))]
        [System.Xml.Serialization.XmlElementAttribute("BooleanTypeCustomFieldDefinition", typeof(BooleanTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Budget", typeof(Budget))]
        [System.Xml.Serialization.XmlElementAttribute("CDCQuery", typeof(CDCQuery))]
        [System.Xml.Serialization.XmlElementAttribute("ChargeCredit", typeof(ChargeCredit))]
        [System.Xml.Serialization.XmlElementAttribute("Class", typeof(Class))]
        [System.Xml.Serialization.XmlElementAttribute("Company", typeof(Company))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyCurrency", typeof(CompanyCurrency))]
        [System.Xml.Serialization.XmlElementAttribute("CompanyInfo", typeof(CompanyInfo))]
        [System.Xml.Serialization.XmlElementAttribute("CreditCardPaymentTxn", typeof(CreditCardPaymentTxn))]
        [System.Xml.Serialization.XmlElementAttribute("CreditMemo", typeof(CreditMemo))]
        [System.Xml.Serialization.XmlElementAttribute("CustomFieldDefinition", typeof(CustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Customer", typeof(Customer))]
        [System.Xml.Serialization.XmlElementAttribute("CustomerType", typeof(CustomerType))]
        [System.Xml.Serialization.XmlElementAttribute("DateTypeCustomFieldDefinition", typeof(DateTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("Department", typeof(Department))]
        [System.Xml.Serialization.XmlElementAttribute("Deposit", typeof(Deposit))]
        [System.Xml.Serialization.XmlElementAttribute("EmailDeliveryInfo", typeof(EmailDeliveryInfo))]
        [System.Xml.Serialization.XmlElementAttribute("Employee", typeof(Employee))]
        [System.Xml.Serialization.XmlElementAttribute("Estimate", typeof(Estimate))]
        [System.Xml.Serialization.XmlElementAttribute("ExchangeRate", typeof(ExchangeRate))]
        [System.Xml.Serialization.XmlElementAttribute("FixedAsset", typeof(FixedAsset))]
        [System.Xml.Serialization.XmlElementAttribute("IntuitObject", typeof(IntuitEntity))]
        [System.Xml.Serialization.XmlElementAttribute("InventorySite", typeof(InventorySite))]
        [System.Xml.Serialization.XmlElementAttribute("Invoice", typeof(Invoice))]
        [System.Xml.Serialization.XmlElementAttribute("Item", typeof(Item))]
        [System.Xml.Serialization.XmlElementAttribute("JournalCode", typeof(JournalCode))]
        [System.Xml.Serialization.XmlElementAttribute("JournalEntry", typeof(JournalEntry))]
        [System.Xml.Serialization.XmlElementAttribute("MasterAccount", typeof(MasterAccount))]
        [System.Xml.Serialization.XmlElementAttribute("NumberTypeCustomFieldDefinition", typeof(NumberTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("OtherName", typeof(OtherName))]
        [System.Xml.Serialization.XmlElementAttribute("Payment", typeof(Payment))]
        [System.Xml.Serialization.XmlElementAttribute("PaymentMethod", typeof(PaymentMethod))]
        [System.Xml.Serialization.XmlElementAttribute("Preferences", typeof(Preferences))]
        [System.Xml.Serialization.XmlElementAttribute("PriceLevel", typeof(PriceLevel))]
        [System.Xml.Serialization.XmlElementAttribute("Purchase", typeof(Purchase))]
        [System.Xml.Serialization.XmlElementAttribute("PurchaseOrder", typeof(PurchaseOrder))]
        [System.Xml.Serialization.XmlElementAttribute("QbdtEntityIdMapping", typeof(QbdtEntityIdMapping))]
        [System.Xml.Serialization.XmlElementAttribute("Query", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("RecurringTransaction", typeof(RecurringTransaction))]
        [System.Xml.Serialization.XmlElementAttribute("RefundReceipt", typeof(RefundReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("ReimburseCharge", typeof(ReimburseCharge))]
        [System.Xml.Serialization.XmlElementAttribute("ReportQuery", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("SalesOrder", typeof(SalesOrder))]
        [System.Xml.Serialization.XmlElementAttribute("SalesReceipt", typeof(SalesReceipt))]
        [System.Xml.Serialization.XmlElementAttribute("SalesRep", typeof(SalesRep))]
        [System.Xml.Serialization.XmlElementAttribute("StatementCharge", typeof(StatementCharge))]
        [System.Xml.Serialization.XmlElementAttribute("Status", typeof(Status))]
        [System.Xml.Serialization.XmlElementAttribute("StringTypeCustomFieldDefinition", typeof(StringTypeCustomFieldDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("SyncActivity", typeof(SyncActivity))]
        [System.Xml.Serialization.XmlElementAttribute("TDSMetadata", typeof(TDSMetadata))]
        [System.Xml.Serialization.XmlElementAttribute("Tag", typeof(Tag))]
        [System.Xml.Serialization.XmlElementAttribute("Task", typeof(Task))]
        [System.Xml.Serialization.XmlElementAttribute("TaxAgency", typeof(TaxAgency))]
        [System.Xml.Serialization.XmlElementAttribute("TaxClassification", typeof(TaxClassification))]
        [System.Xml.Serialization.XmlElementAttribute("TaxCode", typeof(TaxCode))]
        [System.Xml.Serialization.XmlElementAttribute("TaxPayment", typeof(TaxPayment))]
        [System.Xml.Serialization.XmlElementAttribute("TaxRate", typeof(TaxRate))]
        [System.Xml.Serialization.XmlElementAttribute("TaxReturn", typeof(TaxReturn))]
        [System.Xml.Serialization.XmlElementAttribute("TaxService", typeof(TaxService))]
        [System.Xml.Serialization.XmlElementAttribute("Term", typeof(Term))]
        [System.Xml.Serialization.XmlElementAttribute("TimeActivity", typeof(TimeActivity))]
        [System.Xml.Serialization.XmlElementAttribute("Transfer", typeof(Transfer))]
        [System.Xml.Serialization.XmlElementAttribute("UserAlert", typeof(UserAlert))]
        [System.Xml.Serialization.XmlElementAttribute("Vendor", typeof(Vendor))]
        [System.Xml.Serialization.XmlElementAttribute("VendorCredit", typeof(VendorCredit))]
        [System.Xml.Serialization.XmlElementAttribute("VendorType", typeof(VendorType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object AnyIntuitObject {
            get {
                return itemField;
            }
            set {
                itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public ItemChoiceType7 ItemElementName {
            get {
                return itemElementNameField;
            }
            set {
                itemElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the batch id for which the response corresponds to
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bId {
            get {
                return bIdField;
            }
            set {
                bIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies the batch id for which the response corresponds to
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public OperationEnum operation {
            get {
                return operationField;
            }
            set {
                operationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool operationSpecified {
            get {
                return operationFieldSpecified;
            }
            set {
                operationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Specifies name value pair of options other than operations
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string optionsData {
            get {
                return optionsDataField;
            }
            set {
                optionsDataField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// CDCQuery entity describing need for query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class CDCQuery {
        
        private string entitiesField;
        
        private System.DateTime changedSinceField;
        
        private bool changedSinceFieldSpecified;
        
        /// <remarks/>
        /// <summary>
        /// Coma separated entity list of entities required
        /// </summary>
        public string Entities {
            get {
                return entitiesField;
            }
            set {
                entitiesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>
        /// Time after which changes are required on the entities that are updated, created, deleted
        /// </summary>
        public System.DateTime ChangedSince {
            get {
                return changedSinceField;
            }
            set {
                changedSinceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [JsonIgnore()]
        public bool ChangedSinceSpecified {
            get {
                return changedSinceFieldSpecified;
            }
            set {
                changedSinceFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3", IncludeInSchema=false)]
    public enum ItemChoiceType7 {
        
        /// <remarks/>
        Account,
        
        /// <remarks/>
        Attachable,
        
        /// <remarks/>
        Bill,
        
        /// <remarks/>
        BillPayment,
        
        /// <remarks/>
        BooleanTypeCustomFieldDefinition,
        
        /// <remarks/>
        Budget,
        
        /// <remarks/>
        CDCQuery,
        
        /// <remarks/>
        ChargeCredit,
        
        /// <remarks/>
        Class,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        CompanyCurrency,
        
        /// <remarks/>
        CompanyInfo,
        
        /// <remarks/>
        CreditCardPaymentTxn,
        
        /// <remarks/>
        CreditMemo,
        
        /// <remarks/>
        CustomFieldDefinition,
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        CustomerType,
        
        /// <remarks/>
        DateTypeCustomFieldDefinition,
        
        /// <remarks/>
        Department,
        
        /// <remarks/>
        Deposit,
        
        /// <remarks/>
        EmailDeliveryInfo,
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Estimate,
        
        /// <remarks/>
        ExchangeRate,
        
        /// <remarks/>
        FixedAsset,
        
        /// <remarks/>
        IntuitObject,
        
        /// <remarks/>
        InventorySite,
        
        /// <remarks/>
        Invoice,
        
        /// <remarks/>
        Item,
        
        /// <remarks/>
        JournalCode,
        
        /// <remarks/>
        JournalEntry,
        
        /// <remarks/>
        MasterAccount,
        
        /// <remarks/>
        NumberTypeCustomFieldDefinition,
        
        /// <remarks/>
        OtherName,
        
        /// <remarks/>
        Payment,
        
        /// <remarks/>
        PaymentMethod,
        
        /// <remarks/>
        Preferences,
        
        /// <remarks/>
        PriceLevel,
        
        /// <remarks/>
        Purchase,
        
        /// <remarks/>
        PurchaseOrder,
        
        /// <remarks/>
        QbdtEntityIdMapping,
        
        /// <remarks/>
        Query,
        
        /// <remarks/>
        RecurringTransaction,
        
        /// <remarks/>
        RefundReceipt,
        
        /// <remarks/>
        ReimburseCharge,
        
        /// <remarks/>
        ReportQuery,
        
        /// <remarks/>
        SalesOrder,
        
        /// <remarks/>
        SalesReceipt,
        
        /// <remarks/>
        SalesRep,
        
        /// <remarks/>
        StatementCharge,
        
        /// <remarks/>
        Status,
        
        /// <remarks/>
        StringTypeCustomFieldDefinition,
        
        /// <remarks/>
        SyncActivity,
        
        /// <remarks/>
        TDSMetadata,
        
        /// <remarks/>
        Tag,
        
        /// <remarks/>
        Task,
        
        /// <remarks/>
        TaxAgency,
        
        /// <remarks/>
        TaxClassification,
        
        /// <remarks/>
        TaxCode,
        
        /// <remarks/>
        TaxPayment,
        
        /// <remarks/>
        TaxRate,
        
        /// <remarks/>
        TaxReturn,
        
        /// <remarks/>
        TaxService,
        
        /// <remarks/>
        Term,
        
        /// <remarks/>
        TimeActivity,
        
        /// <remarks/>
        Transfer,
        
        /// <remarks/>
        UserAlert,
        
        /// <remarks/>
        Vendor,
        
        /// <remarks/>
        VendorCredit,
        
        /// <remarks/>
        VendorType,
    }
    
    /// <remarks/>
    /// <summary>
    /// Enumerates list of CUD operations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum OperationEnum {
        
        /// <remarks/>
        create,
        
        /// <remarks/>
        update,
        
        /// <remarks/>
        revert,
        
        /// <remarks/>
        delete,
        
        /// <remarks/>
        @void,
        
        /// <remarks/>
        send,
        
        /// <remarks/>
        merge,
        
        /// <summary>
        /// Added by XsdExtension
        /// </summary>
        query,
        
        /// <summary>
        /// Added by XsdExtension
        /// </summary>
        report,
    }
    
    /// <remarks/>
    /// <summary>
    /// QueryResponse entity describing the response of query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class IntuitBatchRequest {
        
        private BatchItemRequest[] batchItemRequestField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BatchItemRequest")]
        public BatchItemRequest[] BatchItemRequest {
            get {
                return batchItemRequestField;
            }
            set {
                batchItemRequestField = value;
            }
        }
    }
    
    /// <remarks/>
    /// <summary>
    /// 
    /// Product: QBW
    /// Description: must be either of the following values
    /// 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SyncErrorType {
        
        /// <remarks/>
        OutOfSync,
        
        /// <remarks/>
        BusinessLogic,
        
        /// <remarks/>
        SystemError,
    }
    
    /// <remarks/>
    /// <summary>
    /// Date macros enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum DateMacro {
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        Today,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Week")]
        ThisWeek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Week-to-date")]
        ThisWeektodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Month")]
        ThisMonth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Month-to-date")]
        ThisMonthtodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Fiscal Quarter")]
        ThisFiscalQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Fiscal Quarter-to-date")]
        ThisFiscalQuartertodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Fiscal Year")]
        ThisFiscalYear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Fiscal Year-to-date")]
        ThisFiscalYeartodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Calendar Quarter")]
        ThisCalendarQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Calendar Quarter-to-date")]
        ThisCalendarQuartertodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Calendar Year")]
        ThisCalendarYear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("This Calendar Year-to-date")]
        ThisCalendarYeartodate,
        
        /// <remarks/>
        Yesterday,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Week")]
        LastWeek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Week-to-date")]
        LastWeektodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Month")]
        LastMonth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Month-to-date")]
        LastMonthtodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Fiscal Quarter")]
        LastFiscalQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Fiscal Quarter-to-date")]
        LastFiscalQuartertodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Fiscal Year")]
        LastFiscalYear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Fiscal Year-to-date")]
        LastFiscalYeartodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Calendar Quarter")]
        LastCalendarQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Calendar Quarter-to-date")]
        LastCalendarQuartertodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Calendar Year")]
        LastCalendarYear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Last Calendar Year-to-date")]
        LastCalendarYeartodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Week")]
        NextWeek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next 4 Weeks")]
        Next4Weeks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Month")]
        NextMonth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Fiscal Quarter")]
        NextFiscalQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Fiscal Year")]
        NextFiscalYear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Calendar Quarter")]
        NextCalendarQuarter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Next Calendar Year")]
        NextCalendarYear,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum SummarizeColumnsByEnum {
        
        /// <remarks/>
        Total,
        
        /// <remarks/>
        Year,
        
        /// <remarks/>
        Quarter,
        
        /// <remarks/>
        FiscalYear,
        
        /// <remarks/>
        FiscalQuarter,
        
        /// <remarks/>
        Month,
        
        /// <remarks/>
        Week,
        
        /// <remarks/>
        Days,
        
        /// <remarks/>
        Customers,
        
        /// <remarks/>
        Vendors,
        
        /// <remarks/>
        Employees,
        
        /// <remarks/>
        Departments,
        
        /// <remarks/>
        Classes,
        
        /// <remarks/>
        ProductsAndServices,
    }
    
    /// <remarks/>
    /// <summary>
    /// Specifies the column type definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=false)]
    public enum ColumnTypeEnum {
        
        /// <remarks/>
        Account,
        
        /// <remarks/>
        Money,
        
        /// <remarks/>
        Rate,
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        Vendor,
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        ProductsAndService,
        
        /// <remarks/>
        Department,
        
        /// <remarks/>
        Class,
        
        /// <remarks/>
        String,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Attributes {
        
        private Attribute[] attributeField;
        
        /// <remarks/>
        /// <summary>
        /// Describes the type
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Attribute")]
        public Attribute[] Attribute {
            get {
                return attributeField;
            }
            set {
                attributeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Columns", Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute("Columns", Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Columns1 {
        
        private Column[] columnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Column")]
        public Column[] Column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Intuit.Ipp.XsdExtension", "1.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Rows", Namespace="http://schema.intuit.com/finance/v3")]
    [System.Xml.Serialization.XmlRootAttribute("Rows", Namespace="http://schema.intuit.com/finance/v3", IsNullable=true)]
    public partial class Rows1 {
        
        private Row[] rowField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Row")]
        public Row[] Row {
            get {
                return rowField;
            }
            set {
                rowField = value;
            }
        }
    }
}
